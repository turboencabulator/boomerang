/**
 * \file
 * \brief Scanner for transformation language.
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

%name TransformationScanner

%{
	#ifdef HAVE_CONFIG_H
	#include <config.h>
	#endif
%}

%header{
	#include "transformation-parser.h"
	#include <string>
%}

%{
	#define YY_USER_ACTION \
		count(yylloc);
%}

%define IOSTREAM
%define DEBUG 1

%define MEMBERS \
	public: \
		typedef TransformationParser::token_type token_type; \
		typedef TransformationParser::semantic_type semantic_type; \
		typedef TransformationParser::location_type location_type; \
		std::string lineBuf; /* the current line */ \
		int line = 1; \
		int column = 1; \
	private: \
		void count(location_type &);

%define CONSTRUCTOR_PARAM std::istream &ins, bool trace
%define CONSTRUCTOR_INIT
%define CONSTRUCTOR_CODE yyin = &ins; yy_flex_debug = trace;

%define LEX_PARAM TransformationParser::semantic_type &yylval, TransformationParser::location_type &yylloc

D                       [0-9]
/* Allow ? and @ in identifiers, so we can use mangled names */
L                       [a-zA-Z_?@]
H                       [a-fA-F0-9]
E                       [Ee][+-]?{D}+
FS                      (f|F|l|L)
IS                      (u|U|l|L)*

%x COMMENT

%%

"/*"                    { BEGIN(COMMENT); }
<COMMENT>"*/"           { BEGIN(INITIAL); }
<COMMENT>[^*\n]+        ;
<COMMENT>"*"            ;
<COMMENT>\n             ;

"sizeof"                { return token_type::SIZEOF; }
"where"                 { return token_type::WHERE; }
"becomes"               { return token_type::BECOMES; }
"kind("                 { return token_type::KIND; }
"type("                 { return token_type::TYPE; }
"pointer("              { return token_type::POINTER; }
"compound"              { return token_type::COMPOUND; }
"array"                 { return token_type::ARRAY; }
"r["                    { return token_type::REGOF; }
"m["                    { return token_type::MEMOF; }
"a["                    { return token_type::ADDROF; }
"true"                  { return token_type::BOOL_TRUE; }
"false"                 { return token_type::BOOL_FALSE; }
{L}({L}|{D})*\(         { yylval.str = new std::string(yytext, yyleng - 1); return token_type::FUNC; }

{L}({L}|{D})*           { yylval.str = new std::string(yytext, yyleng); return token_type::IDENTIFIER; }

0[xX]{H}+{IS}?          |
0{D}+{IS}?              |
{D}+{IS}?               { yylval.ival = strtol(yytext, nullptr, 0); return token_type::CONSTANT; }
L?'(\\.|[^\\'])+'       { return token_type::CONSTANT; }

{D}+{E}{FS}?            |
{D}*"."{D}+({E})?{FS}?  |
{D}+"."{D}*({E})?{FS}?  { return token_type::CONSTANT; }

L?\"(\\.|[^\\"])*\"     { yylval.str = new std::string(yytext, yyleng); return token_type::STRING_LITERAL; }

"..."                   { return token_type::ELLIPSIS; }
">>="                   { return token_type::RIGHT_ASSIGN; }
"<<="                   { return token_type::LEFT_ASSIGN; }
"+="                    { return token_type::ADD_ASSIGN; }
"-="                    { return token_type::SUB_ASSIGN; }
"*="                    { return token_type::MUL_ASSIGN; }
"/="                    { return token_type::DIV_ASSIGN; }
"%="                    { return token_type::MOD_ASSIGN; }
"&="                    { return token_type::AND_ASSIGN; }
"^="                    { return token_type::XOR_ASSIGN; }
"|="                    { return token_type::OR_ASSIGN; }
">>"                    { return token_type::RIGHT_OP; }
"<<"                    { return token_type::LEFT_OP; }
"++"                    { return token_type::INC_OP; }
"--"                    { return token_type::DEC_OP; }
"->"                    { return token_type::PTR_OP; }
"&&"                    { return token_type::AND_OP; }
"||"                    { return token_type::OR_OP; }
"<="                    { return token_type::LE_OP; }
">="                    { return token_type::GE_OP; }
"=="                    { return token_type::EQ_OP; }
"!="                    { return token_type::NE_OP; }
";"                     |
"{"                     |
"}"                     |
","                     |
":"                     |
"="                     |
"("                     |
")"                     |
"["                     |
"]"                     |
"."                     |
"&"                     |
"!"                     |
"~"                     |
"-"                     |
"+"                     |
"*"                     |
"/"                     |
"%"                     |
"<"                     |
">"                     |
"^"                     |
"|"                     |
"?"                     { return yytext[0]; }

[ \t\v\n\f]+            ;
.                       ; /* ignore bad characters */

%%

void
TransformationScanner::count(location_type &yylloc)
{
	yylloc.first_line = line;
	yylloc.first_column = column;
	for (size_t i = 0; yytext[i]; ++i) {
		if (yytext[i] == '\n') {
			lineBuf.clear();
			++line;
			column = 1;
		} else {
			lineBuf.push_back(yytext[i]);
			if (yytext[i] == '\t' && (column % 8))
				column += 8 - (column % 8);
			++column;
		}
	}
	/* Last position is 1 column past the end,
	 * or next line, column 1 if yytext ends with '\n'. */
	yylloc.last_line = line;
	yylloc.last_column = column;
}
