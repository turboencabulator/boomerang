/**
 * \file
 * \brief Scanner for ANSI C.
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

%name AnsiCScanner

%{
	#ifdef HAVE_CONFIG_H
	#include <config.h>
	#endif
%}

%header{
	#include "ansi-c-parser.h"
	#include <string>
%}

%{
	#define YY_USER_ACTION \
		count();
%}

%define IOSTREAM
%define DEBUG 1

%define MEMBERS \
	public: \
		typedef AnsiCParser::token_type token_type; \
		typedef AnsiCParser::semantic_type semantic_type; \
		std::string lineBuf; /* the current line */ \
		int theLine = 1;     /* the current line number */ \
		int column = 0; \
	private: \
		void count(); \
		int check_type();

%define CONSTRUCTOR_PARAM std::istream &ins, bool trace
%define CONSTRUCTOR_INIT
%define CONSTRUCTOR_CODE yyin = &ins; yy_flex_debug = trace;

%define LEX_PARAM AnsiCParser::semantic_type &yylval

D                       [0-9]
/* Allow ? and @ in identifiers, so we can use mangled names */
L                       [a-zA-Z_?@]
H                       [a-fA-F0-9]
E                       [Ee][+-]?{D}+
FS                      (f|F|l|L)
IS                      (u|U|l|L)*

%x COMMENT

%%

^#include               { return token_type::PREINCLUDE; }
^#define                { return token_type::PREDEFINE; }
^#if                    { return token_type::PREIF; }
^#ifdef                 { return token_type::PREIFDEF; }
^#endif                 { return token_type::PREENDIF; }
^#line                  { return token_type::PRELINE; }

"//".*                  ;
"/*"                    { BEGIN(COMMENT); }
<COMMENT>"*/"           { BEGIN(INITIAL); }
<COMMENT>[^*\n]+        ;
<COMMENT>"*"            ;
<COMMENT>\n             ;

"auto"                  { return token_type::AUTO; }
"break"                 { return token_type::BREAK; }
"case"                  { return token_type::CASE; }
"char"                  { return token_type::CHAR; }
"const"                 { return token_type::CONST; }
"continue"              { return token_type::CONTINUE; }
"default"               { return token_type::DEFAULT; }
"do"                    { return token_type::DO; }
"double"                { return token_type::DOUBLE; }
"else"                  { return token_type::ELSE; }
"enum"                  { return token_type::ENUM; }
"extern"                { return token_type::EXTERN; }
"float"                 { return token_type::FLOAT; }
"for"                   { return token_type::FOR; }
"goto"                  { return token_type::GOTO; }
"if"                    { return token_type::IF; }
"int"                   { return token_type::INT; }
"long"                  { return token_type::LONG; }
"register"              { return token_type::REGISTER; }
"return"                { return token_type::RETURN; }
"short"                 { return token_type::SHORT; }
"signed"                { return token_type::SIGNED; }
"sizeof"                { return token_type::SIZEOF; }
"__nodecode"            { return token_type::NODECODE; }
"__incomplete"          { return token_type::INCOMPLETE; }
"__cdecl"               { return token_type::CDECL; }
"__pascal"              { return token_type::PASCAL; }
"__stdcall"             { return token_type::PASCAL; }
"__custom"              { return token_type::CUSTOM; }
"__thiscall"            { return token_type::THISCALL; }
"PREFER"                { return token_type::PREFER; }
"__withstack("          { return token_type::WITHSTACK; }
"__symref"              { return token_type::SYMBOLREF; }
"static"                { return token_type::STATIC; }
"struct"                { return token_type::STRUCT; }
"switch"                { return token_type::SWITCH; }
"typedef"               { return token_type::TYPEDEF; }
"union"                 { return token_type::UNION; }
"unsigned"              { return token_type::UNSIGNED; }
"void"                  { return token_type::VOID; }
"volatile"              { return token_type::VOLATILE; }
"while"                 { return token_type::WHILE; }
"r["                    { return token_type::REGOF; }
"m["                    { return token_type::MEMOF; }
"@max("                 { return token_type::MAXBOUND; }

{L}({L}|{D})*           { yylval.str = new std::string(yytext, yyleng); return check_type(); }

0[xX]{H}+{IS}?          |
0{D}+{IS}?              |
{D}+{IS}?               { yylval.ival = strtol(yytext, nullptr, 0); return token_type::CONSTANT; }
L?'(\\.|[^\\'])+'       { return token_type::CONSTANT; }

{D}+{E}{FS}?            |
{D}*"."{D}+({E})?{FS}?  |
{D}+"."{D}*({E})?{FS}?  { return token_type::CONSTANT; }

L?\"(\\.|[^\\"])*\"     { yylval.str = new std::string(yytext, yyleng); return token_type::STRING_LITERAL; }

"..."                   { return token_type::ELLIPSIS; }
">>="                   { return token_type::RIGHT_ASSIGN; }
"<<="                   { return token_type::LEFT_ASSIGN; }
"+="                    { return token_type::ADD_ASSIGN; }
"-="                    { return token_type::SUB_ASSIGN; }
"*="                    { return token_type::MUL_ASSIGN; }
"/="                    { return token_type::DIV_ASSIGN; }
"%="                    { return token_type::MOD_ASSIGN; }
"&="                    { return token_type::AND_ASSIGN; }
"^="                    { return token_type::XOR_ASSIGN; }
"|="                    { return token_type::OR_ASSIGN; }
">>"                    { return token_type::RIGHT_OP; }
"<<"                    { return token_type::LEFT_OP; }
"++"                    { return token_type::INC_OP; }
"--"                    { return token_type::DEC_OP; }
"->"                    { return token_type::PTR_OP; }
"&&"                    { return token_type::AND_OP; }
"||"                    { return token_type::OR_OP; }
"<="                    { return token_type::LE_OP; }
">="                    { return token_type::GE_OP; }
"=="                    { return token_type::EQ_OP; }
"!="                    { return token_type::NE_OP; }
";"                     |
"{"                     |
"}"                     |
","                     |
":"                     |
"="                     |
"("                     |
")"                     |
"["                     |
"]"                     |
"."                     |
"&"                     |
"!"                     |
"~"                     |
"-"                     |
"+"                     |
"*"                     |
"/"                     |
"%"                     |
"<"                     |
">"                     |
"^"                     |
"|"                     |
"?"                     { return yytext[0]; }

[ \t\v\n\f]+            ;
.                       ; /* ignore bad characters */

%%

void
AnsiCScanner::count()
{
	for (size_t i = 0; yytext[i]; ++i) {
		if (yytext[i] == '\n') {
			lineBuf.clear();
			++theLine;
			column = 0;
		} else {
			lineBuf.push_back(yytext[i]);
			if (yytext[i] == '\t')
				column += 8 - (column % 8);
			else
				++column;
		}
	}
}

int
AnsiCScanner::check_type()
{
#if 0 // pseudo code --- this is what it should check
	if (yytext == type_name)
		return token_type::TYPE_NAME;
	return token_type::IDENTIFIER;
#else // it actually will only return IDENTIFIER
	return token_type::IDENTIFIER;
#endif
}
