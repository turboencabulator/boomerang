/**
 * \file
 * \brief Parser for ANSI C.
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

%name AnsiCParser

%{
	#ifdef HAVE_CONFIG_H
	#include <config.h>
	#endif
%}

%header{
	#include "exp.h"
	#include "signature.h"
	#include "type.h"

	#include <list>
	#include <string>

	struct TypeIdent {
		Type *ty;
		std::string nam;

		TypeIdent(Type *ty, const std::string &nam) : ty(ty), nam(nam) { }
	};

	struct SymbolMods {
		bool noDecode = false;
		bool incomplete = false;
	};

	struct Symbol {
		ADDRESS addr;
		std::string nam;
		Type *ty = nullptr;
		Signature *sig = nullptr;
		SymbolMods *mods = nullptr;

		Symbol(ADDRESS a) : addr(a) { }
	};

	struct CustomOptions {
		Exp *exp = nullptr;
		int sp = 0;
	};

	struct SymbolRef {
		ADDRESS addr;
		std::string nam;

		SymbolRef(ADDRESS a, const std::string &nam) : addr(a), nam(nam) { }
	};

	struct Bound {
		int kind;
		std::string nam;

		Bound(int kind, const std::string &nam) : kind(kind), nam(nam) { }
	};

	/**
	 * Driver for ANSI C parser/scanner.  Public members will contain the
	 * parsed data after parsing.
	 */
	class AnsiCDriver {
		bool trace = false;

	public:
		std::list<Signature *> signatures;
		std::list<Symbol *> symbols;
		std::list<SymbolRef *> refs;

		AnsiCDriver(bool trace = false) : trace(trace) { }
		int parse(std::istream &, platform, callconv);
	};

	class AnsiCScanner;
%}

%union {
	int ival;
	std::string *str;
	Type *type;
	std::list<Parameter *> *param_list;
	std::list<int> *num_list;
	Parameter *param;
	Exp *exp;
	Signature *sig;
	TypeIdent *type_ident;
	Bound *bound;
	std::list<TypeIdent *> *type_ident_list;
	SymbolMods *mods;
	CustomOptions *custom_options;
	callconv cc;
}

%define DEBUG 1
%define LSP_NEEDED

%define MEMBERS \
	public: \
		typedef YY_AnsiCParser_ENUM_TOKEN token_type; \
		typedef YY_AnsiCParser_STYPE semantic_type; \
		typedef YY_AnsiCParser_LTYPE location_type; \
	private: \
		AnsiCDriver &drv; \
		AnsiCScanner &scn;

%define CONSTRUCTOR_PARAM \
	AnsiCDriver &driver, AnsiCScanner &scanner, bool trace
%define CONSTRUCTOR_INIT \
	: drv(driver), scn(scanner)
%define CONSTRUCTOR_CODE \
	yydebug = trace;

%define PARSE_PARAM platform plat, callconv cc

%token PREINCLUDE PREDEFINE PREIF PREIFDEF PREENDIF PRELINE
%token<str> IDENTIFIER STRING_LITERAL
%token<ival> CONSTANT
%token SIZEOF
%token NODECODE
%token INCOMPLETE
%token SYMBOLREF
%token CDECL PASCAL THISCALL
%token REGOF
%token MEMOF
%token MAXBOUND
%token CUSTOM PREFER
%token WITHSTACK
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%left '+' '-'

%left '*' '['
%nonassoc CONST

%type<type> type
%type<param> param
%type<param> param_exp
%type<exp> exp
%type<bound> optional_bound
%type<custom_options> custom_options
%type<param_list> param_list
%type<num_list> num_list
%type<type_ident> type_ident
%type<type_ident_list> type_ident_list
%type<sig> signature
%type<mods> symbol_mods
%type<type> array_modifier
%type<cc> convention

%start translation_unit

%%

translation_unit
	: decls
	;

decls
	: decl decls
	| /* empty */
	;

decl
	: type_decl
	| func_decl
	| symbol_decl
	| symbol_ref_decl
	;

convention
	: CDECL    { $$ = CONV_C; }
	| PASCAL   { $$ = CONV_PASCAL; }
	| THISCALL { $$ = CONV_THISCALL; }
	;

num_list
	: num_list ',' CONSTANT { $$ = $1; $$->push_back($3); }
	| CONSTANT          { $$ = new std::list<int>(1, $1); }
	| /* empty */       { $$ = new std::list<int>; }
	;

param_list
	: param_list ',' param_exp { $$ = $1; $$->push_back($3); }
	| param_exp    { $$ = new std::list<Parameter *>(1, $1); }
	| VOID         { $$ = new std::list<Parameter *>; }
	| /* empty */  { $$ = new std::list<Parameter *>; }
	;

param_exp
	: exp ':' param { $$ = $3; $$->exp = $1; }
	| param         { $$ = $1; }
	;

exp
	: REGOF CONSTANT ']' { $$ = Location::regOf($2); }
	| MEMOF exp ']'      { $$ = Location::memOf($2); }
	| exp '+' exp        { $$ = new Binary(opPlus, $1, $3); }
	| exp '-' exp        { $$ = new Binary(opMinus, $1, $3); }
	| CONSTANT           { $$ = new Const($1); }
	;

optional_bound
	: MAXBOUND IDENTIFIER ')' { $$ = new Bound(0, *$2); delete $2; }
	| /* empty */             { $$ = nullptr; }
	;

param
	: type_ident optional_bound {
		if ($1->ty->resolvesToArray()) {
			/*
			 * C has complex semantics for passing arrays.. seeing as
			 * we're supposedly parsing C, then we should deal with this.
			 * When you pass an array in C it is understood that you are
			 * passing that array "by reference".  As all parameters in
			 * our internal representation are passed "by value", we alter
			 * the type here to be a pointer to an array.
			 */
			$1->ty = new PointerType($1->ty);
		}
		$$ = new Parameter($1->ty, $1->nam);
		delete $1;
		if ($2) {
			switch ($2->kind) {
			case 0: $$->boundMax = $2->nam;
			}
		}
		delete $2;
	  }
	| type '(' '*' IDENTIFIER ')' '(' param_list ')' {
		Signature *sig = Signature::instantiate(plat, cc, nullptr);
		sig->addReturn($1);
		for (const auto &param : *$7) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $7;
		$$ = new Parameter(new PointerType(new FuncType(sig)), *$4);
		delete $4;
	  }
	| ELLIPSIS {
		$$ = new Parameter(new VoidType, "...");
	  }
	;

type_decl
	: TYPEDEF type_ident ';' {
		Type::addNamedType($2->nam, $2->ty);
		delete $2;
	  }
	| TYPEDEF type '(' '*' IDENTIFIER ')' '(' param_list ')' ';' {
		Signature *sig = Signature::instantiate(plat, cc, nullptr);
		sig->addReturn($2);
		for (const auto &param : *$8) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $8;
		Type::addNamedType(*$5, new PointerType(new FuncType(sig)));
		delete $5;
	  }
	| TYPEDEF type_ident '(' param_list ')' ';' {
		Signature *sig = Signature::instantiate(plat, cc, $2->nam.c_str());
		sig->addReturn($2->ty);
		for (const auto &param : *$4) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $4;
		Type::addNamedType($2->nam, new FuncType(sig));
		delete $2;
	  }
	| STRUCT IDENTIFIER '{' type_ident_list '}' ';' {
		auto t = new CompoundType();
		for (const auto &type_ident : *$4) {
			t->addType(type_ident->ty, type_ident->nam);
		}
		delete $4;
		$2->insert(0, "struct ");
		Type::addNamedType(*$2, t);
		delete $2;
	  }
	;

func_decl
	: signature ';' {
		drv.signatures.push_back($1);
	  }
	| signature PREFER type_ident '(' num_list ')' ';' {
		$1->setPreferedReturn($3->ty);
		$1->setPreferedName($3->nam);
		delete $3;
		for (const auto &num : *$5) {
			$1->addPreferedParameter(num - 1);
		}
		delete $5;
		drv.signatures.push_back($1);
	  }
	;

signature
	: type_ident '(' param_list ')' {
		/* Use the passed calling convention (cc) */
		Signature *sig = Signature::instantiate(plat, cc, $1->nam.c_str());
		sig->addReturn($1->ty);
		delete $1;
		for (const auto &param : *$3) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $3;
		$$ = sig;
	  }
	| convention type_ident '(' param_list ')' {
		Signature *sig = Signature::instantiate(plat, $1, $2->nam.c_str());
		sig->addReturn($2->ty);
		delete $2;
		for (const auto &param : *$4) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $4;
		$$ = sig;
	  }
	| CUSTOM custom_options type_ident '(' param_list ')' {
		auto sig = new CustomSignature($3->nam.c_str());
		if ($2->exp)
			sig->addReturn($3->ty, $2->exp);
		if ($2->sp)
			sig->setSP($2->sp);
		delete $2;
		delete $3;
		for (const auto &param : *$5) {
			if (param->name != "...") {
				sig->addParameter(param);
			} else {
				sig->addEllipsis();
				delete param;
			}
		}
		delete $5;
		$$ = sig;
	  }
	;

symbol_ref_decl
	: SYMBOLREF CONSTANT IDENTIFIER ';' {
		auto ref = new SymbolRef($2, *$3);
		delete $3;
		drv.refs.push_back(ref);
	  }
	;

symbol_decl
	: CONSTANT type_ident ';' {
		auto sym = new Symbol($1);
		sym->nam = $2->nam;
		sym->ty = $2->ty;
		drv.symbols.push_back(sym);
		delete $2;
	  }
	/*
	 * Note: in practice, a function signature needs either a
	 * "symbolmods" (__nodecode or __incomplete), or a calling
	 * convention (__cdecl, __pascal, __thiscall, etc).
	 * This is because of the one-symbol lookahead limitation;
	 * the parser can't distinguish 123 int foo from 123 int foo()
	 */
	| CONSTANT symbol_mods signature ';' {
		auto sym = new Symbol($1);
		sym->sig = $3;
		sym->mods = $2;
		drv.symbols.push_back(sym);
	  }
	;

symbol_mods
	: NODECODE symbol_mods   { $$ = $2; $$->noDecode = true; }
	| INCOMPLETE symbol_mods { $$ = $2; $$->incomplete = true; }
	| /* empty */            { $$ = new SymbolMods(); }
	;

custom_options
	: exp ':'                { $$ = new CustomOptions(); $$->exp = $1; }
	| WITHSTACK CONSTANT ')' { $$ = new CustomOptions(); $$->sp = $2; }
	| /* empty */            { $$ = new CustomOptions(); }
	;

array_modifier
	: '[' CONSTANT ']'                { $$ = new ArrayType(nullptr, $2); }
	| '[' ']'                         { $$ = new ArrayType(nullptr); }
	| array_modifier '[' CONSTANT ']' { $$ = new ArrayType($1, $3); }
	| array_modifier '[' ']'          { $$ = new ArrayType($1); }
	;

type_ident
	: type IDENTIFIER {
		$$ = new TypeIdent($1, *$2);
		delete $2;
	  }
	| type IDENTIFIER array_modifier {
		((ArrayType *)$3)->fixBaseType($1);
		$$ = new TypeIdent($3, *$2);
		delete $2;
	  }
	;

type_ident_list
	: type_ident_list type_ident ';' { $$ = $1; $$->push_back($2); }
	| type_ident ';'     { $$ = new std::list<TypeIdent *>(1, $1); }
	;

type
	: CHAR                  { $$ = new CharType(); }
	| SHORT                 { $$ = new IntegerType(16, 1); }
	| INT                   { $$ = new IntegerType(32, 1); }
	| LONG                  { $$ = new IntegerType(32, 1); }
	| LONG LONG             { $$ = new IntegerType(64, 1); }
	| UNSIGNED CHAR         { $$ = new IntegerType(8, 0); }
	| UNSIGNED SHORT        { $$ = new IntegerType(16, 0); }
	| UNSIGNED              { $$ = new IntegerType(32, 0); }
	| UNSIGNED INT          { $$ = new IntegerType(32, 0); }
	| UNSIGNED LONG         { $$ = new IntegerType(32, 0); }
	| UNSIGNED LONG LONG    { $$ = new IntegerType(64, 0); }
	| FLOAT                 { $$ = new FloatType(32); }
	| DOUBLE                { $$ = new FloatType(64); }
	| VOID                  { $$ = new VoidType(); }
	| type '*'              { $$ = new PointerType($1); }

	/* This isn't C, but it makes defining pointers to arrays easier */
	| type '[' CONSTANT ']' { $$ = new ArrayType($1, $3); }
	| type '[' ']'          { $$ = new ArrayType($1); }

	| CONST type            { $$ = $2; }

	| IDENTIFIER {
		//$$ = Type::getNamedType($1);
		//if (!$$)
		$$ = new NamedType(*$1);
		delete $1;
	  }
	| STRUCT IDENTIFIER {
		$2->insert(0, "struct ");
		$$ = new NamedType(*$2);
		delete $2;
	  }
	| STRUCT '{' type_ident_list '}' {
		auto t = new CompoundType();
		for (const auto &type_ident : *$3) {
			t->addType(type_ident->ty, type_ident->nam);
		}
		delete $3;
		$$ = t;
	  }
	;

%%

#include "ansi-c-scanner.h"

int
AnsiCParser::yylex()
{
	return scn.yylex(yylval, yylloc);
}

void
AnsiCParser::yyerror(const char *msg)
{
	std::cerr << msg << "\n";
}

/**
 * \brief Create and run the parser/scanner pair.
 *
 * \param in    ANSI C file.
 * \param plat  Argument to Signature::instantiate.
 * \param cc    Argument to Signature::instantiate.
 *
 * \returns Unmodified result from the parser,
 *          in general 0 for success, 1 for invalid input.
 */
int
AnsiCDriver::parse(std::istream &in, platform plat, callconv cc)
{
	auto scanner = AnsiCScanner(in, trace);
	auto parser = AnsiCParser(*this, scanner, trace);
	return parser.yyparse(plat, cc);
}
