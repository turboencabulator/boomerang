/**
 * \file
 * \brief Defines a scanner to parse the tokens of a Semantic Specification
 *        Language specification.
 *
 * \authors
 * Copyright (C) 1997, Shane Sendall
 * \authors
 * Copyright (C) 1998-2001, The University of Queensland
 * \authors
 * Copyright (C) 2001, Sun Microsystems, Inc
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

%name SSLScanner

%{
	#ifdef HAVE_CONFIG_H
	#include <config.h>
	#endif
%}

%header{
	#include "sslparser.h"
%}

%{
	#include <cstdlib>
	#include <cstring>

	#define YY_USER_ACTION \
		count(yylloc);
%}

%define IOSTREAM
%define DEBUG 1

%define MEMBERS \
	public: \
		typedef SSLParser::token_type token_type; \
		typedef SSLParser::semantic_type semantic_type; \
		typedef SSLParser::location_type location_type; \
		int line = 1; \
		int column = 1; \
	private: \
		void count(location_type &);

%define CONSTRUCTOR_PARAM std::istream &ins, bool trace
%define CONSTRUCTOR_INIT
%define CONSTRUCTOR_CODE yyin = &ins; yy_flex_debug = trace;

%define LEX_PARAM SSLParser::semantic_type &yylval, SSLParser::location_type &yylloc

%%
	/* Quell unused variable warnings */
	(void)yy_last_accepting_state;
	(void)yy_last_accepting_cpos;

"INTEGER"    |
"integer"    { return token_type::TOK_INTEGER; }
"FLOAT"      |
"float"      { return token_type::TOK_FLOAT; }
"OPERAND"    { return token_type::OPERAND; }
"ENDIANNESS" |
"endianness" { return token_type::ENDIANNESS; }
"BIG"        |
"big"        { return token_type::BIG; }
"LITTLE"     |
"little"     { return token_type::LITTLE; }
"COVERS"     { return token_type::COVERS; }
"SHARES"     { return token_type::SHARES; }
"FAST"       { return token_type::FAST; }
"FETCHEXEC"  { return token_type::FETCHEXEC; }

"*"[a-z]?[0-9]*"*" { yylval.str = new std::string(yytext + 1, yyleng - 2); return token_type::ASSIGNTYPE; }

"or"    { yylval.op = opOr;        return token_type::LOG_OP; }
"and"   { yylval.op = opAnd;       return token_type::LOG_OP; }

"="     { yylval.op = opEqual;     return token_type::COND_OP; }
"~="    { yylval.op = opNotEqual;  return token_type::COND_OP; }
"<"     { yylval.op = opLess;      return token_type::COND_OP; }
">"     { yylval.op = opGtr;       return token_type::COND_OP; }
"<="    { yylval.op = opLessEq;    return token_type::COND_OP; }
">="    { yylval.op = opGtrEq;     return token_type::COND_OP; }
"<u"    { yylval.op = opLessUns;   return token_type::COND_OP; }
">u"    { yylval.op = opGtrUns;    return token_type::COND_OP; }
"<=u"   { yylval.op = opLessEqUns; return token_type::COND_OP; }
">=u"   { yylval.op = opGtrEqUns;  return token_type::COND_OP; }

"rlc"   { yylval.op = opRotateLC;  return token_type::BIT_OP; }
"rrc"   { yylval.op = opRotateRC;  return token_type::BIT_OP; }
"rl"    { yylval.op = opRotateL;   return token_type::BIT_OP; }
"rr"    { yylval.op = opRotateR;   return token_type::BIT_OP; }
">>"    { yylval.op = opShiftR;    return token_type::BIT_OP; }
"<<"    { yylval.op = opShiftL;    return token_type::BIT_OP; }
">>A"   { yylval.op = opShiftRA;   return token_type::BIT_OP; }
"|"     { yylval.op = opBitOr;     return token_type::BIT_OP; }
"&"     { yylval.op = opBitAnd;    return token_type::BIT_OP; }
"^"     { yylval.op = opBitXor;    return token_type::BIT_OP; }

"%"     { yylval.op = opMod;       return token_type::ARITH_OP; }
"*"     { yylval.op = opMult;      return token_type::ARITH_OP; }
"/"     { yylval.op = opDiv;       return token_type::ARITH_OP; }
"*!"    { yylval.op = opMults;     return token_type::ARITH_OP; }
"/!"    { yylval.op = opDivs;      return token_type::ARITH_OP; }
"%!"    { yylval.op = opMods;      return token_type::ARITH_OP; }
"+"     { yylval.op = opPlus;      return token_type::ARITH_OP; }
"-"     { yylval.op = opMinus;     return token_type::ARITH_OP; }

"*f"    { yylval.op = opFMult;     return token_type::FARITH_OP; }
"*fd"   { yylval.op = opFMultd;    return token_type::FARITH_OP; }
"*fq"   { yylval.op = opFMultq;    return token_type::FARITH_OP; }
"*fsd"  { yylval.op = opFMultsd;   return token_type::FARITH_OP; }
"*fdq"  { yylval.op = opFMultdq;   return token_type::FARITH_OP; }
"/f"    { yylval.op = opFDiv;      return token_type::FARITH_OP; }
"/fd"   { yylval.op = opFDivd;     return token_type::FARITH_OP; }
"/fq"   { yylval.op = opFDivq;     return token_type::FARITH_OP; }
"+f"    { yylval.op = opFPlus;     return token_type::FARITH_OP; }
"+fd"   { yylval.op = opFPlusd;    return token_type::FARITH_OP; }
"+fq"   { yylval.op = opFPlusq;    return token_type::FARITH_OP; }
"-f"    { yylval.op = opFMinus;    return token_type::FARITH_OP; }
"-fd"   { yylval.op = opFMinusd;   return token_type::FARITH_OP; }
"-fq"   { yylval.op = opFMinusq;   return token_type::FARITH_OP; }
"pow"   { yylval.op = opPow;       return token_type::FARITH_OP; }

"~"     { yylval.op = opNot;  return token_type::NEG_OP; }
"L~"    { yylval.op = opLNot; return token_type::NEG_OP; }
"~f"    { yylval.op = opFNeg; return token_type::NEG_OP; }
"=>"    { return token_type::THEN; }
"->"    { return token_type::INDEX; }
":="    { return token_type::EQUATE; }
"::="   { return token_type::ASSIGN; }
".."    { return token_type::TO; }

"addr("          { yylval.op = opAddrOf;  return token_type::UNARY_FUNC; }
"fsize("         { yylval.op = opFsize;   return token_type::CONV_FUNC; }
"itof("          { yylval.op = opItof;    return token_type::CONV_FUNC; }
"ftoi("          { yylval.op = opFtoi;    return token_type::CONV_FUNC; }
"fround("        { yylval.op = opFround;  return token_type::CONV_FUNC; }
"truncu("        { yylval.op = opTruncu;  return token_type::CONV_FUNC; }
"truncs("        { yylval.op = opTruncs;  return token_type::CONV_FUNC; }
"zfill("         { yylval.op = opZfill;   return token_type::CONV_FUNC; }
"sgnex("         { yylval.op = opSgnEx;   return token_type::CONV_FUNC; }
"ftrunc("        { yylval.op = opFtrunc;  return token_type::UNARY_FUNC; }
"fabs("          { yylval.op = opFabs;    return token_type::UNARY_FUNC; }
"defineflags("   |
"undefineflags(" { return token_type::FLAGMACRO; }
"FPOP"           { yylval.op = opFpop;    return token_type::FPOP; }
"FPUSH"          { yylval.op = opFpush;   return token_type::FPUSH; }
"sin("           { yylval.op = opSin;     return token_type::UNARY_FUNC; }
"cos("           { yylval.op = opCos;     return token_type::UNARY_FUNC; }
"tan("           { yylval.op = opTan;     return token_type::UNARY_FUNC; }
"arctan("        { yylval.op = opArcTan;  return token_type::UNARY_FUNC; }
"log2("          { yylval.op = opLog2;    return token_type::UNARY_FUNC; }
"loge("          { yylval.op = opLoge;    return token_type::UNARY_FUNC; }
"log10("         { yylval.op = opLog10;   return token_type::UNARY_FUNC; }
"execute("       { yylval.op = opExecute; return token_type::UNARY_FUNC; }
"sqrt("          { yylval.op = opSqrt;    return token_type::UNARY_FUNC; }
"succ("          { return token_type::SUCCESSOR; }

"tmp"[a-zA-Z0-9_]* { yylval.str = new std::string(yytext, yyleng); return token_type::TEMP; }

"r["        { return token_type::REG_IDX; }
"r"[0-9]*   { yylval.num = strtol(&yytext[1], nullptr, 10); return token_type::REG_NUM; }
"m["        { return token_type::MEM_IDX; }
"_"         { return yytext[0]; }

"%"[A-Za-z][A-Za-z0-9]*    { yylval.str = new std::string(yytext, yyleng); return token_type::REG_ID; }
_?[A-Za-z][A-Za-z0-9_]*"(" { yylval.str = new std::string(yytext, yyleng - 1); return token_type::NAME_CALL; }
_?[A-Za-z][A-Za-z0-9_]*"[" { yylval.str = new std::string(yytext, yyleng - 1); return token_type::NAME_LOOKUP; }
_?[A-Za-z][A-Za-z0-9_]*    { yylval.str = new std::string(yytext, yyleng); return token_type::NAME; }
"."[A-Za-z][A-Za-z.0-9]*   { yylval.str = new std::string(yytext, yyleng); return token_type::DECOR; }

[?:,{}()'"] |
"]"         |
"["         |
";"         |
"!"         |
"@"         |
"$"         { return yytext[0]; }

-?[0-9]+"."[0-9]+ { yylval.dbl = atof(yytext); return token_type::FLOATNUM; }
-?[0-9]+          { yylval.num = strtol(yytext, nullptr, 10); return token_type::NUM; }
0x[A-F0-9]+       { yylval.num = strtol(yytext, nullptr, 16); return token_type::NUM; }

-?"2**"[0-9]+ { // a power of two
	int sign = (yytext[0] == '-' ? -1 : 1);
	char *start = yytext + (sign == -1 ? 4 : 3);

	// David - changed to << for more efficient and
	// not depend on the <cmath> anymore.
	//yylval.num = (int)pow(2, strtol(start, nullptr, 10)) * sign;
	yylval.num = 1 << (strtol(start, nullptr, 10) * sign);
	return token_type::NUM;
}

[ \t]+  ;
#.*$    ; /* comment */
\n      ;
.       ;

%%

void
SSLScanner::count(location_type &yylloc)
{
	yylloc.first_line = line;
	yylloc.first_column = column;
	for (size_t i = 0; yytext[i]; ++i) {
		if (yytext[i] == '\n') {
			++line;
			column = 1;
		} else {
			if (yytext[i] == '\t' && (column % 8))
				column += 8 - (column % 8);
			++column;
		}
	}
	/* Last position is 1 column past the end,
	 * or next line, column 1 if yytext ends with '\n'. */
	yylloc.last_line = line;
	yylloc.last_column = column;
}
