#define sign_extend(N,SIZE) (((int)((N) << (sizeof(unsigned)*8-(SIZE)))) >> (sizeof(unsigned)*8-(SIZE)))
#include <assert.h>

#line 1 "machine/pentium/decoder.m"
/**
 * \file
 * \brief Contains the high level decoding functionality, for example matching
 *        logues, calls, branches, etc.  Ordinary instructions are processed
 *        in decoder_low.m
 *
 * \authors
 * Copyright (C) 1998-2001, The University of Queensland
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "pentiumdecoder.h"

#include "boomerang.h"
#include "exp.h"
#include "prog.h"
#include "rtl.h"
#include "statement.h"

#include <cassert>

class Proc;

#define DIS_R8    (dis_Reg(r8  +  8))
#define DIS_R16   (dis_Reg(r16 +  0))
#define DIS_R32   (dis_Reg(r32 + 24))
#define DIS_REG8  (dis_Reg(reg +  8))
#define DIS_REG16 (dis_Reg(reg +  0))
#define DIS_REG32 (dis_Reg(reg + 24))
#define DIS_SR16  (dis_Reg(sr16 + 16))
#define DIS_IDX   (dis_Reg(idx + 32))
#define DIS_IDXP1 (dis_Reg((idx + 1) % 7 + 32))

#define DIS_EADDR32 (dis_Eaddr(Eaddr, bf, 32))
#define DIS_EADDR16 (dis_Eaddr(Eaddr, bf, 16))
#define DIS_EADDR8  (dis_Eaddr(Eaddr, bf,  8))
#define DIS_MEM     (dis_Mem(Mem, bf))
#define DIS_MEM16   (dis_Mem(Mem16, bf))    // Probably needs changing
#define DIS_MEM32   (dis_Mem(Mem32, bf))    // Probably needs changing
#define DIS_MEM64   (dis_Mem(Mem64, bf))    // Probably needs changing
#define DIS_MEM80   (dis_Mem(Mem80, bf))    // Probably needs changing

#define DIS_I32     (addReloc(new Const(i32)))
#define DIS_I16     (new Const(i16))
#define DIS_I8      (new Const(i8))
#define DIS_COUNT   (new Const(count))
#define DIS_OFF     (addReloc(new Const(off)))

#define addressToPC(pc) (pc)
#define fetch8(pc)  bf->readNative1(pc)
#define fetch16(pc) bf->readNative2(pc)
#define fetch32(pc) (lastDwordLc = pc, bf->readNative4(pc))




static RTL *
SETS(ADDRESS pc, const std::string &name, Exp *dest, BRANCH_TYPE cond)
{
	auto bs = new BoolAssign();
	bs->setLeft(dest);
	bs->setCondType(cond);
	SHOW_ASM(name << " " << *dest);
	return new RTL(pc, bs);
}

/**
 * Constructor.  The code won't work without this (not sure why the default
 * constructor won't do...)
 */
PentiumDecoder::PentiumDecoder(Prog *prog) :
	NJMCDecoder(prog)
{
	std::string file = Boomerang::get().getProgPath() + "frontend/machine/pentium/pentium.ssl";
	RTLDict.readSSLFile(file);
}

#if 0 // Cruft?
// For now...
int
PentiumDecoder::decodeAssemblyInstruction(ADDRESS, ptrdiff_t)
{
	return 0;
}
#endif

static DecodeResult result;

/**
 * Decodes a machine instruction and returns an RTL instance.  In most cases a
 * single instruction is decoded.  However, if a higher level construct that
 * may consist of multiple instructions is matched, then there may be a need
 * to return more than one RTL.  The caller_prologue2 is an example of such a
 * construct which encloses an abritary instruction that must be decoded into
 * its own RTL.
 *
 * \param pc       The native address of the pc.
 * \param delta    The difference between the above address and the host
 *                 address of the pc (i.e. the address that the pc is at in
 *                 the loaded object file).
 * \param RTLDict  The dictionary of RTL templates used to instantiate the RTL
 *                 for the instruction being decoded.
 * \param proc     The enclosing procedure.
 *
 * \returns  A DecodeResult structure containing all the information gathered
 *           during decoding.
 */
DecodeResult &
PentiumDecoder::decodeInstruction(ADDRESS pc, const BinaryFile *bf)
{
	// Clear the result structure;
	result.reset();

	ADDRESS nextPC = NO_ADDRESS;

#line 128 "pentiumdecoder.cpp"

#line 122 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 122 "machine/pentium/decoder.m"
pc
#line 136 "pentiumdecoder.cpp"
;
  const char *MATCH_name;
  static const char *MATCH_name_r_m_0[] = {
    "ADDmrb", "ADDmrb", "ADDmrb", "ADDmrb", "FTST", "ADDmrb", "ADDmrb", 
    "ADDmrb", 
  };
  static const char *MATCH_name_r_m_3[] = {
    "ADDmrod", "ADDmrod", "ADDmrod", "ADDmrod", "FLDLG2", "ADDmrod", 
    "ADDmrod", "ADDmrod", 
  };
  static const char *MATCH_name_r_m_6[] = {
    "ADDrmb", "ADDrmb", "ADDrmb", "ADDrmb", "FXTRACT", "ADDrmb", "ADDrmb", 
    "ADDrmb", 
  };
  static const char *MATCH_name_r_m_9[] = {
    "ADDrmod", "ADDrmod", "ADDrmod", "ADDrmod", "FRNDINT", "ADDrmod", 
    "ADDrmod", "ADDrmod", 
  };
  static const char *MATCH_name_col_12[] = {
    "Jb.O", "Jb.NO", "Jb.B", "Jb.NB", "ADDiAL", "ADDiEAX", "PUSH.ES", 
    "POP.ES", 
  };
  static const char *MATCH_name_col_25[] = {
    "NOP", "MOV.eAX.Ovod", "MOV.Ob.AL", "MOV.Ov.eAXod", "ADCiAL", "ADCiEAX", 
    "PUSH.SS", "POP.SS", 
  };
  static const char *MATCH_name_col_38[] = {
    "MOV.AL.Ob", "LOOPE", "RET.Iw", "RET", "ANDiAL", "ANDiEAX", "Jb.BE", 
    "DAA", 
  };
  static const char *MATCH_name_col_51[] = {
    "LOOPNE", "Jb.NS", "LOOP", "Jb.NP", "XORiAL", "XORiEAX", "CMPSB", 
    "Jb.NBE", 
  };
  static const char *MATCH_name_row_52[] = {
    NULL, NULL, NULL, NULL, "INCod", "PUSHod", NULL, NULL, NULL, NULL, NULL, 
    "MOVib", 
  };
  static const char *MATCH_name_page_65[] = {"ADDiAX", "ORiAX", };
  static const char *MATCH_name_col_72[] = {
    "Jv.Oow", "Jv.NOow", "Jv.Bow", "Jv.NBow", "Jv.Zow", "Jv.NZow", "Jv.BEow", 
    "Jv.NBEow", 
  };
  static const char *MATCH_name_col_73[] = {
    "Jv.Sow", "Jv.NSow", "Jv.Pow", "Jv.NPow", "Jv.Low", "Jv.NLow", "Jv.LEow", 
    "Jv.NLEow", 
  };
  static const char *MATCH_name_page_137[] = {"ADCiAX", "SBBiAX", };
  static const char *MATCH_name_page_150[] = {"ANDiAX", "SUBiAX", };
  static const char *MATCH_name_page_163[] = {"XORiAX", "CMPiAX", };
  static const char *MATCH_name_page_164[] = {"INCow", "DECow", };
  static const char *MATCH_name_page_165[] = {"PUSHow", "POPow", };
  static const char *MATCH_name_col_166[] = {
    "PUSH.Ivow", "CWD", "PUSH.Ibow", "Jv.NBod", "Jv.Zod", "Jv.NZod", 
    "Jv.BEod", "Jv.NBEod", 
  };
  static const char *MATCH_name_page_238[] = {"XCHGeAXow", "TEST.eAX.Ivow", };
  static const char *MATCH_name_col_239[] = {
    "CBW", "Jv.NOod", "Jv.Bod", "Jv.NPod", "Jv.Lod", "Jv.NLod", "Jv.LEod", 
    "Jv.NLEod", 
  };
  static const char *MATCH_name_page_240[] = {"MOV.eAX.Ovow", "STOSvow", };
  static const char *MATCH_name_page_241[] = {"MOV.Ov.eAXow", "LODSvow", };
  static const char *MATCH_name_page_242[] = {"MOVSvow", "SCASvow", };
  static const char *MATCH_name_page_243[] = {"CMPSvow", "MOViw", };
  static const char *MATCH_name_page_310[] = {"REPNE.MOVSB", "JMP.Jvow", };
  static const char *MATCH_name_col_341[] = {
    "PUSH.Ivod", "CDQ", "PUSH.Ibod", "WAIT", "Jb.Z", "Jb.NZ", "PUSH.CS", 
    "CMPSvod", 
  };
  static const char *MATCH_name_col_426[] = {
    "Jb.S", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", 
    "XCHGeAXod", "XCHGeAXod", 
  };
  static const char *MATCH_name_col_427[] = {
    "CWDE", "TEST.eAX.Ivod", "Jb.P", "STOSvod", "MOVSB", "MOVSvod", 
    "PUSH.DS", "XLATB", 
  };
  static const char *MATCH_name_page_564[] = {
    "REPNE.MOVSvow", "REPNE.STOSvow", 
  };
  static const char *MATCH_name_page_565[] = {
    "REPNE.CMPSvow", "REPNE.LODSvow", 
  };
  static const char *MATCH_name_page_566[] = {
    "REP.MOVSvow", "REPNE.SCASvow", 
  };
  static const char *MATCH_name_page_567[] = {
    "REPNE.MOVSvod", "REPNE.STOSB", 
  };
  static const char *MATCH_name_page_568[] = {
    "REPNE.CMPSB", "REPNE.STOSvod", 
  };
  static const char *MATCH_name_page_569[] = {
    "REPNE.CMPSvod", "REPNE.LODSB", 
  };
  static const char *MATCH_name_page_570[] = {"REP.MOVSB", "REPNE.LODSvod", };
  static const char *MATCH_name_page_571[] = {"REP.MOVSvod", "REPNE.SCASB", };
  static const char *MATCH_name_page_572[] = {"REP.CMPSB", "REPNE.SCASvod", };
  static const char *MATCH_name_page_573[] = {"REP.CMPSvow", "REP.STOSvow", };
  static const char *MATCH_name_page_576[] = {"REP.CMPSvod", "REP.STOSB", };
  static const char *MATCH_name_page_577[] = {"CLTS", "REP.STOSvod", };
  static const char *MATCH_name_page_578[] = {"WRMSR", "REP.LODSB", };
  static const char *MATCH_name_page_579[] = {"RDMSR", "REP.LODSvod", };
  static const char *MATCH_name_page_580[] = {"PUSH.FS", "REP.SCASB", };
  static const char *MATCH_name_page_581[] = {"POP.FS", "REP.SCASvod", };
  static const char *MATCH_name_col_582[] = {
    "TEST.AL.Ib", "LEAVE", "STOSB", "RET.far", "ORiAL", "CMC", "Jb.LE", 
    "POP.DS", 
  };
  static const char *MATCH_name_col_637[] = {
    "ENTER", "JMP.Jvod", "RET.far.Iw", "JMP.Jb", "SBBiAL", "ORiEAX", "SAHF", 
    "DAS", 
  };
  static const char *MATCH_name_page_652[] = {"CPUID", "INVD", };
  static const char *MATCH_name_col_669[] = {"Jv.Ood", "Jv.NSod", "Jv.Pod", };
  static const char *MATCH_name_col_794[] = {
    "CALL.Jvod", "STC", "CLI", "STI", "SUBiAL", "SBBiEAX", "SCASB", "Jb.NLE", 
  };
  static const char *MATCH_name_col_807[] = {
    "CLC", NULL, NULL, NULL, "CMPiAL", "SUBiEAX", "INTO", "LAHF", 
  };
  static const char *MATCH_name_col_820[] = {
    NULL, NULL, NULL, NULL, "Jb.L", "CMPiEAX", NULL, "SCASvod", 
  };
  static const char *MATCH_name_row_821[] = {
    NULL, NULL, NULL, NULL, "DECod", "POPod", NULL, NULL, NULL, NULL, NULL, 
    "MOVid", 
  };
  static const char *MATCH_name_col_828[] = {
    NULL, NULL, NULL, NULL, "LODSB", "Jb.NL", NULL, "IRET", 
  };
  static const char *MATCH_name_col_846[] = {
    NULL, NULL, NULL, NULL, "CLD", "LODSvod", 
  };
  static const char *MATCH_name_r_m_878[] = {
    "FNOP", "FABS", "FLDL2E", "FLDPI", NULL, "FSTP.lsR32", "FSTP.lsR32", 
    "FSTP.lsR32", 
  };
  static const char *MATCH_name_r_m_879[] = {
    "FSTP.lsR32", "FSTP.lsR32", "FSTP.lsR32", "FSTP.lsR32", NULL, "FLDENV", 
    "FLDENV", "FLDENV", 
  };
  static const char *MATCH_name_r_m_881[] = {
    "FLDENV", "FLDENV", "FLDENV", "FLDENV", NULL, "FXAM", "FLDCW", "FLDCW", 
  };
  static const char *MATCH_name_r_m_883[] = {
    "FCHS", "FLDL2T", "FPTAN", "FPATAN", NULL, "FLDCW", "FLDCW", "FLDCW", 
  };
  static const char *MATCH_name_r_m_884[] = {
    "FLDCW", "FLDCW", "FLDCW", "FLDCW", NULL, "FLDLN2", "FLDZ", "FCOS", 
  };
  static const char *MATCH_name_r_m_886[] = {
    "FLD1", "FYL2X", "FSQRT", "FSINCOS", NULL, "FSTENV", "FSTENV", "FSTENV", 
  };
  static const char *MATCH_name_r_m_887[] = {
    "FSTENV", "FSTENV", "FSTENV", "FSTENV", NULL, "FPREM1", "FDECSTP", 
  };
  static const char *MATCH_name_r_m_889[] = {
    "F2XM1", "FYL2XP1", NULL, NULL, NULL, "FSTCW", "FSTCW", "FSTCW", 
  };
  static const char *MATCH_name_r_m_890[] = {
    "FSTCW", "FSTCW", "FSTCW", "FSTCW", NULL, "FSCALE", "FSIN", 
  };
  static const char *MATCH_name_r_m_892[] = {
    "FPREM", "FUCOMPP", NULL, NULL, NULL, "FIADD.I32", "FIADD.I32", 
    "FIADD.I32", 
  };
  static const char *MATCH_name_r_m_893[] = {
    "FIADD.I32", "FIADD.I32", "FIADD.I32", "FIADD.I32", NULL, "FIMUL.I32", 
    "FIMUL.I32", "FIMUL.I32", 
  };
  static const char *MATCH_name_r_m_895[] = {
    "FIMUL.I32", "FIMUL.I32", "FIMUL.I32", "FIMUL.I32", NULL, "FICOM.I32", 
    "FICOM.I32", "FICOM.I32", 
  };
  static const char *MATCH_name_r_m_897[] = {
    "FICOM.I32", "FICOM.I32", "FICOM.I32", "FICOM.I32", NULL, "FICOMP.I32", 
    "FICOMP.I32", "FICOMP.I32", 
  };
  static const char *MATCH_name_r_m_899[] = {
    "FICOMP.I32", "FICOMP.I32", "FICOMP.I32", "FICOMP.I32", NULL, 
    "FISUB.I32", "FISUB.I32", "FISUB.I32", 
  };
  static const char *MATCH_name_r_m_901[] = {
    "FISUB.I32", "FISUB.I32", "FISUB.I32", "FISUB.I32", NULL, "FISUBR.I32", 
    "FISUBR.I32", "FISUBR.I32", 
  };
  static const char *MATCH_name_r_m_903[] = {
    "FISUBR.I32", "FISUBR.I32", "FISUBR.I32", "FISUBR.I32", NULL, 
    "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", 
  };
  static const char *MATCH_name_r_m_905[] = {
    "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", NULL, "FIDIVR.I32", 
    "FIDIVR.I32", "FIDIVR.I32", 
  };
  static const char *MATCH_name_r_m_907[] = {
    "FIDIVR.I32", "FIDIVR.I32", "FIDIVR.I32", "FIDIVR.I32", NULL, 
    "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", 
  };
  static const char *MATCH_name_r_m_909[] = {
    "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", NULL, 
    "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", 
  };
  static const char *MATCH_name_r_m_911[] = {
    "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", NULL, 
    "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", 
  };
  static const char *MATCH_name_r_m_913[] = {
    "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", NULL, 
    "FLD80", "FLD80", "FLD80", 
  };
  static const char *MATCH_name_r_m_917[] = {
    "FLD80", "FLD80", "FLD80", "FLD80", NULL, "FSTP80", "FSTP80", "FSTP80", 
  };
  static const char *MATCH_name_r_m_921[] = {
    "FSTP80", "FSTP80", "FSTP80", "FSTP80", NULL, "FADD.R64", "FADD.R64", 
    "FADD.R64", 
  };
  static const char *MATCH_name_r_m_923[] = {
    "FADD.R64", "FADD.R64", "FADD.R64", "FADD.R64", NULL, "FMUL.R64", 
    "FMUL.R64", "FMUL.R64", 
  };
  static const char *MATCH_name_r_m_926[] = {
    "FMUL.R64", "FMUL.R64", "FMUL.R64", "FMUL.R64", NULL, "FCOM.R64", 
    "FCOM.R64", "FCOM.R64", 
  };
  static const char *MATCH_name_r_m_929[] = {
    "FCOM.R64", "FCOM.R64", "FCOM.R64", "FCOM.R64", NULL, "FCOMP.R64", 
    "FCOMP.R64", "FCOMP.R64", 
  };
  static const char *MATCH_name_r_m_931[] = {
    "FCOMP.R64", "FCOMP.R64", "FCOMP.R64", "FCOMP.R64", NULL, "FSUB.R64", 
    "FSUB.R64", "FSUB.R64", 
  };
  static const char *MATCH_name_r_m_933[] = {
    "FSUB.R64", "FSUB.R64", "FSUB.R64", "FSUB.R64", NULL, "FSUBR.R64", 
    "FSUBR.R64", "FSUBR.R64", 
  };
  static const char *MATCH_name_r_m_936[] = {
    "FSUBR.R64", "FSUBR.R64", "FSUBR.R64", "FSUBR.R64", NULL, "FDIV.R64", 
    "FDIV.R64", "FDIV.R64", 
  };
  static const char *MATCH_name_r_m_939[] = {
    "FDIV.R64", "FDIV.R64", "FDIV.R64", "FDIV.R64", NULL, "FDIVR.R64", 
    "FDIVR.R64", "FDIVR.R64", 
  };
  static const char *MATCH_name_r_m_942[] = {
    "FDIVR.R64", "FDIVR.R64", "FDIVR.R64", "FDIVR.R64", NULL, "FLD.lsR64", 
    "FLD.lsR64", "FLD.lsR64", 
  };
  static const char *MATCH_name_r_m_945[] = {
    "FLD.lsR64", "FLD.lsR64", "FLD.lsR64", "FLD.lsR64", NULL, "FST.lsR64", 
    "FST.lsR64", "FST.lsR64", 
  };
  static const char *MATCH_name_r_m_948[] = {
    "FST.lsR64", "FST.lsR64", "FST.lsR64", "FST.lsR64", NULL, "FSTP.lsR64", 
    "FSTP.lsR64", "FSTP.lsR64", 
  };
  static const char *MATCH_name_r_m_951[] = {
    "FSTP.lsR64", "FSTP.lsR64", "FSTP.lsR64", "FSTP.lsR64", NULL, "FRSTOR", 
    "FRSTOR", "FRSTOR", 
  };
  static const char *MATCH_name_r_m_954[] = {
    "FRSTOR", "FRSTOR", "FRSTOR", "FRSTOR", NULL, "FNSAVE", "FNSAVE", 
    "FNSAVE", 
  };
  static const char *MATCH_name_r_m_958[] = {
    "FNSAVE", "FNSAVE", "FNSAVE", "FNSAVE", NULL, "FSTSW", "FSTSW", "FSTSW", 
  };
  static const char *MATCH_name_r_m_960[] = {
    "FSTSW", "FSTSW", "FSTSW", "FSTSW", NULL, "FIADD.I16", "FIADD.I16", 
    "FIADD.I16", 
  };
  static const char *MATCH_name_r_m_962[] = {
    "FIADD.I16", "FIADD.I16", "FIADD.I16", "FIADD.I16", NULL, "FIMUL.I16", 
    "FIMUL.I16", "FIMUL.I16", 
  };
  static const char *MATCH_name_r_m_965[] = {
    "FIMUL.I16", "FIMUL.I16", "FIMUL.I16", "FIMUL.I16", NULL, "FICOM.I16", 
    "FICOM.I16", "FICOM.I16", 
  };
  static const char *MATCH_name_r_m_968[] = {
    "FICOM.I16", "FICOM.I16", "FICOM.I16", "FICOM.I16", NULL, "FICOMP.I16", 
    "FICOMP.I16", "FICOMP.I16", 
  };
  static const char *MATCH_name_r_m_970[] = {
    "FICOMP.I16", "FICOMP.I16", "FICOMP.I16", "FICOMP.I16", NULL, 
    "FISUB.I16", "FISUB.I16", "FISUB.I16", 
  };
  static const char *MATCH_name_r_m_972[] = {
    "FSTSW.AX", "FCOMPP", NULL, NULL, NULL, "FISUBR.I16", "FISUBR.I16", 
    "FISUBR.I16", 
  };
  static const char *MATCH_name_r_m_973[] = {
    "FISUB.I16", "FISUB.I16", "FISUB.I16", "FISUB.I16", NULL, "FIDIV.I16", 
    "FIDIV.I16", "FIDIV.I16", 
  };
  static const char *MATCH_name_r_m_976[] = {
    "FISUBR.I16", "FISUBR.I16", "FISUBR.I16", "FISUBR.I16", NULL, 
    "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", 
  };
  static const char *MATCH_name_r_m_979[] = {
    "FIDIV.I16", "FIDIV.I16", "FIDIV.I16", "FIDIV.I16", NULL, "FILD.lsI16", 
    "FILD.lsI16", "FILD.lsI16", 
  };
  static const char *MATCH_name_r_m_982[] = {
    "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", NULL, 
    "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", 
  };
  static const char *MATCH_name_r_m_985[] = {
    "FILD.lsI16", "FILD.lsI16", "FILD.lsI16", "FILD.lsI16", NULL, 
    "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", 
  };
  static const char *MATCH_name_r_m_987[] = {
    "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", NULL, "FBLD", 
    "FBLD", "FBLD", 
  };
  static const char *MATCH_name_r_m_989[] = {
    "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", NULL, 
    "FILD64", "FILD64", "FILD64", 
  };
  static const char *MATCH_name_r_m_991[] = {
    "FBLD", "FBLD", "FBLD", "FBLD", NULL, "FBSTP", "FBSTP", "FBSTP", 
  };
  static const char *MATCH_name_r_m_993[] = {
    "FILD64", "FILD64", "FILD64", "FILD64", NULL, "FISTP64", "FISTP64", 
    "FISTP64", 
  };
  static const char *MATCH_name_r_m_996[] = {
    "FBSTP", "FBSTP", "FBSTP", "FBSTP", NULL, "INC.Eb", "INC.Eb", "INC.Eb", 
  };
  static const char *MATCH_name_r_m_999[] = {
    "FISTP64", "FISTP64", "FISTP64", "FISTP64", NULL, "DEC.Eb", "DEC.Eb", 
    "DEC.Eb", 
  };
  static const char *MATCH_name_r_m_1002[] = {
    "INC.Eb", "INC.Eb", "INC.Eb", "INC.Eb", NULL, "INC.Evod", "INC.Evod", 
    "INC.Evod", 
  };
  static const char *MATCH_name_r_m_1005[] = {
    "DEC.Eb", "DEC.Eb", "DEC.Eb", "DEC.Eb", NULL, "DEC.Evod", "DEC.Evod", 
    "DEC.Evod", 
  };
  static const char *MATCH_name_r_m_1008[] = {
    "INC.Evod", "INC.Evod", "INC.Evod", "INC.Evod", NULL, "CALL.Evod", 
    "CALL.Evod", "CALL.Evod", 
  };
  static const char *MATCH_name_r_m_1011[] = {
    "DEC.Evod", "DEC.Evod", "DEC.Evod", "DEC.Evod", NULL, "PUSH.Evod", 
    "PUSH.Evod", "PUSH.Evod", 
  };
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned /* [0..65535] */ MATCH_w_16_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned /* [0..65535] */ MATCH_w_16_16;
  unsigned MATCH_w_32_16;
  unsigned /* [0..255] */ MATCH_w_8_24;
  unsigned /* [0..65535] */ MATCH_w_16_24;
  unsigned MATCH_w_32_24;
  unsigned /* [0..255] */ MATCH_w_8_32;
  unsigned /* [0..65535] */ MATCH_w_16_32;
  unsigned MATCH_w_32_32;
  unsigned /* [0..255] */ MATCH_w_8_40;
  unsigned /* [0..65535] */ MATCH_w_16_40;
  unsigned /* [0..255] */ MATCH_w_8_48;
  unsigned MATCH_w_32_48;
  unsigned /* [0..255] */ MATCH_w_8_56;
  unsigned /* [0..65535] */ MATCH_w_16_56;
  unsigned MATCH_w_32_56;
  unsigned /* [0..255] */ MATCH_w_8_64;
  unsigned /* [0..65535] */ MATCH_w_16_64;
  unsigned /* [0..255] */ MATCH_w_8_72;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 3 & 0x1) /* page at 0 */ == 1) 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORmrb"; 
                              goto MATCH_label_c786; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORmrb"; 
                                goto MATCH_label_c788; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORmrb"; 
                                goto MATCH_label_c787; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORmrb"; 
                              goto MATCH_label_c789; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 578 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c787; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c788; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c789; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORmrb"; goto MATCH_label_c786; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORmrod"; 
                              goto MATCH_label_c790; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORmrod"; 
                                goto MATCH_label_c792; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORmrod"; 
                                goto MATCH_label_c791; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORmrod"; 
                              goto MATCH_label_c793; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 672 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c791; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c792; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c793; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORmrod"; goto MATCH_label_c790; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORrmb"; 
                              goto MATCH_label_c794; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORrmb"; 
                                goto MATCH_label_c796; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORrmb"; 
                                goto MATCH_label_c795; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORrmb"; 
                              goto MATCH_label_c797; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 766 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c795; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c796; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c797; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORrmb"; goto MATCH_label_c794; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORrmod"; 
                              goto MATCH_label_c798; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORrmod"; 
                                goto MATCH_label_c800; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORrmod"; 
                                goto MATCH_label_c799; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORrmod"; 
                              goto MATCH_label_c801; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 860 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c799; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c800; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c801; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORrmod"; goto MATCH_label_c798; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 911 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 931 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 807 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 949 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_652[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1088 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 977 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SLDT"; 
                                                  goto MATCH_label_c802; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SLDT"; 
                                                    goto MATCH_label_c804; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SLDT"; 
                                                    goto MATCH_label_c803; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SLDT"; 
                                                  goto MATCH_label_c805; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SLDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1052 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c803; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c804; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c805; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SLDT"; 
                                            goto MATCH_label_c802; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "STR"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1118 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "STR"; 
                                                    goto MATCH_label_c807; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "STR"; 
                                                    goto MATCH_label_c806; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "STR"; 
                                                  goto MATCH_label_c808; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "STR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1174 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c806; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c807; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c808; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 6: case 7: 
                                      goto MATCH_label_c64; break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "LTR"; 
                                                  goto MATCH_label_c809; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "LTR"; 
                                                    goto MATCH_label_c811; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "LTR"; 
                                                    goto MATCH_label_c810; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "LTR"; 
                                                  goto MATCH_label_c812; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LTR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 1030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1279 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c810; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c811; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c812; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "LTR"; 
                                            goto MATCH_label_c809; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "VERR"; 
                                                  goto MATCH_label_c813; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "VERR"; 
                                                    goto MATCH_label_c815; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "VERR"; 
                                                    goto MATCH_label_c814; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "VERR"; 
                                                  goto MATCH_label_c816; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 371 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1385 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c814; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c815; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c816; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "VERR"; 
                                            goto MATCH_label_c813; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "VERW"; 
                                                  goto MATCH_label_c817; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "VERW"; 
                                                    goto MATCH_label_c819; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "VERW"; 
                                                    goto MATCH_label_c818; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "VERW"; 
                                                  goto MATCH_label_c820; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERW"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 368 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1491 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c818; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c819; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c820; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "VERW"; 
                                            goto MATCH_label_c817; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "WBINVD"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 362 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 1552 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SGDT"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 1588 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SGDT"; 
                                                    goto MATCH_label_c822; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SGDT"; 
                                                    goto MATCH_label_c821; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SGDT"; 
                                                  goto MATCH_label_c823; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SGDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 1645 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c821; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c822; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c823; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SIDT"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1708 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SIDT"; 
                                                    goto MATCH_label_c825; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SIDT"; 
                                                    goto MATCH_label_c824; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SIDT"; 
                                                  goto MATCH_label_c826; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SIDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1764 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c824; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c825; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c826; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 3: case 5: case 6: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SMSW"; 
                                                  goto MATCH_label_c827; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SMSW"; 
                                                    goto MATCH_label_c829; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SMSW"; 
                                                    goto MATCH_label_c828; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SMSW"; 
                                                  goto MATCH_label_c830; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SMSW"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1869 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c828; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c829; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c830; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SMSW"; 
                                            goto MATCH_label_c827; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "INVLPG"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 1085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1935 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "INVLPG"; 
                                                    goto MATCH_label_c832; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "INVLPG"; 
                                                    goto MATCH_label_c831; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "INVLPG"; 
                                                  goto MATCH_label_c833; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "INVLPG"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 1085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1991 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c831; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c832; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c833; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LARod"; 
                                            goto MATCH_label_c834; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LARod"; 
                                              goto MATCH_label_c836; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LARod"; 
                                              goto MATCH_label_c835; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LARod"; 
                                            goto MATCH_label_c837; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LARod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 2107 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c835; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c836; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c837; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "LARod"; 
                                      goto MATCH_label_c834; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LSLod"; 
                                            goto MATCH_label_c838; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LSLod"; 
                                              goto MATCH_label_c840; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LSLod"; 
                                              goto MATCH_label_c839; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LSLod"; 
                                            goto MATCH_label_c841; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 2221 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c839; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c840; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c841; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "LSLod"; 
                                      goto MATCH_label_c838; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: case 5: case 7: 
                              goto MATCH_label_c64; break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_577[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1249 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2281 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: case 2: case 4: case 5: case 6: case 7: 
                      case 13: case 14: case 15: 
                        goto MATCH_label_c64; break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_578[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 359 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2315 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 1: case 3: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_579[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2342 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 8: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = "Jv.Sod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 243 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 2373 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_669[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 241 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 2395 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_669[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 239 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 2417 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 237 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 2439 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 235 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 2461 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 233 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 2483 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 231 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 2505 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 229 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 2527 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_669[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 259 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);


#line 2555 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 257 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 2577 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 255 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 2599 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 253 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 2621 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 251 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 2643 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 249 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 2665 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 247 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 2687 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 245 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 2709 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c866; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c868; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c867; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c869; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 283 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 2786 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c867; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c868; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c869; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.S"; 
                                      goto MATCH_label_c866; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c870; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c872; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c871; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c873; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 280 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 2892 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c871; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c872; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c873; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NS"; 
                                      goto MATCH_label_c870; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: 
                                goto MATCH_label_c64; break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c874; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c876; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c875; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c877; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 271 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 3006 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c875; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c876; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c877; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.L"; 
                                      goto MATCH_label_c874; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c878; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c880; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c879; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c881; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 268 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 3112 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c879; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c880; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c881; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NL"; 
                                      goto MATCH_label_c878; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c882; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c884; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c883; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c885; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 265 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 3218 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c883; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c884; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c885; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.LE"; 
                                      goto MATCH_label_c882; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c886; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c888; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c887; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c889; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 262 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 3324 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c887; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c888; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c889; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NLE"; 
                                      goto MATCH_label_c886; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c842; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c844; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c843; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c845; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 301 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 3444 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c843; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c844; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c845; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.B"; 
                                      goto MATCH_label_c842; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c846; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c848; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c847; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c849; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 298 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 3550 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c847; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c848; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c849; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NB"; 
                                      goto MATCH_label_c846; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c850; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c852; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c851; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c853; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 295 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 3656 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c851; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c852; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c853; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.Z"; 
                                      goto MATCH_label_c850; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c854; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c856; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c855; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c857; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 292 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 3762 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c855; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c856; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c857; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NZ"; 
                                      goto MATCH_label_c854; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c858; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c860; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c859; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c861; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 289 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 3868 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c859; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c860; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c861; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.BE"; 
                                      goto MATCH_label_c858; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c862; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c864; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c863; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c865; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 286 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 3974 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c863; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c864; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c865; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NBE"; 
                                      goto MATCH_label_c862; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "PUSH.GS"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 792 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4035 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_580[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4054 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "POP.GS"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 846 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4075 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_581[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4094 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "RSM"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 471 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4115 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_652[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1222 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4134 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTSod"; 
                                            goto MATCH_label_c894; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTSod"; 
                                              goto MATCH_label_c896; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTSod"; 
                                              goto MATCH_label_c895; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTSod"; 
                                            goto MATCH_label_c897; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTSod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4211 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c895; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c896; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c897; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTSod"; 
                                      goto MATCH_label_c894; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTod"; 
                                            goto MATCH_label_c890; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTod"; 
                                              goto MATCH_label_c892; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTod"; 
                                              goto MATCH_label_c891; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTod"; 
                                            goto MATCH_label_c893; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4320 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c891; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c892; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c893; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTod"; 
                                      goto MATCH_label_c890; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHRD.Ibod"; 
                                            goto MATCH_label_c902; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHRD.Ibod"; 
                                              goto MATCH_label_c904; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHRD.Ibod"; 
                                              goto MATCH_label_c903; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "SHRD.Ibod"; 
                                            goto MATCH_label_c905; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 4444 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c903; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c904; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c905; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRD.Ibod"; 
                                      goto MATCH_label_c902; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHLD.Ibod"; 
                                            goto MATCH_label_c898; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHLD.Ibod"; 
                                              goto MATCH_label_c900; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHLD.Ibod"; 
                                              goto MATCH_label_c899; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "SHLD.Ibod"; 
                                            goto MATCH_label_c901; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 4569 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c899; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c900; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c901; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLD.Ibod"; 
                                      goto MATCH_label_c898; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SHRD.CLod"; 
                                            goto MATCH_label_c910; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRD.CLod"; 
                                              goto MATCH_label_c912; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRD.CLod"; 
                                              goto MATCH_label_c911; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SHRD.CLod"; 
                                            goto MATCH_label_c913; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHRD.CLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4685 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c911; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c912; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c913; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SHRD.CLod"; 
                                      goto MATCH_label_c910; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SHLD.CLod"; 
                                            goto MATCH_label_c906; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLD.CLod"; 
                                              goto MATCH_label_c908; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLD.CLod"; 
                                              goto MATCH_label_c907; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SHLD.CLod"; 
                                            goto MATCH_label_c909; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHLD.CLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4794 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c907; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c908; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c909; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SHLD.CLod"; 
                                      goto MATCH_label_c906; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 6: 
                              goto MATCH_label_c64; break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "IMULrmod"; 
                                            goto MATCH_label_c914; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "IMULrmod"; 
                                              goto MATCH_label_c916; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "IMULrmod"; 
                                              goto MATCH_label_c915; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "IMULrmod"; 
                                            goto MATCH_label_c917; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "IMULrmod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1156 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 4908 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c915; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c916; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c917; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "IMULrmod"; 
                                      goto MATCH_label_c914; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: case 1: case 2: case 3: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTiod"; 
                                                  goto MATCH_label_c947; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTiod"; 
                                                    goto MATCH_label_c949; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTiod"; 
                                                    goto MATCH_label_c948; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTiod"; 
                                                  goto MATCH_label_c950; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5048 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c948; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c949; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c950; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTiod"; 
                                            goto MATCH_label_c947; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTSiod"; 
                                                  goto MATCH_label_c951; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTSiod"; 
                                                    goto MATCH_label_c953; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTSiod"; 
                                                    goto MATCH_label_c952; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTSiod"; 
                                                  goto MATCH_label_c954; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1289 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 5177 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c952; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c953; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c954; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTSiod"; 
                                            goto MATCH_label_c951; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTRiod"; 
                                                  goto MATCH_label_c955; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTRiod"; 
                                                    goto MATCH_label_c957; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTRiod"; 
                                                    goto MATCH_label_c956; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTRiod"; 
                                                  goto MATCH_label_c958; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5306 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c956; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c957; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c958; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTRiod"; 
                                            goto MATCH_label_c955; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTCiod"; 
                                                  goto MATCH_label_c959; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTCiod"; 
                                                    goto MATCH_label_c961; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTCiod"; 
                                                    goto MATCH_label_c960; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTCiod"; 
                                                  goto MATCH_label_c962; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5435 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c960; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c961; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c962; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTCiod"; 
                                            goto MATCH_label_c959; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTCod"; 
                                            goto MATCH_label_c963; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTCod"; 
                                              goto MATCH_label_c965; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTCod"; 
                                              goto MATCH_label_c964; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTCod"; 
                                            goto MATCH_label_c966; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTCod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 5557 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c964; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c965; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c966; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTCod"; 
                                      goto MATCH_label_c963; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c967; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c969;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c968;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c970; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1350 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 5653 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c968;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c969;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c970;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c967; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c971; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c973;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c972;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c974; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1340 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 5735 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c972;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c973;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c974;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c971; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVSX.Gv.Ebod"; 
                                            goto MATCH_label_c975; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVSX.Gv.Ebod"; 
                                              goto MATCH_label_c977; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVSX.Gv.Ebod"; 
                                              goto MATCH_label_c976; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVSX.Gv.Ebod"; 
                                            goto MATCH_label_c978; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 939 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 5830 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c976; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c977; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c978; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVSX.Gv.Ebod"; 
                                      goto MATCH_label_c975; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVSX.Gv.Ew"; 
                                            goto MATCH_label_c979; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVSX.Gv.Ew"; 
                                              goto MATCH_label_c981; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVSX.Gv.Ew"; 
                                              goto MATCH_label_c980; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVSX.Gv.Ew"; 
                                            goto MATCH_label_c982; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 936 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 5939 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c980; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c981; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c982; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVSX.Gv.Ew"; 
                                      goto MATCH_label_c979; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPXCHG.Eb.Gb"; 
                                            goto MATCH_label_c918; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPXCHG.Eb.Gb"; 
                                              goto MATCH_label_c920; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPXCHG.Eb.Gb"; 
                                              goto MATCH_label_c919; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPXCHG.Eb.Gb"; 
                                            goto MATCH_label_c921; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1234 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 6053 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c919; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c920; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c921; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPXCHG.Eb.Gb"; 
                                      goto MATCH_label_c918; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                            goto MATCH_label_c922; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                              goto MATCH_label_c924; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                              goto MATCH_label_c923; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                            goto MATCH_label_c925; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1228 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 6162 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c923; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c924; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c925; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                      goto MATCH_label_c922; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LSS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6230 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LSS"; 
                                              goto MATCH_label_c927; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LSS"; 
                                              goto MATCH_label_c926; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LSS"; 
                                            goto MATCH_label_c928; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6288 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c926; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c927; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c928; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTRod"; 
                                            goto MATCH_label_c929; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTRod"; 
                                              goto MATCH_label_c931; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTRod"; 
                                              goto MATCH_label_c930; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTRod"; 
                                            goto MATCH_label_c932; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTRod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 6394 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c930; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c931; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c932; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTRod"; 
                                      goto MATCH_label_c929; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LFS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6462 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LFS"; 
                                              goto MATCH_label_c934; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LFS"; 
                                              goto MATCH_label_c933; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LFS"; 
                                            goto MATCH_label_c935; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LFS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6520 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c933; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c934; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c935; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LGS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6585 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LGS"; 
                                              goto MATCH_label_c937; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LGS"; 
                                              goto MATCH_label_c936; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LGS"; 
                                            goto MATCH_label_c938; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LGS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6643 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c936; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c937; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c938; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVZX.Gv.Ebod"; 
                                            goto MATCH_label_c939; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVZX.Gv.Ebod"; 
                                              goto MATCH_label_c941; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVZX.Gv.Ebod"; 
                                              goto MATCH_label_c940; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVZX.Gv.Ebod"; 
                                            goto MATCH_label_c942; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 930 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 6749 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c940; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c941; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c942; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVZX.Gv.Ebod"; 
                                      goto MATCH_label_c939; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVZX.Gv.Ew"; 
                                            goto MATCH_label_c943; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVZX.Gv.Ew"; 
                                              goto MATCH_label_c945; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVZX.Gv.Ew"; 
                                              goto MATCH_label_c944; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVZX.Gv.Ew"; 
                                            goto MATCH_label_c946; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 927 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 6858 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c944; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c945; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c946; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVZX.Gv.Ew"; 
                                      goto MATCH_label_c943; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 12: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = "BSWAP"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 6916 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XADD.Eb.Gb"; 
                                            goto MATCH_label_c983; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XADD.Eb.Gb"; 
                                              goto MATCH_label_c985; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XADD.Eb.Gb"; 
                                              goto MATCH_label_c984; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XADD.Eb.Gb"; 
                                            goto MATCH_label_c986; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 356 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 6992 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c984; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c985; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c986; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XADD.Eb.Gb"; 
                                      goto MATCH_label_c983; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XADD.Ev.Gvod"; 
                                            goto MATCH_label_c987; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XADD.Ev.Gvod"; 
                                              goto MATCH_label_c989; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XADD.Ev.Gvod"; 
                                              goto MATCH_label_c988; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XADD.Ev.Gvod"; 
                                            goto MATCH_label_c990; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 350 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7101 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c988; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c989; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c990; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XADD.Ev.Gvod"; 
                                      goto MATCH_label_c987; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: 
                                goto MATCH_label_c64; break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 1) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "CMPXCHG8B"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 3 + MATCH_p; 
                                                
#line 1225 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 7170 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "CMPXCHG8B"; 
                                                goto MATCH_label_c992; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "CMPXCHG8B"; 
                                                goto MATCH_label_c991; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "CMPXCHG8B"; 
                                              goto MATCH_label_c993; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Mem = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1225 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 7225 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c991; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c992; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c993; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c64; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBmrb"; 
                              goto MATCH_label_c994; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBmrb"; 
                                goto MATCH_label_c996; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBmrb"; 
                                goto MATCH_label_c995; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBmrb"; 
                              goto MATCH_label_c997; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 7337 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c995; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c996; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c997; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBmrb"; goto MATCH_label_c994; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBmrod"; 
                              goto MATCH_label_c998; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBmrod"; 
                                goto MATCH_label_c1000; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBmrod"; 
                                goto MATCH_label_c999; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBmrod"; 
                              goto MATCH_label_c1001; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7431 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c999; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c1000; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c1001; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBmrod"; goto MATCH_label_c998; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBrmb"; 
                              goto MATCH_label_c1002; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBrmb"; 
                                goto MATCH_label_c1004; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBrmb"; 
                                goto MATCH_label_c1003; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBrmb"; 
                              goto MATCH_label_c1005; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 7525 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1003; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1004; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1005; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBrmb"; goto MATCH_label_c1002; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBrmod"; 
                              goto MATCH_label_c1006; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBrmod"; 
                                goto MATCH_label_c1008; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBrmod"; 
                                goto MATCH_label_c1007; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBrmod"; 
                              goto MATCH_label_c1009; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 7619 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1007; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1008; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1009; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBrmod"; goto MATCH_label_c1006; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 7670 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 7690 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 801 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 7708 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 7726 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBmrb"; 
                              goto MATCH_label_c1010; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBmrb"; 
                                goto MATCH_label_c1012; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBmrb"; 
                                goto MATCH_label_c1011; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBmrb"; 
                              goto MATCH_label_c1013; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 7796 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1011; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1012; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1013; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBmrb"; goto MATCH_label_c1010; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBmrod"; 
                              goto MATCH_label_c1014; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBmrod"; 
                                goto MATCH_label_c1016; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBmrod"; 
                                goto MATCH_label_c1015; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBmrod"; 
                              goto MATCH_label_c1017; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1467 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7890 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1015; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1016; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1017; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBmrod"; goto MATCH_label_c1014; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBrmb"; 
                              goto MATCH_label_c1018; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBrmb"; 
                                goto MATCH_label_c1020; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBrmb"; 
                                goto MATCH_label_c1019; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBrmb"; 
                              goto MATCH_label_c1021; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 7984 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1019; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1020; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1021; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBrmb"; goto MATCH_label_c1018; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBrmod"; 
                              goto MATCH_label_c1022; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBrmod"; 
                                goto MATCH_label_c1024; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBrmod"; 
                                goto MATCH_label_c1023; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBrmod"; 
                              goto MATCH_label_c1025; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 8078 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1023; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1024; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1025; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBrmod"; goto MATCH_label_c1022; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8129 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_807[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 8149 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 326 "machine/pentium/decoder.m"
  // For now, treat seg.cs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 8163 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1210 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 8180 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPmrb"; 
                              goto MATCH_label_c1026; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPmrb"; 
                                goto MATCH_label_c1028; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPmrb"; 
                                goto MATCH_label_c1027; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPmrb"; 
                              goto MATCH_label_c1029; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 8250 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1027; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1028; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1029; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPmrb"; goto MATCH_label_c1026; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPmrod"; 
                              goto MATCH_label_c1030; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPmrod"; 
                                goto MATCH_label_c1032; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPmrod"; 
                                goto MATCH_label_c1031; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPmrod"; 
                              goto MATCH_label_c1033; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 8344 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1031; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1032; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1033; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPmrod"; goto MATCH_label_c1030; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPrmb"; 
                              goto MATCH_label_c1034; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPrmb"; 
                                goto MATCH_label_c1036; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPrmb"; 
                                goto MATCH_label_c1035; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPrmb"; 
                              goto MATCH_label_c1037; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 8438 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1035; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1036; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1037; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPrmb"; goto MATCH_label_c1034; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPrmod"; 
                              goto MATCH_label_c1038; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPrmod"; 
                                goto MATCH_label_c1040; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPrmod"; 
                                goto MATCH_label_c1039; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPrmod"; 
                              goto MATCH_label_c1041; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 8532 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1039; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1040; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1041; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPrmod"; goto MATCH_label_c1038; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_807[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8583 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_820[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 8603 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 329 "machine/pentium/decoder.m"
  // For now, treat seg.ds as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 8617 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            MATCH_name = 
              MATCH_name_row_821[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1195 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 8640 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            MATCH_name = 
              MATCH_name_row_821[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 8659 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 810 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 8682 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "IMUL.Ivd"; 
                              goto MATCH_label_c1042; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "IMUL.Ivd"; 
                                goto MATCH_label_c1044; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "IMUL.Ivd"; 
                                goto MATCH_label_c1043; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                              MATCH_name = "IMUL.Ivd"; 
                              goto MATCH_label_c1045; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 8 + MATCH_p; 
                            
#line 1144 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I32);


#line 8752 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1043; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1044; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1045; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                        MATCH_name = "IMUL.Ivd"; 
                        goto MATCH_label_c1042; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8810 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "IMUL.Ibod"; 
                              goto MATCH_label_c1046; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "IMUL.Ibod"; 
                                goto MATCH_label_c1048; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "IMUL.Ibod"; 
                                goto MATCH_label_c1047; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                              MATCH_name = "IMUL.Ibod"; 
                              goto MATCH_label_c1049; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            int /* [~128..127] */ i8 = 
                              sign_extend(
                                          (MATCH_w_8_32 & 0xff) 
                                                /* i8 at 32 */, 8);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 5 + MATCH_p; 
                            
#line 1150 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 8883 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1047; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1048; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1049; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        MATCH_name = "IMUL.Ibod"; 
                        goto MATCH_label_c1046; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_426[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 171 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 8949 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 169 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 8970 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 167 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 8991 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 165 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 9012 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_820[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 163 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 9033 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_828[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 161 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 9054 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 159 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 9075 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 157 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 9096 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVmrb"; 
                              goto MATCH_label_c1050; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVmrb"; 
                                goto MATCH_label_c1052; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVmrb"; 
                                goto MATCH_label_c1051; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVmrb"; 
                              goto MATCH_label_c1053; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 9166 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1051; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1052; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1053; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVmrb"; goto MATCH_label_c1050; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVmrod"; 
                              goto MATCH_label_c1054; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVmrod"; 
                                goto MATCH_label_c1056; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVmrod"; 
                                goto MATCH_label_c1055; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVmrod"; 
                              goto MATCH_label_c1057; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 9260 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1055; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1056; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1057; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVmrod"; goto MATCH_label_c1054; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVrmb"; 
                              goto MATCH_label_c1058; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVrmb"; 
                                goto MATCH_label_c1060; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVrmb"; 
                                goto MATCH_label_c1059; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVrmb"; 
                              goto MATCH_label_c1061; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 9354 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1059; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1060; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1061; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVrmb"; goto MATCH_label_c1058; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVrmod"; 
                              goto MATCH_label_c1062; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVrmod"; 
                                goto MATCH_label_c1064; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVrmod"; 
                                goto MATCH_label_c1063; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVrmod"; 
                              goto MATCH_label_c1065; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 9448 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1063; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1064; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1065; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVrmod"; goto MATCH_label_c1062; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 6: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LEAod"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 9508 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LEAod"; 
                                goto MATCH_label_c1067; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LEAod"; 
                                goto MATCH_label_c1066; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LEAod"; 
                              goto MATCH_label_c1068; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LEAod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 9560 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1066; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1067; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1068; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_name = "POP.Evod"; 
                                goto MATCH_label_c1069; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_name = "POP.Evod"; 
                                  goto MATCH_label_c1071; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_name = "POP.Evod"; 
                                  goto MATCH_label_c1070; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_name = "POP.Evod"; 
                                goto MATCH_label_c1072; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_name = "POP.Evod"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              nextPC = 4 + MATCH_p; 
                              
#line 867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 9654 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1070; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1071; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1072; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_name = "POP.Evod"; 
                          goto MATCH_label_c1069; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1261 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9714 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1216 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9732 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  nextPC = 7 + MATCH_p; 
                  
#line 1269 "machine/pentium/decoder.m"

	//| CALL.aPod(seg, off) =>
		result.rtl = instantiate(pc, "NOP");


#line 9747 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 365 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9764 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: case 5: 
                  goto MATCH_label_c64; break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 468 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9784 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_807[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1078 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

	/* Branches have been handled in decodeInstruction() now */

#line 9803 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i8 = (MATCH_w_8_8 & 0xff) /* i8 at 8 */;
                    nextPC = 2 + MATCH_p; 
                    
#line 398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 9829 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 9849 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9867 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9885 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_828[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

	/* Floating point instructions */

#line 9904 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_846[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9922 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 465 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9940 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_820[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9958 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            MATCH_name = 
              MATCH_name_row_821[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 5 + MATCH_p; 
              
#line 979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_I32);


#line 9982 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
                    nextPC = 4 + MATCH_p; 
                    
#line 1183 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16, DIS_I8);


#line 10008 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10026 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 474 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 10047 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);
		result.rtl->appendStmt(new ReturnStatement);


#line 10066 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = "INT.Ib"; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1094 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);

// Removing because an invalid instruction is better than trying to
// instantiate this. -trent
//	| INT3() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSB() [name] =>
//		result.rtl = instantiate(pc, name);


#line 10102 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_807[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1091 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10120 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_828[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1082 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10138 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FADD.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1738 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10174 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FADD.R32"; 
                                      goto MATCH_label_c1074; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FADD.R32"; 
                                      goto MATCH_label_c1073; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FADD.R32"; 
                                    goto MATCH_label_c1075; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FADD.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1738 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10225 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1073; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1074; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1075; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FADD.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1744 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10269 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FMUL.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1932 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10298 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FMUL.R32"; 
                                      goto MATCH_label_c1077; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FMUL.R32"; 
                                      goto MATCH_label_c1076; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FMUL.R32"; 
                                    goto MATCH_label_c1078; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FMUL.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1932 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10349 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1076; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1077; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1078; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FMUL.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1938 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10393 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FCOM.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1771 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10422 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOM.R32"; 
                                      goto MATCH_label_c1080; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOM.R32"; 
                                      goto MATCH_label_c1079; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FCOM.R32"; 
                                    goto MATCH_label_c1081; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOM.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1771 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10473 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1079; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1080; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1081; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOM.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1789 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10517 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FCOMP.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1783 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10546 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOMP.R32"; 
                                      goto MATCH_label_c1083; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOMP.R32"; 
                                      goto MATCH_label_c1082; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FCOMP.R32"; 
                                    goto MATCH_label_c1084; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOMP.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1783 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10597 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1082; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1083; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1084; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOMP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1792 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10641 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FSUB.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10670 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUB.R32"; 
                                      goto MATCH_label_c1086; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUB.R32"; 
                                      goto MATCH_label_c1085; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FSUB.R32"; 
                                    goto MATCH_label_c1087; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUB.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 2022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10721 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1085; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1086; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1087; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FSUB.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10765 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FSUBR.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10794 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUBR.R32"; 
                                      goto MATCH_label_c1089; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUBR.R32"; 
                                      goto MATCH_label_c1088; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FSUBR.R32"; 
                                    goto MATCH_label_c1090; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUBR.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 2043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10845 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1088; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1089; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1090; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FSUBR.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10889 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FDIV.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10918 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIV.R32"; 
                                      goto MATCH_label_c1092; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIV.R32"; 
                                      goto MATCH_label_c1091; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FDIV.R32"; 
                                    goto MATCH_label_c1093; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIV.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10969 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1091; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1092; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1093; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FDIV.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1822 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11013 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FDIVR.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1837 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11042 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIVR.R32"; 
                                      goto MATCH_label_c1095; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIVR.R32"; 
                                      goto MATCH_label_c1094; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FDIVR.R32"; 
                                    goto MATCH_label_c1096; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIVR.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1837 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11093 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1094; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1095; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1096; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FDIVR.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1843 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11137 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FLD.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1888 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11174 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD.lsR32"; 
                                      goto MATCH_label_c1098; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD.lsR32"; 
                                      goto MATCH_label_c1097; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FLD.lsR32"; 
                                    goto MATCH_label_c1099; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FLD.lsR32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1888 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11225 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1097; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1098; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1099; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FLD.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1902 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDXP1);


#line 11269 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FXCH"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 2085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11291 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FST.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11321 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FST.lsR32"; 
                                      goto MATCH_label_c1101; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FST.lsR32"; 
                                      goto MATCH_label_c1100; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FST.lsR32"; 
                                    goto MATCH_label_c1102; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FST.lsR32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11372 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1100; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1101; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1102; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11417 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1103; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP.lsR32"; 
                                      goto MATCH_label_c1105; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP.lsR32"; 
                                      goto MATCH_label_c1104; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1103; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1104; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11502 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1104; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR32"; 
                                    goto MATCH_label_c1105; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_881[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1107; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLDENV"; 
                                      goto MATCH_label_c1109; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLDENV"; 
                                      goto MATCH_label_c1108; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1107; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_881[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1108; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDENV"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1929 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 11619 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1108; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_881[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDENV"; 
                                    goto MATCH_label_c1109; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1765 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11676 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1735 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11695 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: case 3: case 6: case 7: 
                                    goto MATCH_label_c64; break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2064 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11716 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_881[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2082 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11735 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1111; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLDCW"; 
                                      goto MATCH_label_c1113; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLDCW"; 
                                      goto MATCH_label_c1112; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_881[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1111; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1112; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDCW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1926 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 11819 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1112; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDCW"; 
                                    goto MATCH_label_c1113; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1905 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11876 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1908 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11895 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1911 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11914 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_878[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1914 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11933 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1917 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11952 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1920 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11971 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1923 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11990 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1115; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTENV"; 
                                      goto MATCH_label_c1117; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTENV"; 
                                      goto MATCH_label_c1116; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1115; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1116; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTENV"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 12075 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1116; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTENV"; 
                                    goto MATCH_label_c1117; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1732 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12132 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2091 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12151 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1965 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12170 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_883[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12189 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2088 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12208 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1962 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12227 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1813 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12246 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1119; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTCW"; 
                                      goto MATCH_label_c1121; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTCW"; 
                                      goto MATCH_label_c1120; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1119; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1120; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTCW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 12332 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1120; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTCW"; 
                                    goto MATCH_label_c1121; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1959 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12389 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_889[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2094 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12408 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1986 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12427 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_886[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1983 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12446 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1968 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12465 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12484 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12503 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1810 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12522 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1123; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIADD.I32"; 
                                      goto MATCH_label_c1125; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIADD.I32"; 
                                      goto MATCH_label_c1124; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1123; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1124; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1753 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12614 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1124; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I32"; 
                                    goto MATCH_label_c1125; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1127; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIMUL.I32"; 
                                      goto MATCH_label_c1129; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIMUL.I32"; 
                                      goto MATCH_label_c1128; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1127; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1128; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1947 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12732 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1128; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I32"; 
                                    goto MATCH_label_c1129; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1131; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOM.I32"; 
                                      goto MATCH_label_c1133; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOM.I32"; 
                                      goto MATCH_label_c1132; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1131; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1132; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1777 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12850 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1132; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I32"; 
                                    goto MATCH_label_c1133; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_895[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1135; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOMP.I32"; 
                                      goto MATCH_label_c1137; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOMP.I32"; 
                                      goto MATCH_label_c1136; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1135; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1136; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12968 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1136; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I32"; 
                                    goto MATCH_label_c1137; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_897[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1139; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUB.I32"; 
                                      goto MATCH_label_c1141; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUB.I32"; 
                                      goto MATCH_label_c1140; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1139; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1140; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13086 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1140; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I32"; 
                                    goto MATCH_label_c1141; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_899[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1143; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUBR.I32"; 
                                      goto MATCH_label_c1145; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUBR.I32"; 
                                      goto MATCH_label_c1144; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1143; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1144; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13204 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1144; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I32"; 
                                    goto MATCH_label_c1145; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_901[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_r_m_892[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 2073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13259 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1147; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIV.I32"; 
                                      goto MATCH_label_c1149; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIV.I32"; 
                                      goto MATCH_label_c1148; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1147; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1148; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13344 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1148; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I32"; 
                                    goto MATCH_label_c1149; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_903[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1151; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIVR.I32"; 
                                      goto MATCH_label_c1153; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIVR.I32"; 
                                      goto MATCH_label_c1152; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1151; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1152; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13462 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1152; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I32"; 
                                    goto MATCH_label_c1153; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_905[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1155; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD.lsI32"; 
                                      goto MATCH_label_c1157; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD.lsI32"; 
                                      goto MATCH_label_c1156; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1155; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1156; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13588 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1156; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI32"; 
                                    goto MATCH_label_c1157; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_907[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1159; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIST.lsI32"; 
                                      goto MATCH_label_c1161; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIST.lsI32"; 
                                      goto MATCH_label_c1160; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1159; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1160; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1876 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13708 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1160; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI32"; 
                                    goto MATCH_label_c1161; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_909[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1163; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP.lsI32"; 
                                      goto MATCH_label_c1165; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP.lsI32"; 
                                      goto MATCH_label_c1164; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1163; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1164; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1882 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13826 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1164; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI32"; 
                                    goto MATCH_label_c1165; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_911[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                MATCH_name = "FNCLEX"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1768 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13890 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                MATCH_name = "FINIT"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13913 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1167; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD80"; 
                                      goto MATCH_label_c1169; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD80"; 
                                      goto MATCH_label_c1168; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1167; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1168; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD80"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1894 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 14003 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1168; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD80"; 
                                    goto MATCH_label_c1169; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_913[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOMI.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14057 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FCOMI.ST.STi"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1804 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14079 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1171; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP80"; 
                                      goto MATCH_label_c1173; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP80"; 
                                      goto MATCH_label_c1172; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1171; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1172; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP80"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 14161 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1172; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP80"; 
                                    goto MATCH_label_c1173; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_917[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1175; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FADD.R64"; 
                                      goto MATCH_label_c1177; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FADD.R64"; 
                                      goto MATCH_label_c1176; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1175; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1176; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FADD.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1741 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14287 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1176; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FADD.R64"; 
                                    goto MATCH_label_c1177; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_921[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FADD.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1747 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14341 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1179; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FMUL.R64"; 
                                      goto MATCH_label_c1181; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FMUL.R64"; 
                                      goto MATCH_label_c1180; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1179; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1180; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FMUL.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1935 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14422 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1180; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FMUL.R64"; 
                                    goto MATCH_label_c1181; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_923[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FMUL.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1941 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14476 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1183; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOM.R64"; 
                                      goto MATCH_label_c1185; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOM.R64"; 
                                      goto MATCH_label_c1184; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1183; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1184; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOM.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1774 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14557 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1184; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOM.R64"; 
                                    goto MATCH_label_c1185; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_926[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1187; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOMP.R64"; 
                                      goto MATCH_label_c1189; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOMP.R64"; 
                                      goto MATCH_label_c1188; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1187; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1188; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOMP.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1786 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14675 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1188; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOMP.R64"; 
                                    goto MATCH_label_c1189; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_929[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1191; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUB.R64"; 
                                      goto MATCH_label_c1193; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUB.R64"; 
                                      goto MATCH_label_c1192; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1191; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1192; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUB.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14793 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1192; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUB.R64"; 
                                    goto MATCH_label_c1193; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_931[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBR.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14847 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1195; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUBR.R64"; 
                                      goto MATCH_label_c1197; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUBR.R64"; 
                                      goto MATCH_label_c1196; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1195; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1196; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUBR.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14928 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1196; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUBR.R64"; 
                                    goto MATCH_label_c1197; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_933[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUB.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14982 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1199; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIV.R64"; 
                                      goto MATCH_label_c1201; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIV.R64"; 
                                      goto MATCH_label_c1200; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1199; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1200; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIV.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15063 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1200; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIV.R64"; 
                                    goto MATCH_label_c1201; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_936[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVR.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1846 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15117 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1203; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIVR.R64"; 
                                      goto MATCH_label_c1205; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIVR.R64"; 
                                      goto MATCH_label_c1204; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1203; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1204; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIVR.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1840 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15198 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1204; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIVR.R64"; 
                                    goto MATCH_label_c1205; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_939[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIV.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1825 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15252 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1207; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD.lsR64"; 
                                      goto MATCH_label_c1209; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD.lsR64"; 
                                      goto MATCH_label_c1208; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1207; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1208; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1891 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15341 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1208; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD.lsR64"; 
                                    goto MATCH_label_c1209; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_942[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FFREE"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1858 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15395 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1211; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FST.lsR64"; 
                                      goto MATCH_label_c1213; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FST.lsR64"; 
                                      goto MATCH_label_c1212; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1211; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1212; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FST.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15478 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1212; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FST.lsR64"; 
                                    goto MATCH_label_c1213; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_945[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FST.st.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15532 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1215; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP.lsR64"; 
                                      goto MATCH_label_c1217; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP.lsR64"; 
                                      goto MATCH_label_c1216; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1215; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1216; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15613 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1216; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR64"; 
                                    goto MATCH_label_c1217; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_948[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSTP.st.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15667 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1219; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FRSTOR"; 
                                      goto MATCH_label_c1221; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FRSTOR"; 
                                      goto MATCH_label_c1220; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1219; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1220; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FRSTOR"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 15747 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1220; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FRSTOR"; 
                                    goto MATCH_label_c1221; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_951[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOM"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15801 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FUCOMP"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 2070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15823 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1223; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FNSAVE"; 
                                      goto MATCH_label_c1225; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FNSAVE"; 
                                      goto MATCH_label_c1224; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1223; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1224; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FNSAVE"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 15904 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1224; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FNSAVE"; 
                                    goto MATCH_label_c1225; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_954[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1227; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTSW"; 
                                      goto MATCH_label_c1229; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTSW"; 
                                      goto MATCH_label_c1228; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1227; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1228; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTSW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16022 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1228; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTSW"; 
                                    goto MATCH_label_c1229; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_958[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1231; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIADD.I16"; 
                                      goto MATCH_label_c1233; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIADD.I16"; 
                                      goto MATCH_label_c1232; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1231; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1232; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1756 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16148 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1232; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I16"; 
                                    goto MATCH_label_c1233; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_960[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FADDP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1750 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16202 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1235; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIMUL.I16"; 
                                      goto MATCH_label_c1237; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIMUL.I16"; 
                                      goto MATCH_label_c1236; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1235; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1236; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16283 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1236; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I16"; 
                                    goto MATCH_label_c1237; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_962[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FMULP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1944 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16337 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1239; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOM.I16"; 
                                      goto MATCH_label_c1241; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOM.I16"; 
                                      goto MATCH_label_c1240; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1239; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1240; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1780 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16418 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1240; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I16"; 
                                    goto MATCH_label_c1241; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_965[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1243; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOMP.I16"; 
                                      goto MATCH_label_c1245; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOMP.I16"; 
                                      goto MATCH_label_c1244; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1243; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1244; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16536 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1244; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I16"; 
                                    goto MATCH_label_c1245; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_968[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1801 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 16591 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1247; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUB.I16"; 
                                      goto MATCH_label_c1249; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUB.I16"; 
                                      goto MATCH_label_c1248; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1247; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1248; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16676 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1248; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I16"; 
                                    goto MATCH_label_c1249; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_970[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBRP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16730 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1251; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUBR.I16"; 
                                      goto MATCH_label_c1253; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUBR.I16"; 
                                      goto MATCH_label_c1252; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1251; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1252; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16811 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1252; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I16"; 
                                    goto MATCH_label_c1253; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16865 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1255; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIV.I16"; 
                                      goto MATCH_label_c1257; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIV.I16"; 
                                      goto MATCH_label_c1256; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1255; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1256; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1834 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16946 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1256; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I16"; 
                                    goto MATCH_label_c1257; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVRP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1855 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17000 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1259; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIVR.I16"; 
                                      goto MATCH_label_c1261; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIVR.I16"; 
                                      goto MATCH_label_c1260; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1259; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1260; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17081 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1260; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I16"; 
                                    goto MATCH_label_c1261; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_976[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17135 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1263; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD.lsI16"; 
                                      goto MATCH_label_c1265; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD.lsI16"; 
                                      goto MATCH_label_c1264; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1263; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1264; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17224 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1264; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI16"; 
                                    goto MATCH_label_c1265; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_979[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1267; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIST.lsI16"; 
                                      goto MATCH_label_c1269; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIST.lsI16"; 
                                      goto MATCH_label_c1268; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1267; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1268; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1873 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17344 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1268; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI16"; 
                                    goto MATCH_label_c1269; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_982[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1271; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP.lsI16"; 
                                      goto MATCH_label_c1273; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP.lsI16"; 
                                      goto MATCH_label_c1272; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1271; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1272; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1879 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17462 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1272; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI16"; 
                                    goto MATCH_label_c1273; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_985[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1275; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FBLD"; 
                                      goto MATCH_label_c1277; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FBLD"; 
                                      goto MATCH_label_c1276; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1275; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1276; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBLD"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1759 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 17580 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1276; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBLD"; 
                                    goto MATCH_label_c1277; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_987[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_r_m_972[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 2019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 17635 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1279; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD64"; 
                                      goto MATCH_label_c1281; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD64"; 
                                      goto MATCH_label_c1280; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1279; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1280; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 17720 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1280; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD64"; 
                                    goto MATCH_label_c1281; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_989[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17774 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1283; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FBSTP"; 
                                      goto MATCH_label_c1285; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FBSTP"; 
                                      goto MATCH_label_c1284; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1283; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1284; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBSTP"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1762 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 17855 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1284; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBSTP"; 
                                    goto MATCH_label_c1285; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_991[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1807 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17909 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1287; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP64"; 
                                      goto MATCH_label_c1289; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP64"; 
                                      goto MATCH_label_c1288; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1287; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1288; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1885 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 17990 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1288; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP64"; 
                                    goto MATCH_label_c1289; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_993[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 1273 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));
		if (relocd == nextPC) {
			// This is a call $+5
			// Use the standard semantics, except for the last statement
			// (just updates %pc)
			result.rtl->getList().pop_back();
			// And don't make it a call statement
		} else {
			auto call = new CallStatement(relocd);
			result.rtl->getList().push_back(call);
			Proc *destProc = prog->setNewProc(relocd);
			if (destProc == (Proc *)-1) destProc = nullptr;  // In case a deleted Proc
			call->setDestProc(destProc);
		}


#line 18074 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 147 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 18094 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_637[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 151 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

	/*
	 * Conditional branches, 8 bit offset: 7X XX
	 */

#line 18121 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_name = 
                    MATCH_name_col_807[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1258 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18145 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18163 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1252 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18181 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_794[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18199 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_846[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1255 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18217 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = "STD"; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18234 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1291; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "INC.Eb"; 
                                      goto MATCH_label_c1293; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "INC.Eb"; 
                                      goto MATCH_label_c1292; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1291; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1292; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Eb"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1123 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 18334 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1292; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Eb"; 
                                    goto MATCH_label_c1293; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_996[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "INC.Eb"; 
                              goto MATCH_label_c1291; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1295; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DEC.Eb"; 
                                      goto MATCH_label_c1297; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DEC.Eb"; 
                                      goto MATCH_label_c1296; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1295; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1296; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Eb"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1207 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 18455 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1296; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Eb"; 
                                    goto MATCH_label_c1297; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_999[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "DEC.Eb"; 
                              goto MATCH_label_c1295; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: case 3: case 4: case 5: case 6: case 7: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1299; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "INC.Evod"; 
                                      goto MATCH_label_c1301; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "INC.Evod"; 
                                      goto MATCH_label_c1300; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1299; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1300; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1117 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 18586 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1300; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Evod"; 
                                    goto MATCH_label_c1301; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1002[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "INC.Evod"; 
                              goto MATCH_label_c1299; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1303; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DEC.Evod"; 
                                      goto MATCH_label_c1305; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DEC.Evod"; 
                                      goto MATCH_label_c1304; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1303; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1304; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1201 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 18707 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1304; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Evod"; 
                                    goto MATCH_label_c1305; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1005[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "DEC.Evod"; 
                              goto MATCH_label_c1303; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1307; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "CALL.Evod"; 
                                      goto MATCH_label_c1309; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "CALL.Evod"; 
                                      goto MATCH_label_c1308; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1307; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1308; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "CALL.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 18832 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1308; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1309; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1008[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "CALL.Evod"; 
                              goto MATCH_label_c1307; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: case 5: case 7: 
                        goto MATCH_label_c64; break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1311; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1313;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1312;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1314; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 135 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 18932 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1312;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1313;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1314;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1311; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1315; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "PUSH.Evod"; 
                                      goto MATCH_label_c1317; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "PUSH.Evod"; 
                                      goto MATCH_label_c1316; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1315; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1316; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "PUSH.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 19025 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1316; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1317; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1011[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "PUSH.Evod"; 
                              goto MATCH_label_c1315; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    else 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c0; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDmrb"; 
                                goto MATCH_label_c2; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDmrb"; 
                                goto MATCH_label_c1; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c3; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 19149 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c1; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrb"; 
                          goto MATCH_label_c2; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c3; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDmrb"; goto MATCH_label_c0; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c4; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDmrod"; 
                                goto MATCH_label_c6; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDmrod"; 
                                goto MATCH_label_c5; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c7; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 19249 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c5; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrod"; 
                          goto MATCH_label_c6; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c7; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDmrod"; goto MATCH_label_c4; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c8; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDrmb"; 
                                goto MATCH_label_c10; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDrmb"; 
                                goto MATCH_label_c9; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c11; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 19349 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c9; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmb"; 
                          goto MATCH_label_c10; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c11; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDrmb"; goto MATCH_label_c8; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c12; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDrmod"; 
                                goto MATCH_label_c14; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDrmod"; 
                                goto MATCH_label_c13; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c15; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 19449 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c13; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmod"; 
                          goto MATCH_label_c14; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c15; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDrmod"; goto MATCH_label_c12; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 19502 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 19522 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 19540 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 858 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 19558 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCmrb"; 
                              goto MATCH_label_c16; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCmrb"; 
                                goto MATCH_label_c18; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCmrb"; 
                                goto MATCH_label_c17; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCmrb"; 
                              goto MATCH_label_c19; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 19628 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c17; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c18; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c19; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCmrb"; goto MATCH_label_c16; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCmrod"; 
                              goto MATCH_label_c20; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCmrod"; 
                                goto MATCH_label_c22; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCmrod"; 
                                goto MATCH_label_c21; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCmrod"; 
                              goto MATCH_label_c23; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 19722 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c21; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c22; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c23; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCmrod"; goto MATCH_label_c20; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCrmb"; 
                              goto MATCH_label_c24; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCrmb"; 
                                goto MATCH_label_c26; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCrmb"; 
                                goto MATCH_label_c25; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCrmb"; 
                              goto MATCH_label_c27; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 19816 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c25; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c26; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c27; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCrmb"; goto MATCH_label_c24; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCrmod"; 
                              goto MATCH_label_c28; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCrmod"; 
                                goto MATCH_label_c30; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCrmod"; 
                                goto MATCH_label_c29; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCrmod"; 
                              goto MATCH_label_c31; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 19910 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c29; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c30; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c31; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCrmod"; goto MATCH_label_c28; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 19961 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 19981 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 804 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 19999 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 855 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20017 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDmrb"; 
                              goto MATCH_label_c32; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDmrb"; 
                                goto MATCH_label_c34; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDmrb"; 
                                goto MATCH_label_c33; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDmrb"; 
                              goto MATCH_label_c35; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 20087 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c33; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c34; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c35; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDmrb"; goto MATCH_label_c32; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDmrod"; 
                              goto MATCH_label_c36; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDmrod"; 
                                goto MATCH_label_c38; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDmrod"; 
                                goto MATCH_label_c37; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDmrod"; 
                              goto MATCH_label_c39; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1473 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 20181 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c37; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c38; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c39; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDmrod"; goto MATCH_label_c36; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDrmb"; 
                              goto MATCH_label_c40; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDrmb"; 
                                goto MATCH_label_c42; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDrmb"; 
                                goto MATCH_label_c41; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDrmb"; 
                              goto MATCH_label_c43; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 20275 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c41; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c42; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c43; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDrmb"; goto MATCH_label_c40; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDrmod"; 
                              goto MATCH_label_c44; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDrmod"; 
                                goto MATCH_label_c46; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDrmod"; 
                                goto MATCH_label_c45; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDrmod"; 
                              goto MATCH_label_c47; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 20369 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c45; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c46; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c47; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDrmod"; goto MATCH_label_c44; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 20420 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 20440 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 332 "machine/pentium/decoder.m"
  // For now, treat seg.es as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 20454 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1213 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20471 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORmrb"; 
                              goto MATCH_label_c48; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORmrb"; 
                                goto MATCH_label_c50; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORmrb"; 
                                goto MATCH_label_c49; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORmrb"; 
                              goto MATCH_label_c51; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 20541 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c49; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c50; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c51; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORmrb"; goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORmrod"; 
                              goto MATCH_label_c52; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORmrod"; 
                                goto MATCH_label_c54; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORmrod"; 
                                goto MATCH_label_c53; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORmrod"; 
                              goto MATCH_label_c55; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1461 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 20635 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c53; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c54; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c55; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORmrod"; goto MATCH_label_c52; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORrmb"; 
                              goto MATCH_label_c56; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORrmb"; 
                                goto MATCH_label_c58; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORrmb"; 
                                goto MATCH_label_c57; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORrmb"; 
                              goto MATCH_label_c59; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 20729 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c57; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c58; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c59; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORrmb"; goto MATCH_label_c56; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORrmod"; 
                              goto MATCH_label_c60; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORrmod"; 
                                goto MATCH_label_c62; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORrmod"; 
                                goto MATCH_label_c61; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORrmod"; 
                              goto MATCH_label_c63; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 20823 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c61; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c62; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c63; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORrmod"; goto MATCH_label_c60; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 20874 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I32);


#line 20894 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 341 "machine/pentium/decoder.m"
  // For now, treat seg.ss as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 20908 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1111 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 20931 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 822 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 20950 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 2: case 3: case 7: 
                  goto MATCH_label_c64; break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 335 "machine/pentium/decoder.m"
  // For now, treat seg.fs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 20969 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 338 "machine/pentium/decoder.m"
  // For now, treat seg.gs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 20982 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ORmrow"; 
                                            goto MATCH_label_c69; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ORmrow"; 
                                              goto MATCH_label_c71; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ORmrow"; 
                                              goto MATCH_label_c70; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ORmrow"; 
                                            goto MATCH_label_c72; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 21065 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c70; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c71; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c72; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ORmrow"; 
                                      goto MATCH_label_c69; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADDmrow"; 
                                            goto MATCH_label_c65; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADDmrow"; 
                                              goto MATCH_label_c67; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADDmrow"; 
                                              goto MATCH_label_c66; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADDmrow"; 
                                            goto MATCH_label_c68; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 21174 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c66; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c67; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c68; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADDmrow"; 
                                      goto MATCH_label_c65; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ORrmow"; 
                                            goto MATCH_label_c77; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ORrmow"; 
                                              goto MATCH_label_c79; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ORrmow"; 
                                              goto MATCH_label_c78; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ORrmow"; 
                                            goto MATCH_label_c80; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21286 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c78; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c79; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c80; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ORrmow"; 
                                      goto MATCH_label_c77; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADDrmow"; 
                                            goto MATCH_label_c73; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADDrmow"; 
                                              goto MATCH_label_c75; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADDrmow"; 
                                              goto MATCH_label_c74; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADDrmow"; 
                                            goto MATCH_label_c76; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21395 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c74; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c75; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c76; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADDrmow"; 
                                      goto MATCH_label_c73; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_65[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 21458 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_65[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 21482 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 4 & 0xf) 
                                        /* row at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 4: case 5: 
                                          case 6: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "LARow"; 
                                                          goto MATCH_label_c81; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "LARow"; 
                                                            goto MATCH_label_c83; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "LARow"; 
                                                            goto MATCH_label_c82; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "LARow"; 
                                                          goto MATCH_label_c84; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LARow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21586 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c82; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c83; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c84; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "LARow"; 
                                                    goto MATCH_label_c81; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "LSLow"; 
                                                          goto MATCH_label_c85; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "LSLow"; 
                                                            goto MATCH_label_c87; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "LSLow"; 
                                                            goto MATCH_label_c86; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "LSLow"; 
                                                          goto MATCH_label_c88; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LSLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21712 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c86; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c87; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c88; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "LSLow"; 
                                                    goto MATCH_label_c85; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 1: case 2: case 3: case 4: case 5: 
                                    case 6: case 7: case 9: case 13: case 14: 
                                    case 15: 
                                      goto MATCH_label_c64; break;
                                    case 8: 
                                      if ((MATCH_w_8_16 >> 3 & 0x1) 
                                              /* page at 16 */ == 1) 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 207 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 21790 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 205 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 21816 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 203 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 21842 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 201 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 21868 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 199 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 21894 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 197 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 21920 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 195 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 21946 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 193 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 21972 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      else 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 223 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 32 bit offset: 0F 8X XX XX XX XX
	 */

#line 22009 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 221 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 22035 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 219 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 22061 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 217 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 22087 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 215 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 22113 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 213 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 22139 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 211 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 22165 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_72[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 209 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 22191 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      break;
                                    case 10: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 2: case 6: 
                                            goto MATCH_label_c64; break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTSow"; 
                                                          goto MATCH_label_c93; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTSow"; 
                                                            goto MATCH_label_c95; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTSow"; 
                                                            goto MATCH_label_c94; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTSow"; 
                                                          goto MATCH_label_c96; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTSow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22287 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c94; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c95; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c96; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTSow"; 
                                                    goto MATCH_label_c93; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTow"; 
                                                          goto MATCH_label_c89; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTow"; 
                                                            goto MATCH_label_c91; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTow"; 
                                                            goto MATCH_label_c90; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTow"; 
                                                          goto MATCH_label_c92; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22408 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c90; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c91; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c92; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTow"; 
                                                    goto MATCH_label_c89; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHRD.Ibow"; 
                                                          goto MATCH_label_c101; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHRD.Ibow"; 
                                                            goto MATCH_label_c103; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHRD.Ibow"; 
                                                            goto MATCH_label_c102; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHRD.Ibow"; 
                                                          goto MATCH_label_c104; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 22554 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c102; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c103; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c104; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SHRD.Ibow"; 
                                                    goto MATCH_label_c101; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHLD.Ibow"; 
                                                          goto MATCH_label_c97; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHLD.Ibow"; 
                                                            goto MATCH_label_c99; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHLD.Ibow"; 
                                                            goto MATCH_label_c98; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHLD.Ibow"; 
                                                          goto MATCH_label_c100; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 22708 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c98; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c99; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c100; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SHLD.Ibow"; 
                                                    goto MATCH_label_c97; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "SHRD.CLow"; 
                                                          goto MATCH_label_c109; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "SHRD.CLow"; 
                                                            goto MATCH_label_c111; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "SHRD.CLow"; 
                                                            goto MATCH_label_c110; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "SHRD.CLow"; 
                                                          goto MATCH_label_c112; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22844 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c110; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c111; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c112; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "SHRD.CLow"; 
                                                    goto MATCH_label_c109; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "SHLD.CLow"; 
                                                          goto MATCH_label_c105; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "SHLD.CLow"; 
                                                            goto MATCH_label_c107; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "SHLD.CLow"; 
                                                            goto MATCH_label_c106; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "SHLD.CLow"; 
                                                          goto MATCH_label_c108; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22969 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c106; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c107; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c108; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "SHLD.CLow"; 
                                                    goto MATCH_label_c105; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 7: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "IMULrmow"; 
                                                          goto MATCH_label_c113; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "IMULrmow"; 
                                                            goto MATCH_label_c115; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "IMULrmow"; 
                                                            goto MATCH_label_c114; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "IMULrmow"; 
                                                          goto MATCH_label_c116; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1159 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 23097 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c114; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c115; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c116; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "IMULrmow"; 
                                                    goto MATCH_label_c113; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 11: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 1: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "CMPXCHG.Ev.Gvow"; 
                                                          goto MATCH_label_c117; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "CMPXCHG.Ev.Gvow"; 
                                                            goto MATCH_label_c119; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "CMPXCHG.Ev.Gvow"; 
                                                            goto MATCH_label_c118; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "CMPXCHG.Ev.Gvow"; 
                                                          goto MATCH_label_c120; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1231 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 23239 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c118; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c119; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c120; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "CMPXCHG.Ev.Gvow"; 
                                                    goto MATCH_label_c117; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* reg_opcode at 24 */) {
                                                  case 0: case 1: case 2: 
                                                  case 3: 
                                                    goto MATCH_label_c64; 
                                                    
                                                    break;
                                                  case 4: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTiow"; 
                                                                goto MATCH_label_c121; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTiow"; 
                                                                  goto MATCH_label_c123; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTiow"; 
                                                                  goto MATCH_label_c122; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTiow"; 
                                                                goto MATCH_label_c124; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23403 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c122; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c123; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c124; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTiow"; 
                                                          goto MATCH_label_c121; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 5: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTSiow"; 
                                                                goto MATCH_label_c125; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTSiow"; 
                                                                  goto MATCH_label_c127; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTSiow"; 
                                                                  goto MATCH_label_c126; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTSiow"; 
                                                                goto MATCH_label_c128; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1292 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 23570 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c126; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c127; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c128; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTSiow"; 
                                                          goto MATCH_label_c125; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 6: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTRiow"; 
                                                                goto MATCH_label_c129; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTRiow"; 
                                                                  goto MATCH_label_c131; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTRiow"; 
                                                                  goto MATCH_label_c130; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTRiow"; 
                                                                goto MATCH_label_c132; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23737 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c130; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c131; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c132; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTRiow"; 
                                                          goto MATCH_label_c129; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 7: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTCiow"; 
                                                                goto MATCH_label_c133; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTCiow"; 
                                                                  goto MATCH_label_c135; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTCiow"; 
                                                                  goto MATCH_label_c134; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTCiow"; 
                                                                goto MATCH_label_c136; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23904 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c134; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c135; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c136; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTCiow"; 
                                                          goto MATCH_label_c133; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 3 & 0x7) 
                                                      -- reg_opcode at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTCow"; 
                                                          goto MATCH_label_c141; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTCow"; 
                                                            goto MATCH_label_c143; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTCow"; 
                                                            goto MATCH_label_c142; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTCow"; 
                                                          goto MATCH_label_c144; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTCow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24056 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c142; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c143; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c144; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTCow"; 
                                                    goto MATCH_label_c141; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTRow"; 
                                                          goto MATCH_label_c137; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTRow"; 
                                                            goto MATCH_label_c139; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTRow"; 
                                                            goto MATCH_label_c138; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTRow"; 
                                                          goto MATCH_label_c140; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTRow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24177 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c138; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c139; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c140; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTRow"; 
                                                    goto MATCH_label_c137; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c145; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c147;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c146;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c148; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1355 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 24310 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c146;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c147;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c148;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c145; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c149; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c151;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c150;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c152; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1345 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 24410 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c150;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c151;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c152;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c149; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 6: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "MOVSX.Gv.Ebow"; 
                                                          goto MATCH_label_c157; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "MOVSX.Gv.Ebow"; 
                                                            goto MATCH_label_c159; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "MOVSX.Gv.Ebow"; 
                                                            goto MATCH_label_c158; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "MOVSX.Gv.Ebow"; 
                                                          goto MATCH_label_c160; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned r16 = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 942 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 24525 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c158; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c159; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c160; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "MOVSX.Gv.Ebow"; 
                                                    goto MATCH_label_c157; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "MOVZX.Gv.Ebow"; 
                                                          goto MATCH_label_c153; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "MOVZX.Gv.Ebow"; 
                                                            goto MATCH_label_c155; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "MOVZX.Gv.Ebow"; 
                                                            goto MATCH_label_c154; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "MOVZX.Gv.Ebow"; 
                                                          goto MATCH_label_c156; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned r16 = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 933 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 24651 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c154; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c155; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c156; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "MOVZX.Gv.Ebow"; 
                                                    goto MATCH_label_c153; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 12: 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */ == 1) 
                                        if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                /* page at 16 */ == 1) 
                                          goto MATCH_label_c64;  /*opt-block+*/
                                        else { 
                                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                          
                                            switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                  /* mod at 24 */) {
                                              case 0: 
                                                
                                                  switch((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */) {
                                                    case 0: case 1: case 2: 
                                                    case 3: case 6: case 7: 
                                                      MATCH_name = 
                                                        "XADD.Ev.Gvow"; 
                                                      goto MATCH_label_c161; 
                                                      
                                                      break;
                                                    case 4: 
                                                      MATCH_w_8_32 = 
                                                        fetch8(4 + MATCH_p); 
                                                      if ((MATCH_w_8_32 & 0x7) 
                                                              /* base at 32 */ == 5 && 
                                                        (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ && 
                                                        (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ < 8)) { 
                                                        MATCH_name = 
                                                          "XADD.Ev.Gvow"; 
                                                        goto MATCH_label_c163; 
                                                        
                                                      } /*opt-block*/
                                                      else { 
                                                        MATCH_name = 
                                                          "XADD.Ev.Gvow"; 
                                                        goto MATCH_label_c162; 
                                                        
                                                      } /*opt-block*/
                                                      
                                                      break;
                                                    case 5: 
                                                      MATCH_name = 
                                                        "XADD.Ev.Gvow"; 
                                                      goto MATCH_label_c164; 
                                                      
                                                      break;
                                                    default: assert(0);
                                                  } /* (MATCH_w_8_24 & 0x7) 
                                                        -- r_m at 24 --*/ 
                                                break;
                                              case 1: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Eaddr = 
                                                      3 + 
                                                      addressToPC(MATCH_p);
                                                    unsigned reg = 
                                                      (MATCH_w_8_24 >> 3 & 0x7) 
                                                            /* reg_opcode at 24 */;
                                                    nextPC = 6 + MATCH_p; 
                                                    
#line 353 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24784 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                } /*opt-block*/
                                                else { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c162; 
                                                  
                                                } /*opt-block*/
                                                
                                                break;
                                              case 2: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c163; 
                                                  
                                                } /*opt-block*/
                                                else { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c164; 
                                                  
                                                } /*opt-block*/
                                                
                                                break;
                                              case 3: 
                                                MATCH_name = "XADD.Ev.Gvow"; 
                                                goto MATCH_label_c161; 
                                                
                                                break;
                                              default: assert(0);
                                            } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                  -- mod at 24 --*/ 
                                          
                                        } /*opt-block*/ 
                                      else 
                                        goto MATCH_label_c64;  /*opt-block+*/
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 4 & 0xf) 
                                        -- row at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SBBmrow"; 
                                            goto MATCH_label_c169; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SBBmrow"; 
                                              goto MATCH_label_c171; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SBBmrow"; 
                                              goto MATCH_label_c170; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SBBmrow"; 
                                            goto MATCH_label_c172; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24918 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c170; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c171; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c172; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SBBmrow"; 
                                      goto MATCH_label_c169; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADCmrow"; 
                                            goto MATCH_label_c165; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADCmrow"; 
                                              goto MATCH_label_c167; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADCmrow"; 
                                              goto MATCH_label_c166; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADCmrow"; 
                                            goto MATCH_label_c168; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25027 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c166; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c167; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c168; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADCmrow"; 
                                      goto MATCH_label_c165; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SBBrmow"; 
                                            goto MATCH_label_c177; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SBBrmow"; 
                                              goto MATCH_label_c179; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SBBrmow"; 
                                              goto MATCH_label_c178; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SBBrmow"; 
                                            goto MATCH_label_c180; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25139 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c178; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c179; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c180; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SBBrmow"; 
                                      goto MATCH_label_c177; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADCrmow"; 
                                            goto MATCH_label_c173; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADCrmow"; 
                                              goto MATCH_label_c175; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADCrmow"; 
                                              goto MATCH_label_c174; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADCrmow"; 
                                            goto MATCH_label_c176; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25248 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c174; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c175; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c176; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADCrmow"; 
                                      goto MATCH_label_c173; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_137[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25311 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_137[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25335 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SUBmrow"; 
                                            goto MATCH_label_c185; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SUBmrow"; 
                                              goto MATCH_label_c187; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SUBmrow"; 
                                              goto MATCH_label_c186; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SUBmrow"; 
                                            goto MATCH_label_c188; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1470 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25420 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c186; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c187; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c188; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SUBmrow"; 
                                      goto MATCH_label_c185; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ANDmrow"; 
                                            goto MATCH_label_c181; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ANDmrow"; 
                                              goto MATCH_label_c183; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ANDmrow"; 
                                              goto MATCH_label_c182; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ANDmrow"; 
                                            goto MATCH_label_c184; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25529 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c182; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c183; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c184; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ANDmrow"; 
                                      goto MATCH_label_c181; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SUBrmow"; 
                                            goto MATCH_label_c193; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SUBrmow"; 
                                              goto MATCH_label_c195; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SUBrmow"; 
                                              goto MATCH_label_c194; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SUBrmow"; 
                                            goto MATCH_label_c196; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25641 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c194; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c195; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c196; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SUBrmow"; 
                                      goto MATCH_label_c193; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ANDrmow"; 
                                            goto MATCH_label_c189; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ANDrmow"; 
                                              goto MATCH_label_c191; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ANDrmow"; 
                                              goto MATCH_label_c190; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ANDrmow"; 
                                            goto MATCH_label_c192; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25750 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c190; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c191; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c192; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ANDrmow"; 
                                      goto MATCH_label_c189; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_150[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25813 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_150[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25837 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPmrow"; 
                                            goto MATCH_label_c201; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPmrow"; 
                                              goto MATCH_label_c203; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPmrow"; 
                                              goto MATCH_label_c202; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPmrow"; 
                                            goto MATCH_label_c204; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25922 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c202; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c203; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c204; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPmrow"; 
                                      goto MATCH_label_c201; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XORmrow"; 
                                            goto MATCH_label_c197; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XORmrow"; 
                                              goto MATCH_label_c199; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XORmrow"; 
                                              goto MATCH_label_c198; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XORmrow"; 
                                            goto MATCH_label_c200; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1464 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 26031 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c198; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c199; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c200; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XORmrow"; 
                                      goto MATCH_label_c197; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPrmow"; 
                                            goto MATCH_label_c209; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPrmow"; 
                                              goto MATCH_label_c211; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPrmow"; 
                                              goto MATCH_label_c210; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPrmow"; 
                                            goto MATCH_label_c212; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 26143 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c210; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c211; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c212; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPrmow"; 
                                      goto MATCH_label_c209; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XORrmow"; 
                                            goto MATCH_label_c205; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XORrmow"; 
                                              goto MATCH_label_c207; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XORrmow"; 
                                              goto MATCH_label_c206; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XORrmow"; 
                                            goto MATCH_label_c208; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 26252 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c206; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c207; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c208; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XORrmow"; 
                                      goto MATCH_label_c205; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_163[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26315 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_163[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26339 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 4: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = 
                            MATCH_name_page_164[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1198 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 26365 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = 
                            MATCH_name_page_164[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1114 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 26385 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = 
                            MATCH_name_page_165[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);  // Check!


#line 26408 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = 
                            MATCH_name_page_165[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 825 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);  // Check!


#line 26428 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 813 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26458 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "IMUL.Ivw"; 
                                            goto MATCH_label_c213; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "IMUL.Ivw"; 
                                              goto MATCH_label_c215; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "IMUL.Ivw"; 
                                              goto MATCH_label_c214; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_16_56 = 
                                              fetch16(7 + MATCH_p); 
                                            MATCH_name = "IMUL.Ivw"; 
                                            goto MATCH_label_c216; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_40 = fetch16(5 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~32768..32767] */ i16 = 
                                            sign_extend(
                                                        (MATCH_w_16_40 & 0xffff) 
                                                              /* i16 at 40 */, 
                                                        16);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 7 + MATCH_p; 
                                          
#line 1147 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 26545 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_32 = fetch16(4 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c214; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_64 = fetch16(8 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c215; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_56 = fetch16(7 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c216; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                      MATCH_name = "IMUL.Ivw"; 
                                      goto MATCH_label_c213; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_16 & 0xff) 
                                                      /* i8 at 16 */, 8);
                                  nextPC = 3 + MATCH_p; 
                                  
#line 819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 26609 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "IMUL.Ibow"; 
                                            goto MATCH_label_c217; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "IMUL.Ibow"; 
                                              goto MATCH_label_c219; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "IMUL.Ibow"; 
                                              goto MATCH_label_c218; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "IMUL.Ibow"; 
                                            goto MATCH_label_c220; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~128..127] */ i8 = 
                                            sign_extend(
                                                        (MATCH_w_8_40 & 0xff) 
                                                              /* i8 at 40 */, 
                                                        8);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 1153 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 26696 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c218; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c219; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c220; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "IMUL.Ibow"; 
                                      goto MATCH_label_c217; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 7: 
                        goto MATCH_label_c64; break;
                      case 8: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVmrow"; 
                                            goto MATCH_label_c253; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVmrow"; 
                                              goto MATCH_label_c255; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVmrow"; 
                                              goto MATCH_label_c254; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVmrow"; 
                                            goto MATCH_label_c256; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 26825 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c254; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c255; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c256; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVmrow"; 
                                      goto MATCH_label_c253; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ADDiw"; 
                                                  goto MATCH_label_c221; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ADDiw"; 
                                                    goto MATCH_label_c223; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ADDiw"; 
                                                    goto MATCH_label_c222; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ADDiw"; 
                                                  goto MATCH_label_c224; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 26951 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c222; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c223; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c224; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ADDiw"; 
                                            goto MATCH_label_c221; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ORiw"; 
                                                  goto MATCH_label_c225; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ORiw"; 
                                                    goto MATCH_label_c227; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ORiw"; 
                                                    goto MATCH_label_c226; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ORiw"; 
                                                  goto MATCH_label_c228; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27080 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c226; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c227; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c228; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ORiw"; 
                                            goto MATCH_label_c225; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ADCiw"; 
                                                  goto MATCH_label_c229; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ADCiw"; 
                                                    goto MATCH_label_c231; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ADCiw"; 
                                                    goto MATCH_label_c230; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ADCiw"; 
                                                  goto MATCH_label_c232; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27209 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c230; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c231; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c232; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ADCiw"; 
                                            goto MATCH_label_c229; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "SBBiw"; 
                                                  goto MATCH_label_c233; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "SBBiw"; 
                                                    goto MATCH_label_c235; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "SBBiw"; 
                                                    goto MATCH_label_c234; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "SBBiw"; 
                                                  goto MATCH_label_c236; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27338 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c234; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c235; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c236; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "SBBiw"; 
                                            goto MATCH_label_c233; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ANDiw"; 
                                                  goto MATCH_label_c237; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ANDiw"; 
                                                    goto MATCH_label_c239; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ANDiw"; 
                                                    goto MATCH_label_c238; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ANDiw"; 
                                                  goto MATCH_label_c240; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27467 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c238; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c239; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c240; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ANDiw"; 
                                            goto MATCH_label_c237; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "SUBiw"; 
                                                  goto MATCH_label_c241; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "SUBiw"; 
                                                    goto MATCH_label_c243; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "SUBiw"; 
                                                    goto MATCH_label_c242; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "SUBiw"; 
                                                  goto MATCH_label_c244; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27596 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c242; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c243; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c244; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "SUBiw"; 
                                            goto MATCH_label_c241; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "XORiw"; 
                                                  goto MATCH_label_c245; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "XORiw"; 
                                                    goto MATCH_label_c247; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "XORiw"; 
                                                    goto MATCH_label_c246; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "XORiw"; 
                                                  goto MATCH_label_c248; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27725 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c246; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c247; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c248; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "XORiw"; 
                                            goto MATCH_label_c245; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "CMPiw"; 
                                                  goto MATCH_label_c249; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "CMPiw"; 
                                                    goto MATCH_label_c251; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "CMPiw"; 
                                                    goto MATCH_label_c250; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "CMPiw"; 
                                                  goto MATCH_label_c252; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27854 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c250; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c251; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c252; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "CMPiw"; 
                                            goto MATCH_label_c249; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVrmow"; 
                                            goto MATCH_label_c289; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVrmow"; 
                                              goto MATCH_label_c291; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVrmow"; 
                                              goto MATCH_label_c290; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVrmow"; 
                                            goto MATCH_label_c292; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 27979 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c290; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c291; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c292; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVrmow"; 
                                      goto MATCH_label_c289; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ADDiowb"; 
                                                  goto MATCH_label_c257; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ADDiowb"; 
                                                    goto MATCH_label_c259; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ADDiowb"; 
                                                    goto MATCH_label_c258; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ADDiowb"; 
                                                  goto MATCH_label_c260; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28105 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c258; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c259; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c260; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ADDiowb"; 
                                            goto MATCH_label_c257; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ORiowb"; 
                                                  goto MATCH_label_c261; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ORiowb"; 
                                                    goto MATCH_label_c263; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ORiowb"; 
                                                    goto MATCH_label_c262; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ORiowb"; 
                                                  goto MATCH_label_c264; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28234 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c262; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c263; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c264; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ORiowb"; 
                                            goto MATCH_label_c261; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ADCiowb"; 
                                                  goto MATCH_label_c265; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ADCiowb"; 
                                                    goto MATCH_label_c267; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ADCiowb"; 
                                                    goto MATCH_label_c266; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ADCiowb"; 
                                                  goto MATCH_label_c268; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28363 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c266; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c267; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c268; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ADCiowb"; 
                                            goto MATCH_label_c265; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "SBBiowb"; 
                                                  goto MATCH_label_c269; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "SBBiowb"; 
                                                    goto MATCH_label_c271; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SBBiowb"; 
                                                    goto MATCH_label_c270; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "SBBiowb"; 
                                                  goto MATCH_label_c272; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28492 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c270; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c271; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c272; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SBBiowb"; 
                                            goto MATCH_label_c269; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ANDiowb"; 
                                                  goto MATCH_label_c273; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ANDiowb"; 
                                                    goto MATCH_label_c275; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ANDiowb"; 
                                                    goto MATCH_label_c274; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ANDiowb"; 
                                                  goto MATCH_label_c276; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28621 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c274; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c275; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c276; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ANDiowb"; 
                                            goto MATCH_label_c273; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "SUBiowb"; 
                                                  goto MATCH_label_c277; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "SUBiowb"; 
                                                    goto MATCH_label_c279; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SUBiowb"; 
                                                    goto MATCH_label_c278; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "SUBiowb"; 
                                                  goto MATCH_label_c280; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28750 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c278; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c279; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c280; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SUBiowb"; 
                                            goto MATCH_label_c277; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "XORiowb"; 
                                                  goto MATCH_label_c281; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "XORiowb"; 
                                                    goto MATCH_label_c283; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "XORiowb"; 
                                                    goto MATCH_label_c282; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "XORiowb"; 
                                                  goto MATCH_label_c284; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28879 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c282; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c283; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c284; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "XORiowb"; 
                                            goto MATCH_label_c281; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "CMPiowb"; 
                                                  goto MATCH_label_c285; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "CMPiowb"; 
                                                    goto MATCH_label_c287; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "CMPiowb"; 
                                                    goto MATCH_label_c286; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "CMPiowb"; 
                                                  goto MATCH_label_c288; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 29008 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c286; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c287; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c288; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "CMPiowb"; 
                                            goto MATCH_label_c285; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LEAow"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 29092 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LEAow"; 
                                              goto MATCH_label_c298; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LEAow"; 
                                              goto MATCH_label_c297; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LEAow"; 
                                            goto MATCH_label_c299; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LEAow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 29150 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c297; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c298; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c299; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "TEST.Ev.Gvow"; 
                                            goto MATCH_label_c293; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "TEST.Ev.Gvow"; 
                                              goto MATCH_label_c295; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "TEST.Ev.Gvow"; 
                                              goto MATCH_label_c294; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "TEST.Ev.Gvow"; 
                                            goto MATCH_label_c296; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 377 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 29256 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c294; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c295; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c296; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "TEST.Ev.Gvow"; 
                                      goto MATCH_label_c293; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "POP.Evow"; 
                                              goto MATCH_label_c304; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "POP.Evow"; 
                                                goto MATCH_label_c306; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "POP.Evow"; 
                                                goto MATCH_label_c305; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "POP.Evow"; 
                                              goto MATCH_label_c307; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "POP.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 29394 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c305; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c306; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c307; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "POP.Evow"; 
                                        goto MATCH_label_c304; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XCHG.Ev.Gvow"; 
                                            goto MATCH_label_c300; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XCHG.Ev.Gvow"; 
                                              goto MATCH_label_c302; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XCHG.Ev.Gvow"; 
                                              goto MATCH_label_c301; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XCHG.Ev.Gvow"; 
                                            goto MATCH_label_c303; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 317 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 29505 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c301; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c302; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c303; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XCHG.Ev.Gvow"; 
                                      goto MATCH_label_c300; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_name = 
                                  MATCH_name_col_239[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1264 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

	/* Decode the following as a NOP. We see these in startup code, and anywhere
	 * that calls the OS (as lcall 7, 0) */

#line 29570 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_name = 
                                  MATCH_name_col_166[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1219 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29589 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else { 
                          MATCH_name = 
                            MATCH_name_page_238[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 347 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 29613 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_238[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned i16 = 
                                    (MATCH_w_16_16 & 0xffff) /* i16 at 16 */;
                                  nextPC = 4 + MATCH_p; 
                                  
#line 395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 29643 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_240[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 1000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);


#line 29665 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_240[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29688 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_241[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);


#line 29710 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_241[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29733 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_242[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 948 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29752 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_242[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 462 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29775 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_243[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1240 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29794 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_243[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            int /* [~32768..32767] */ i16 = 
                              sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16);
                            unsigned r16 = (MATCH_w_8_8 & 0x7) /* r16 at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_I16);  // Check!


#line 29825 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 12: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 3: case 4: case 5: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "ROLB.Ev.Ibow"; 
                                                  goto MATCH_label_c308; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "ROLB.Ev.Ibow"; 
                                                    goto MATCH_label_c310; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "ROLB.Ev.Ibow"; 
                                                    goto MATCH_label_c309; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "ROLB.Ev.Ibow"; 
                                                  goto MATCH_label_c311; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 29932 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c309; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c310; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c311; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ROLB.Ev.Ibow"; 
                                            goto MATCH_label_c308; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RORB.Ev.Ibow"; 
                                                  goto MATCH_label_c312; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RORB.Ev.Ibow"; 
                                                    goto MATCH_label_c314; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RORB.Ev.Ibow"; 
                                                    goto MATCH_label_c313; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RORB.Ev.Ibow"; 
                                                  goto MATCH_label_c315; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30065 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c313; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c314; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c315; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RORB.Ev.Ibow"; 
                                            goto MATCH_label_c312; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCLB.Ev.Ibow"; 
                                                  goto MATCH_label_c316; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCLB.Ev.Ibow"; 
                                                    goto MATCH_label_c318; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCLB.Ev.Ibow"; 
                                                    goto MATCH_label_c317; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCLB.Ev.Ibow"; 
                                                  goto MATCH_label_c319; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30198 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c317; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c318; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c319; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RCLB.Ev.Ibow"; 
                                            goto MATCH_label_c316; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCRB.Ev.Ibow"; 
                                                  goto MATCH_label_c320; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCRB.Ev.Ibow"; 
                                                    goto MATCH_label_c322; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCRB.Ev.Ibow"; 
                                                    goto MATCH_label_c321; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCRB.Ev.Ibow"; 
                                                  goto MATCH_label_c323; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30331 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c321; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c322; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c323; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RCRB.Ev.Ibow"; 
                                            goto MATCH_label_c320; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.Ibow"; 
                                                  goto MATCH_label_c324; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.Ibow"; 
                                                    goto MATCH_label_c326; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.Ibow"; 
                                                    goto MATCH_label_c325; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.Ibow"; 
                                                  goto MATCH_label_c327; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30464 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c325; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c326; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c327; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHLSALB.Ev.Ibow"; 
                                            goto MATCH_label_c324; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHRB.Ev.Ibow"; 
                                                  goto MATCH_label_c328; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHRB.Ev.Ibow"; 
                                                    goto MATCH_label_c330; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHRB.Ev.Ibow"; 
                                                    goto MATCH_label_c329; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHRB.Ev.Ibow"; 
                                                  goto MATCH_label_c331; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30597 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c329; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c330; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c331; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHRB.Ev.Ibow"; 
                                            goto MATCH_label_c328; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SARB.Ev.Ibow"; 
                                                  goto MATCH_label_c332; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SARB.Ev.Ibow"; 
                                                    goto MATCH_label_c334; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SARB.Ev.Ibow"; 
                                                    goto MATCH_label_c333; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SARB.Ev.Ibow"; 
                                                  goto MATCH_label_c335; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30732 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c333; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c334; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c335; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SARB.Ev.Ibow"; 
                                            goto MATCH_label_c332; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = "MOV.Ew.Ivow"; 
                                              goto MATCH_label_c336; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                MATCH_name = "MOV.Ew.Ivow"; 
                                                goto MATCH_label_c338; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                MATCH_name = "MOV.Ew.Ivow"; 
                                                goto MATCH_label_c337; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "MOV.Ew.Ivow"; 
                                              goto MATCH_label_c339; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            int /* [~32768..32767] */ i16 = 
                                              sign_extend(
                                                          (MATCH_w_16_40 & 0xffff) 
                                                                /* i16 at 40 */, 
                                                          16);
                                            nextPC = 7 + MATCH_p; 
                                            
#line 973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 30873 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c337; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c338; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c339; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        MATCH_name = "MOV.Ew.Ivow"; 
                                        goto MATCH_label_c336; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 13: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "ROLB.Ev.1ow"; 
                                                  goto MATCH_label_c340; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.1ow"; 
                                                    goto MATCH_label_c342; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.1ow"; 
                                                    goto MATCH_label_c341; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "ROLB.Ev.1ow"; 
                                                  goto MATCH_label_c343; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 733 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31008 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c341; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c342; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c343; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "ROLB.Ev.1ow"; 
                                            goto MATCH_label_c340; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RORB.Ev.1ow"; 
                                                  goto MATCH_label_c344; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RORB.Ev.1ow"; 
                                                    goto MATCH_label_c346; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RORB.Ev.1ow"; 
                                                    goto MATCH_label_c345; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RORB.Ev.1ow"; 
                                                  goto MATCH_label_c347; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31116 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c345; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c346; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c347; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RORB.Ev.1ow"; 
                                            goto MATCH_label_c344; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RCLB.Ev.1ow"; 
                                                  goto MATCH_label_c348; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.1ow"; 
                                                    goto MATCH_label_c350; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.1ow"; 
                                                    goto MATCH_label_c349; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RCLB.Ev.1ow"; 
                                                  goto MATCH_label_c351; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31224 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c349; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c350; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c351; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCLB.Ev.1ow"; 
                                            goto MATCH_label_c348; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RCRB.Ev.1ow"; 
                                                  goto MATCH_label_c352; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.1ow"; 
                                                    goto MATCH_label_c354; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.1ow"; 
                                                    goto MATCH_label_c353; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RCRB.Ev.1ow"; 
                                                  goto MATCH_label_c355; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31332 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c353; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c354; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c355; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCRB.Ev.1ow"; 
                                            goto MATCH_label_c352; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.1ow"; 
                                                  goto MATCH_label_c356; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.1ow"; 
                                                    goto MATCH_label_c358; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.1ow"; 
                                                    goto MATCH_label_c357; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.1ow"; 
                                                  goto MATCH_label_c359; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31442 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c357; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c358; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c359; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHLSALB.Ev.1ow"; 
                                            goto MATCH_label_c356; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SHRB.Ev.1ow"; 
                                                  goto MATCH_label_c360; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.1ow"; 
                                                    goto MATCH_label_c362; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.1ow"; 
                                                    goto MATCH_label_c361; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SHRB.Ev.1ow"; 
                                                  goto MATCH_label_c363; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31550 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c361; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c362; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c363; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHRB.Ev.1ow"; 
                                            goto MATCH_label_c360; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SARB.Ev.1ow"; 
                                                  goto MATCH_label_c364; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SARB.Ev.1ow"; 
                                                    goto MATCH_label_c366; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SARB.Ev.1ow"; 
                                                    goto MATCH_label_c365; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SARB.Ev.1ow"; 
                                                  goto MATCH_label_c367; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31660 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c365; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c366; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c367; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SARB.Ev.1ow"; 
                                            goto MATCH_label_c364; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "ROLB.Ev.CLow"; 
                                                  goto MATCH_label_c368; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.CLow"; 
                                                    goto MATCH_label_c370; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.CLow"; 
                                                    goto MATCH_label_c369; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "ROLB.Ev.CLow"; 
                                                  goto MATCH_label_c371; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31785 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c369; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c370; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c371; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "ROLB.Ev.CLow"; 
                                            goto MATCH_label_c368; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RORB.Ev.CLow"; 
                                                  goto MATCH_label_c372; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RORB.Ev.CLow"; 
                                                    goto MATCH_label_c374; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RORB.Ev.CLow"; 
                                                    goto MATCH_label_c373; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RORB.Ev.CLow"; 
                                                  goto MATCH_label_c375; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31895 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c373; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c374; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c375; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RORB.Ev.CLow"; 
                                            goto MATCH_label_c372; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RCLB.Ev.CLow"; 
                                                  goto MATCH_label_c376; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.CLow"; 
                                                    goto MATCH_label_c378; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.CLow"; 
                                                    goto MATCH_label_c377; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RCLB.Ev.CLow"; 
                                                  goto MATCH_label_c379; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32005 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c377; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c378; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c379; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCLB.Ev.CLow"; 
                                            goto MATCH_label_c376; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RCRB.Ev.CLow"; 
                                                  goto MATCH_label_c380; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.CLow"; 
                                                    goto MATCH_label_c382; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.CLow"; 
                                                    goto MATCH_label_c381; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RCRB.Ev.CLow"; 
                                                  goto MATCH_label_c383; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32115 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c381; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c382; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c383; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCRB.Ev.CLow"; 
                                            goto MATCH_label_c380; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.CLow"; 
                                                  goto MATCH_label_c384; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.CLow"; 
                                                    goto MATCH_label_c386; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.CLow"; 
                                                    goto MATCH_label_c385; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.CLow"; 
                                                  goto MATCH_label_c387; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32225 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c385; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c386; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c387; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHLSALB.Ev.CLow"; 
                                            goto MATCH_label_c384; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHRB.Ev.CLow"; 
                                                  goto MATCH_label_c388; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.CLow"; 
                                                    goto MATCH_label_c390; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.CLow"; 
                                                    goto MATCH_label_c389; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHRB.Ev.CLow"; 
                                                  goto MATCH_label_c391; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32335 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c389; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c390; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c391; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHRB.Ev.CLow"; 
                                            goto MATCH_label_c388; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SARB.Ev.CLow"; 
                                                  goto MATCH_label_c392; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SARB.Ev.CLow"; 
                                                    goto MATCH_label_c394; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SARB.Ev.CLow"; 
                                                    goto MATCH_label_c393; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SARB.Ev.CLow"; 
                                                  goto MATCH_label_c395; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32447 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c393; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c394; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c395; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SARB.Ev.CLow"; 
                                            goto MATCH_label_c392; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 14: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 1 && 
                          (MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_310[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned relocd = 
                              4 + sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16) + 
                              addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 149 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 32518 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 15: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 7) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) 
                                  /* page at 8 */ == 1) { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "INC.Evow"; 
                                              goto MATCH_label_c424; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "INC.Evow"; 
                                                goto MATCH_label_c426; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "INC.Evow"; 
                                                goto MATCH_label_c425; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "INC.Evow"; 
                                              goto MATCH_label_c427; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "INC.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1120 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32599 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c425; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c426; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c427; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "INC.Evow"; 
                                        goto MATCH_label_c424; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "DEC.Evow"; 
                                              goto MATCH_label_c428; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "DEC.Evow"; 
                                                goto MATCH_label_c430; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "DEC.Evow"; 
                                                goto MATCH_label_c429; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "DEC.Evow"; 
                                              goto MATCH_label_c431; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DEC.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1204 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32703 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c429; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c430; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c431; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "DEC.Evow"; 
                                        goto MATCH_label_c428; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 2: case 3: case 4: case 5: case 7: 
                                  goto MATCH_label_c64; break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "PUSH.Evow"; 
                                              goto MATCH_label_c432; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "PUSH.Evow"; 
                                                goto MATCH_label_c434; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "PUSH.Evow"; 
                                                goto MATCH_label_c433; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "PUSH.Evow"; 
                                              goto MATCH_label_c435; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "PUSH.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 32821 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c433; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c434; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c435; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "PUSH.Evow"; 
                                        goto MATCH_label_c432; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = "TEST.Ew.Iw"; 
                                              goto MATCH_label_c396; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                MATCH_name = "TEST.Ew.Iw"; 
                                                goto MATCH_label_c398; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                MATCH_name = "TEST.Ew.Iw"; 
                                                goto MATCH_label_c397; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "TEST.Ew.Iw"; 
                                              goto MATCH_label_c399; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            unsigned i16 = 
                                              (MATCH_w_16_40 & 0xffff) 
                                                    /* i16 at 40 */;
                                            nextPC = 7 + MATCH_p; 
                                            
#line 386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 32948 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c397; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c398; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c399; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        MATCH_name = "TEST.Ew.Iw"; 
                                        goto MATCH_label_c396; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  goto MATCH_label_c64; break;
                                case 2: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "NOTow"; 
                                              goto MATCH_label_c400; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "NOTow"; 
                                                goto MATCH_label_c402; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "NOTow"; 
                                                goto MATCH_label_c401; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "NOTow"; 
                                              goto MATCH_label_c403; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NOTow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 903 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33061 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c401; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c402; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c403; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "NOTow"; 
                                        goto MATCH_label_c400; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 3: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "NEGow"; 
                                              goto MATCH_label_c404; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "NEGow"; 
                                                goto MATCH_label_c406; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "NEGow"; 
                                                goto MATCH_label_c405; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "NEGow"; 
                                              goto MATCH_label_c407; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NEGow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 912 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33165 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c405; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c406; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c407; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "NEGow"; 
                                        goto MATCH_label_c404; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 4: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "MUL.AXow"; 
                                              goto MATCH_label_c408; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "MUL.AXow"; 
                                                goto MATCH_label_c410; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "MUL.AXow"; 
                                                goto MATCH_label_c409; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "MUL.AXow"; 
                                              goto MATCH_label_c411; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "MUL.AXow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 921 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33269 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c409; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c410; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c411; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "MUL.AXow"; 
                                        goto MATCH_label_c408; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 5: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "IMULow"; 
                                              goto MATCH_label_c412; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "IMULow"; 
                                                goto MATCH_label_c414; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "IMULow"; 
                                                goto MATCH_label_c413; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "IMULow"; 
                                              goto MATCH_label_c415; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IMULow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1165 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33373 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c413; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c414; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c415; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "IMULow"; 
                                        goto MATCH_label_c412; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "DIVAX"; 
                                              goto MATCH_label_c416; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "DIVAX"; 
                                                goto MATCH_label_c418; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "DIVAX"; 
                                                goto MATCH_label_c417; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "DIVAX"; 
                                              goto MATCH_label_c419; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DIVAX"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1189 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33477 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c417; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c418; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c419; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "DIVAX"; 
                                        goto MATCH_label_c416; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 7: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "IDIVAX"; 
                                              goto MATCH_label_c420; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "IDIVAX"; 
                                                goto MATCH_label_c422; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "IDIVAX"; 
                                                goto MATCH_label_c421; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "IDIVAX"; 
                                              goto MATCH_label_c423; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IDIVAX"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1174 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33581 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c421; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c422; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c423; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "IDIVAX"; 
                                        goto MATCH_label_c420; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 187 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 16 bit offset: 66 0F 8X XX XX
	 */

#line 33659 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 185 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 33680 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 183 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 33701 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 181 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 33722 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 179 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 33743 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 177 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 33764 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 175 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 33785 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 173 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 33806 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADDib"; 
                                    goto MATCH_label_c436; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADDib"; 
                                      goto MATCH_label_c438; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADDib"; 
                                      goto MATCH_label_c437; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADDib"; 
                                    goto MATCH_label_c439; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 33888 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c437; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c438; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c439; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADDib"; 
                              goto MATCH_label_c436; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ORib"; 
                                    goto MATCH_label_c440; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ORib"; 
                                      goto MATCH_label_c442; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ORib"; 
                                      goto MATCH_label_c441; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ORib"; 
                                    goto MATCH_label_c443; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 33997 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c441; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c442; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c443; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ORib"; 
                              goto MATCH_label_c440; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADCib"; 
                                    goto MATCH_label_c444; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADCib"; 
                                      goto MATCH_label_c446; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADCib"; 
                                      goto MATCH_label_c445; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADCib"; 
                                    goto MATCH_label_c447; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34106 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c445; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c446; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c447; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADCib"; 
                              goto MATCH_label_c444; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SBBib"; 
                                    goto MATCH_label_c448; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SBBib"; 
                                      goto MATCH_label_c450; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SBBib"; 
                                      goto MATCH_label_c449; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SBBib"; 
                                    goto MATCH_label_c451; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34215 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c449; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c450; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c451; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SBBib"; 
                              goto MATCH_label_c448; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ANDib"; 
                                    goto MATCH_label_c452; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ANDib"; 
                                      goto MATCH_label_c454; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ANDib"; 
                                      goto MATCH_label_c453; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ANDib"; 
                                    goto MATCH_label_c455; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34324 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c453; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c454; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c455; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ANDib"; 
                              goto MATCH_label_c452; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SUBib"; 
                                    goto MATCH_label_c456; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SUBib"; 
                                      goto MATCH_label_c458; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SUBib"; 
                                      goto MATCH_label_c457; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SUBib"; 
                                    goto MATCH_label_c459; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34433 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c457; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c458; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c459; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SUBib"; 
                              goto MATCH_label_c456; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "XORib"; 
                                    goto MATCH_label_c460; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "XORib"; 
                                      goto MATCH_label_c462; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "XORib"; 
                                      goto MATCH_label_c461; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "XORib"; 
                                    goto MATCH_label_c463; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34542 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c461; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c462; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c463; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "XORib"; 
                              goto MATCH_label_c460; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "CMPib"; 
                                    goto MATCH_label_c464; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "CMPib"; 
                                      goto MATCH_label_c466; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "CMPib"; 
                                      goto MATCH_label_c465; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "CMPib"; 
                                    goto MATCH_label_c467; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34651 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c465; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c466; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c467; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "CMPib"; 
                              goto MATCH_label_c464; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ADDid"; 
                                    goto MATCH_label_c468; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ADDid"; 
                                      goto MATCH_label_c470; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ADDid"; 
                                      goto MATCH_label_c469; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ADDid"; 
                                    goto MATCH_label_c471; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 34766 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c469; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c470; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c471; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ADDid"; 
                              goto MATCH_label_c468; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ORid"; 
                                    goto MATCH_label_c472; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ORid"; 
                                      goto MATCH_label_c474; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ORid"; 
                                      goto MATCH_label_c473; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ORid"; 
                                    goto MATCH_label_c475; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 34873 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c473; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c474; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c475; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ORid"; 
                              goto MATCH_label_c472; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ADCid"; 
                                    goto MATCH_label_c476; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ADCid"; 
                                      goto MATCH_label_c478; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ADCid"; 
                                      goto MATCH_label_c477; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ADCid"; 
                                    goto MATCH_label_c479; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 34980 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c477; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c478; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c479; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ADCid"; 
                              goto MATCH_label_c476; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "SBBid"; 
                                    goto MATCH_label_c480; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "SBBid"; 
                                      goto MATCH_label_c482; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "SBBid"; 
                                      goto MATCH_label_c481; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "SBBid"; 
                                    goto MATCH_label_c483; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 35087 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c481; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c482; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c483; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "SBBid"; 
                              goto MATCH_label_c480; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ANDid"; 
                                    goto MATCH_label_c484; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ANDid"; 
                                      goto MATCH_label_c486; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ANDid"; 
                                      goto MATCH_label_c485; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ANDid"; 
                                    goto MATCH_label_c487; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 35194 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c485; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c486; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c487; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ANDid"; 
                              goto MATCH_label_c484; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "SUBid"; 
                                    goto MATCH_label_c488; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "SUBid"; 
                                      goto MATCH_label_c490; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "SUBid"; 
                                      goto MATCH_label_c489; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "SUBid"; 
                                    goto MATCH_label_c491; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 35301 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c489; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c490; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c491; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "SUBid"; 
                              goto MATCH_label_c488; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "XORid"; 
                                    goto MATCH_label_c492; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "XORid"; 
                                      goto MATCH_label_c494; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "XORid"; 
                                      goto MATCH_label_c493; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "XORid"; 
                                    goto MATCH_label_c495; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 35408 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c493; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c494; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c495; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "XORid"; 
                              goto MATCH_label_c492; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "CMPid"; 
                                    goto MATCH_label_c496; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "CMPid"; 
                                      goto MATCH_label_c498; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "CMPid"; 
                                      goto MATCH_label_c497; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "CMPid"; 
                                    goto MATCH_label_c499; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 35515 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c497; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c498; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c499; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "CMPid"; 
                              goto MATCH_label_c496; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADDiodb"; 
                                    goto MATCH_label_c500; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADDiodb"; 
                                      goto MATCH_label_c502; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADDiodb"; 
                                      goto MATCH_label_c501; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADDiodb"; 
                                    goto MATCH_label_c503; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35634 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c501; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c502; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c503; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADDiodb"; 
                              goto MATCH_label_c500; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ORiodb"; 
                                    goto MATCH_label_c504; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ORiodb"; 
                                      goto MATCH_label_c506; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ORiodb"; 
                                      goto MATCH_label_c505; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ORiodb"; 
                                    goto MATCH_label_c507; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35743 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c505; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c506; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c507; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ORiodb"; 
                              goto MATCH_label_c504; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADCiodb"; 
                                    goto MATCH_label_c508; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADCiodb"; 
                                      goto MATCH_label_c510; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADCiodb"; 
                                      goto MATCH_label_c509; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADCiodb"; 
                                    goto MATCH_label_c511; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35852 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c509; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c510; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c511; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADCiodb"; 
                              goto MATCH_label_c508; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SBBiodb"; 
                                    goto MATCH_label_c512; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SBBiodb"; 
                                      goto MATCH_label_c514; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SBBiodb"; 
                                      goto MATCH_label_c513; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SBBiodb"; 
                                    goto MATCH_label_c515; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35961 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c513; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c514; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c515; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SBBiodb"; 
                              goto MATCH_label_c512; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ANDiodb"; 
                                    goto MATCH_label_c516; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ANDiodb"; 
                                      goto MATCH_label_c518; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ANDiodb"; 
                                      goto MATCH_label_c517; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ANDiodb"; 
                                    goto MATCH_label_c519; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1545 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 36073 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c517; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c518; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c519; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ANDiodb"; 
                              goto MATCH_label_c516; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SUBiodb"; 
                                    goto MATCH_label_c520; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SUBiodb"; 
                                      goto MATCH_label_c522; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SUBiodb"; 
                                      goto MATCH_label_c521; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SUBiodb"; 
                                    goto MATCH_label_c523; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36182 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c521; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c522; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c523; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SUBiodb"; 
                              goto MATCH_label_c520; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "XORiodb"; 
                                    goto MATCH_label_c524; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "XORiodb"; 
                                      goto MATCH_label_c526; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "XORiodb"; 
                                      goto MATCH_label_c525; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "XORiodb"; 
                                    goto MATCH_label_c527; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36291 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c525; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c526; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c527; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "XORiodb"; 
                              goto MATCH_label_c524; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "CMPiodb"; 
                                    goto MATCH_label_c528; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "CMPiodb"; 
                                      goto MATCH_label_c530; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "CMPiodb"; 
                                      goto MATCH_label_c529; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "CMPiodb"; 
                                    goto MATCH_label_c531; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36400 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c529; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c530; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c531; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "CMPiodb"; 
                              goto MATCH_label_c528; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "TEST.Eb.Gb"; 
                              goto MATCH_label_c532; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "TEST.Eb.Gb"; 
                                goto MATCH_label_c534; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "TEST.Eb.Gb"; 
                                goto MATCH_label_c533; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "TEST.Eb.Gb"; 
                              goto MATCH_label_c535; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 380 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 36505 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c533; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c534; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c535; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "TEST.Eb.Gb"; 
                        goto MATCH_label_c532; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "TEST.Ev.Gvod"; 
                              goto MATCH_label_c536; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "TEST.Ev.Gvod"; 
                                goto MATCH_label_c538; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "TEST.Ev.Gvod"; 
                                goto MATCH_label_c537; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "TEST.Ev.Gvod"; 
                              goto MATCH_label_c539; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 374 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 36602 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c537; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c538; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c539; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "TEST.Ev.Gvod"; 
                        goto MATCH_label_c536; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XCHG.Eb.Gb"; 
                              goto MATCH_label_c540; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XCHG.Eb.Gb"; 
                                goto MATCH_label_c542; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XCHG.Eb.Gb"; 
                                goto MATCH_label_c541; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XCHG.Eb.Gb"; 
                              goto MATCH_label_c543; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 320 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 36699 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c541; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c542; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c543; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XCHG.Eb.Gb"; 
                        goto MATCH_label_c540; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XCHG.Ev.Gvod"; 
                              goto MATCH_label_c544; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XCHG.Ev.Gvod"; 
                                goto MATCH_label_c546; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XCHG.Ev.Gvod"; 
                                goto MATCH_label_c545; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XCHG.Ev.Gvod"; 
                              goto MATCH_label_c547; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 36796 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c545; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c546; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c547; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XCHG.Ev.Gvod"; 
                        goto MATCH_label_c544; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            if ((MATCH_w_8_0 & 0x7) /* col at 0 */ == 0) { 
              MATCH_name = 
                MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
              { 
                const char *name = MATCH_name;
                nextPC = 1 + MATCH_p; 
                
#line 323 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 36851 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_name = 
                MATCH_name_col_426[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
              { 
                const char *name = MATCH_name;
                unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
                nextPC = 1 + MATCH_p; 
                
#line 344 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 36870 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);

//	| MOV.Sw.Ew(Mem, sr16) [name] =>
//		result.rtl = instantiate(pc, name, DIS_MEM, DIS_SR16);

//	| MOV.Ew.Sw(Mem, sr16) [name] =>
//		result.rtl = instantiate(pc, name, DIS_MEM, DIS_SR16);


#line 36901 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);


#line 36921 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);


#line 36941 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 988 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_OFF);


#line 36961 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 951 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

//	| MOV.Rd.Dd(_, _) =>
//	//| MOV.Rd.Dd(reg, dr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Dd.Rd(_, _) =>
//	//| MOV.Dd.Rd(dr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Rd.Cd(_, _) =>
//	//| MOV.Rd.Cd(reg, cr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Cd.Rd(_, _) =>
//	//| MOV.Cd.Rd(cr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");


#line 36995 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 945 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37013 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1243 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37031 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_341[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1237 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37049 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              int /* [~128..127] */ i8 = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r8 = (MATCH_w_8_0 & 0x7) /* r8 at 0 */;
              nextPC = 2 + MATCH_p; 
              
#line 985 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_I8);


#line 37074 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ROLB.Eb.Ib"; 
                                    goto MATCH_label_c548; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ROLB.Eb.Ib"; 
                                      goto MATCH_label_c550; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ROLB.Eb.Ib"; 
                                      goto MATCH_label_c549; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ROLB.Eb.Ib"; 
                                    goto MATCH_label_c551; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37153 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c549; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c550; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c551; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ROLB.Eb.Ib"; 
                              goto MATCH_label_c548; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RORB.Eb.Ib"; 
                                    goto MATCH_label_c552; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RORB.Eb.Ib"; 
                                      goto MATCH_label_c554; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RORB.Eb.Ib"; 
                                      goto MATCH_label_c553; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RORB.Eb.Ib"; 
                                    goto MATCH_label_c555; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37262 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c553; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c554; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c555; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RORB.Eb.Ib"; 
                              goto MATCH_label_c552; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCLB.Eb.Ib"; 
                                    goto MATCH_label_c556; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCLB.Eb.Ib"; 
                                      goto MATCH_label_c558; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCLB.Eb.Ib"; 
                                      goto MATCH_label_c557; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCLB.Eb.Ib"; 
                                    goto MATCH_label_c559; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37371 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c557; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c558; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c559; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCLB.Eb.Ib"; 
                              goto MATCH_label_c556; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCRB.Eb.Ib"; 
                                    goto MATCH_label_c560; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCRB.Eb.Ib"; 
                                      goto MATCH_label_c562; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCRB.Eb.Ib"; 
                                      goto MATCH_label_c561; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCRB.Eb.Ib"; 
                                    goto MATCH_label_c563; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37480 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c561; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c562; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c563; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCRB.Eb.Ib"; 
                              goto MATCH_label_c560; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Eb.Ib"; 
                                    goto MATCH_label_c564; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Eb.Ib"; 
                                      goto MATCH_label_c566; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Eb.Ib"; 
                                      goto MATCH_label_c565; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Eb.Ib"; 
                                    goto MATCH_label_c567; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37589 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c565; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c566; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c567; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHLSALB.Eb.Ib"; 
                              goto MATCH_label_c564; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHRB.Eb.Ib"; 
                                    goto MATCH_label_c568; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHRB.Eb.Ib"; 
                                      goto MATCH_label_c570; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRB.Eb.Ib"; 
                                      goto MATCH_label_c569; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHRB.Eb.Ib"; 
                                    goto MATCH_label_c571; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37698 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c569; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c570; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c571; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHRB.Eb.Ib"; 
                              goto MATCH_label_c568; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SARB.Eb.Ib"; 
                                    goto MATCH_label_c572; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SARB.Eb.Ib"; 
                                      goto MATCH_label_c574; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SARB.Eb.Ib"; 
                                      goto MATCH_label_c573; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SARB.Eb.Ib"; 
                                    goto MATCH_label_c575; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37809 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c573; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c574; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c575; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SARB.Eb.Ib"; 
                              goto MATCH_label_c572; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ROLB.Ev.Ibod"; 
                                    goto MATCH_label_c576; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ROLB.Ev.Ibod"; 
                                      goto MATCH_label_c578; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ROLB.Ev.Ibod"; 
                                      goto MATCH_label_c577; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ROLB.Ev.Ibod"; 
                                    goto MATCH_label_c579; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 37926 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c577; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c578; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c579; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ROLB.Ev.Ibod"; 
                              goto MATCH_label_c576; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RORB.Ev.Ibod"; 
                                    goto MATCH_label_c580; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RORB.Ev.Ibod"; 
                                      goto MATCH_label_c582; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RORB.Ev.Ibod"; 
                                      goto MATCH_label_c581; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RORB.Ev.Ibod"; 
                                    goto MATCH_label_c583; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38035 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c581; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c582; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c583; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RORB.Ev.Ibod"; 
                              goto MATCH_label_c580; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCLB.Ev.Ibod"; 
                                    goto MATCH_label_c584; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCLB.Ev.Ibod"; 
                                      goto MATCH_label_c586; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCLB.Ev.Ibod"; 
                                      goto MATCH_label_c585; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCLB.Ev.Ibod"; 
                                    goto MATCH_label_c587; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38144 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c585; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c586; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c587; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCLB.Ev.Ibod"; 
                              goto MATCH_label_c584; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCRB.Ev.Ibod"; 
                                    goto MATCH_label_c588; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCRB.Ev.Ibod"; 
                                      goto MATCH_label_c590; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCRB.Ev.Ibod"; 
                                      goto MATCH_label_c589; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCRB.Ev.Ibod"; 
                                    goto MATCH_label_c591; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38253 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c589; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c590; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c591; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCRB.Ev.Ibod"; 
                              goto MATCH_label_c588; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Ev.Ibod"; 
                                    goto MATCH_label_c592; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Ev.Ibod"; 
                                      goto MATCH_label_c594; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Ev.Ibod"; 
                                      goto MATCH_label_c593; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Ev.Ibod"; 
                                    goto MATCH_label_c595; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38362 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c593; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c594; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c595; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHLSALB.Ev.Ibod"; 
                              goto MATCH_label_c592; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHRB.Ev.Ibod"; 
                                    goto MATCH_label_c596; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHRB.Ev.Ibod"; 
                                      goto MATCH_label_c598; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRB.Ev.Ibod"; 
                                      goto MATCH_label_c597; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHRB.Ev.Ibod"; 
                                    goto MATCH_label_c599; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38471 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c597; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c598; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c599; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHRB.Ev.Ibod"; 
                              goto MATCH_label_c596; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SARB.Ev.Ibod"; 
                                    goto MATCH_label_c600; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SARB.Ev.Ibod"; 
                                      goto MATCH_label_c602; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SARB.Ev.Ibod"; 
                                      goto MATCH_label_c601; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SARB.Ev.Ibod"; 
                                    goto MATCH_label_c603; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38582 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c601; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c602; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c603; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SARB.Ev.Ibod"; 
                              goto MATCH_label_c600; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 38644 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 486 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);
		result.rtl->appendStmt(new ReturnStatement);

//	| REPNE() [name] =>
//		result.rtl = instantiate(pc, name);

//	| REP() [name] =>
//		result.rtl = instantiate(pc, name);


#line 38669 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LES"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38697 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LES"; 
                                goto MATCH_label_c605; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LES"; 
                                goto MATCH_label_c604; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LES"; 
                              goto MATCH_label_c606; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LES"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38749 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c604; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c605; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c606; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LDS"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38807 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LDS"; 
                                goto MATCH_label_c608; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LDS"; 
                                goto MATCH_label_c607; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LDS"; 
                              goto MATCH_label_c609; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LDS"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38859 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c607; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c608; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c609; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                MATCH_name = "MOV.Eb.Ib"; 
                                goto MATCH_label_c610; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                  MATCH_name = "MOV.Eb.Ib"; 
                                  goto MATCH_label_c612; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                  MATCH_name = "MOV.Eb.Ib"; 
                                  goto MATCH_label_c611; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "MOV.Eb.Ib"; 
                                goto MATCH_label_c613; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              int /* [~128..127] */ i8 = 
                                sign_extend(
                                            (MATCH_w_8_32 & 0xff) 
                                                  /* i8 at 32 */, 8);
                              nextPC = 5 + MATCH_p; 
                              
#line 976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 38962 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c611; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c612; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c613; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          MATCH_name = "MOV.Eb.Ib"; 
                          goto MATCH_label_c610; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = "MOV.Ed.Ivod"; 
                                goto MATCH_label_c614; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                  MATCH_name = "MOV.Ed.Ivod"; 
                                  goto MATCH_label_c616; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                  MATCH_name = "MOV.Ed.Ivod"; 
                                  goto MATCH_label_c615; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "MOV.Ed.Ivod"; 
                                goto MATCH_label_c617; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                              nextPC = 8 + MATCH_p; 
                              
#line 970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 39072 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c615; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c616; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c617; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                          MATCH_name = "MOV.Ed.Ivod"; 
                          goto MATCH_label_c614; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Eb.1"; 
                                    goto MATCH_label_c618; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Eb.1"; 
                                      goto MATCH_label_c620; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Eb.1"; 
                                      goto MATCH_label_c619; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Eb.1"; 
                                    goto MATCH_label_c621; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 39199 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c619; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c620; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c621; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Eb.1"; 
                              goto MATCH_label_c618; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Eb.1"; 
                                    goto MATCH_label_c622; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Eb.1"; 
                                      goto MATCH_label_c624; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Eb.1"; 
                                      goto MATCH_label_c623; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Eb.1"; 
                                    goto MATCH_label_c625; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 769 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39295 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c623; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c624; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c625; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Eb.1"; 
                              goto MATCH_label_c622; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Eb.1"; 
                                    goto MATCH_label_c626; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Eb.1"; 
                                      goto MATCH_label_c628; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Eb.1"; 
                                      goto MATCH_label_c627; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Eb.1"; 
                                    goto MATCH_label_c629; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 763 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39391 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c627; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c628; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c629; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Eb.1"; 
                              goto MATCH_label_c626; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Eb.1"; 
                                    goto MATCH_label_c630; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Eb.1"; 
                                      goto MATCH_label_c632; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Eb.1"; 
                                      goto MATCH_label_c631; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Eb.1"; 
                                    goto MATCH_label_c633; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 757 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39487 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c631; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c632; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c633; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Eb.1"; 
                              goto MATCH_label_c630; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Eb.1"; 
                                    goto MATCH_label_c634; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Eb.1"; 
                                      goto MATCH_label_c636; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Eb.1"; 
                                      goto MATCH_label_c635; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Eb.1"; 
                                    goto MATCH_label_c637; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 751 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39583 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c635; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c636; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c637; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Eb.1"; 
                              goto MATCH_label_c634; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Eb.1"; 
                                    goto MATCH_label_c638; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Eb.1"; 
                                      goto MATCH_label_c640; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Eb.1"; 
                                      goto MATCH_label_c639; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Eb.1"; 
                                    goto MATCH_label_c641; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 745 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39679 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c639; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c640; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c641; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Eb.1"; 
                              goto MATCH_label_c638; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Eb.1"; 
                                    goto MATCH_label_c642; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Eb.1"; 
                                      goto MATCH_label_c644; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Eb.1"; 
                                      goto MATCH_label_c643; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Eb.1"; 
                                    goto MATCH_label_c645; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 739 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 39777 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c643; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c644; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c645; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Eb.1"; 
                              goto MATCH_label_c642; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Ev.1od"; 
                                    goto MATCH_label_c646; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Ev.1od"; 
                                      goto MATCH_label_c648; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Ev.1od"; 
                                      goto MATCH_label_c647; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Ev.1od"; 
                                    goto MATCH_label_c649; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 39881 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c647; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c648; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c649; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Ev.1od"; 
                              goto MATCH_label_c646; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Ev.1od"; 
                                    goto MATCH_label_c650; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Ev.1od"; 
                                      goto MATCH_label_c652; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Ev.1od"; 
                                      goto MATCH_label_c651; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Ev.1od"; 
                                    goto MATCH_label_c653; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 39977 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c651; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c652; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c653; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Ev.1od"; 
                              goto MATCH_label_c650; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Ev.1od"; 
                                    goto MATCH_label_c654; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Ev.1od"; 
                                      goto MATCH_label_c656; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Ev.1od"; 
                                      goto MATCH_label_c655; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Ev.1od"; 
                                    goto MATCH_label_c657; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40073 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c655; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c656; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c657; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Ev.1od"; 
                              goto MATCH_label_c654; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Ev.1od"; 
                                    goto MATCH_label_c658; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Ev.1od"; 
                                      goto MATCH_label_c660; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Ev.1od"; 
                                      goto MATCH_label_c659; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Ev.1od"; 
                                    goto MATCH_label_c661; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40169 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c659; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c660; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c661; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Ev.1od"; 
                              goto MATCH_label_c658; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Ev.1od"; 
                                    goto MATCH_label_c662; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Ev.1od"; 
                                      goto MATCH_label_c664; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Ev.1od"; 
                                      goto MATCH_label_c663; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Ev.1od"; 
                                    goto MATCH_label_c665; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40265 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c663; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c664; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c665; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Ev.1od"; 
                              goto MATCH_label_c662; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Ev.1od"; 
                                    goto MATCH_label_c666; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Ev.1od"; 
                                      goto MATCH_label_c668; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Ev.1od"; 
                                      goto MATCH_label_c667; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Ev.1od"; 
                                    goto MATCH_label_c669; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40361 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c667; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c668; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c669; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Ev.1od"; 
                              goto MATCH_label_c666; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Ev.1od"; 
                                    goto MATCH_label_c670; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Ev.1od"; 
                                      goto MATCH_label_c672; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Ev.1od"; 
                                      goto MATCH_label_c671; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Ev.1od"; 
                                    goto MATCH_label_c673; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40459 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c671; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c672; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c673; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Ev.1od"; 
                              goto MATCH_label_c670; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Eb.CL"; 
                                    goto MATCH_label_c674; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Eb.CL"; 
                                      goto MATCH_label_c676; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Eb.CL"; 
                                      goto MATCH_label_c675; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Eb.CL"; 
                                    goto MATCH_label_c677; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40563 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c675; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c676; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c677; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Eb.CL"; 
                              goto MATCH_label_c674; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Eb.CL"; 
                                    goto MATCH_label_c678; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Eb.CL"; 
                                      goto MATCH_label_c680; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Eb.CL"; 
                                      goto MATCH_label_c679; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Eb.CL"; 
                                    goto MATCH_label_c681; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 766 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40659 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c679; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c680; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c681; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Eb.CL"; 
                              goto MATCH_label_c678; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Eb.CL"; 
                                    goto MATCH_label_c682; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Eb.CL"; 
                                      goto MATCH_label_c684; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Eb.CL"; 
                                      goto MATCH_label_c683; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Eb.CL"; 
                                    goto MATCH_label_c685; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 760 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40755 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c683; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c684; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c685; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Eb.CL"; 
                              goto MATCH_label_c682; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Eb.CL"; 
                                    goto MATCH_label_c686; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Eb.CL"; 
                                      goto MATCH_label_c688; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Eb.CL"; 
                                      goto MATCH_label_c687; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Eb.CL"; 
                                    goto MATCH_label_c689; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 754 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40851 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c687; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c688; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c689; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Eb.CL"; 
                              goto MATCH_label_c686; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Eb.CL"; 
                                    goto MATCH_label_c690; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Eb.CL"; 
                                      goto MATCH_label_c692; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Eb.CL"; 
                                      goto MATCH_label_c691; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Eb.CL"; 
                                    goto MATCH_label_c693; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 748 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40947 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c691; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c692; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c693; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Eb.CL"; 
                              goto MATCH_label_c690; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Eb.CL"; 
                                    goto MATCH_label_c694; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Eb.CL"; 
                                      goto MATCH_label_c696; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Eb.CL"; 
                                      goto MATCH_label_c695; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Eb.CL"; 
                                    goto MATCH_label_c697; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 742 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 41043 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c695; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c696; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c697; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Eb.CL"; 
                              goto MATCH_label_c694; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Eb.CL"; 
                                    goto MATCH_label_c698; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Eb.CL"; 
                                      goto MATCH_label_c700; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Eb.CL"; 
                                      goto MATCH_label_c699; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Eb.CL"; 
                                    goto MATCH_label_c701; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 736 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41141 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c699; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c700; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c701; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Eb.CL"; 
                              goto MATCH_label_c698; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Ev.CLod"; 
                                    goto MATCH_label_c702; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Ev.CLod"; 
                                      goto MATCH_label_c704; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Ev.CLod"; 
                                      goto MATCH_label_c703; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Ev.CLod"; 
                                    goto MATCH_label_c705; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41245 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c703; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c704; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c705; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Ev.CLod"; 
                              goto MATCH_label_c702; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Ev.CLod"; 
                                    goto MATCH_label_c706; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Ev.CLod"; 
                                      goto MATCH_label_c708; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Ev.CLod"; 
                                      goto MATCH_label_c707; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Ev.CLod"; 
                                    goto MATCH_label_c709; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41341 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c707; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c708; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c709; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Ev.CLod"; 
                              goto MATCH_label_c706; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Ev.CLod"; 
                                    goto MATCH_label_c710; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Ev.CLod"; 
                                      goto MATCH_label_c712; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Ev.CLod"; 
                                      goto MATCH_label_c711; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Ev.CLod"; 
                                    goto MATCH_label_c713; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41437 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c711; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c712; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c713; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Ev.CLod"; 
                              goto MATCH_label_c710; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Ev.CLod"; 
                                    goto MATCH_label_c714; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Ev.CLod"; 
                                      goto MATCH_label_c716; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Ev.CLod"; 
                                      goto MATCH_label_c715; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Ev.CLod"; 
                                    goto MATCH_label_c717; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41533 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c715; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c716; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c717; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Ev.CLod"; 
                              goto MATCH_label_c714; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Ev.CLod"; 
                                    goto MATCH_label_c718; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Ev.CLod"; 
                                      goto MATCH_label_c720; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Ev.CLod"; 
                                      goto MATCH_label_c719; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Ev.CLod"; 
                                    goto MATCH_label_c721; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41629 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c719; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c720; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c721; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Ev.CLod"; 
                              goto MATCH_label_c718; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Ev.CLod"; 
                                    goto MATCH_label_c722; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Ev.CLod"; 
                                      goto MATCH_label_c724; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Ev.CLod"; 
                                      goto MATCH_label_c723; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Ev.CLod"; 
                                    goto MATCH_label_c725; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41725 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c723; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c724; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c725; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Ev.CLod"; 
                              goto MATCH_label_c722; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Ev.CLod"; 
                                    goto MATCH_label_c726; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Ev.CLod"; 
                                      goto MATCH_label_c728; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Ev.CLod"; 
                                      goto MATCH_label_c727; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Ev.CLod"; 
                                    goto MATCH_label_c729; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41823 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c727; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c728; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c729; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Ev.CLod"; 
                              goto MATCH_label_c726; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: 
                  goto MATCH_label_c64; break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 41880 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1042 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41908 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41930 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41952 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 4: 
                  goto MATCH_label_c64; break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_564[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42003 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_565[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42030 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_564[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42049 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_566[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42075 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_565[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42094 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_567[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42130 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_568[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42155 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_569[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42180 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_310[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42199 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_570[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42222 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_567[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42241 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_571[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42264 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_568[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42283 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_572[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42306 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_569[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42325 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_573[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42375 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.LODSvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42400 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_566[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42419 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.SCASvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42443 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_573[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42462 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_576[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42498 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_577[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42523 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_578[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42548 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_570[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42567 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_579[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42590 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_571[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42609 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_580[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42632 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_572[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42651 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_581[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42674 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_576[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42693 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_582[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1246 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42720 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "TEST.Eb.Ib"; 
                                    goto MATCH_label_c730; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "TEST.Eb.Ib"; 
                                      goto MATCH_label_c732; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "TEST.Eb.Ib"; 
                                      goto MATCH_label_c731; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "TEST.Eb.Ib"; 
                                    goto MATCH_label_c733; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i8 = 
                                    (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
                                  nextPC = 5 + MATCH_p; 
                                  
#line 389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 42794 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c731; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c732; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c733; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "TEST.Eb.Ib"; 
                              goto MATCH_label_c730; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NOTb"; 
                                    goto MATCH_label_c734; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NOTb"; 
                                      goto MATCH_label_c736; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NOTb"; 
                                      goto MATCH_label_c735; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NOTb"; 
                                    goto MATCH_label_c737; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 906 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 42896 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c735; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c736; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c737; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NOTb"; 
                              goto MATCH_label_c734; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NEGb"; 
                                    goto MATCH_label_c738; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NEGb"; 
                                      goto MATCH_label_c740; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NEGb"; 
                                      goto MATCH_label_c739; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NEGb"; 
                                    goto MATCH_label_c741; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 915 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 42992 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c739; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c740; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c741; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NEGb"; 
                              goto MATCH_label_c738; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "MUL.AL"; 
                                    goto MATCH_label_c742; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "MUL.AL"; 
                                      goto MATCH_label_c744; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "MUL.AL"; 
                                      goto MATCH_label_c743; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "MUL.AL"; 
                                    goto MATCH_label_c745; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 924 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43088 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c743; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c744; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c745; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "MUL.AL"; 
                              goto MATCH_label_c742; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IMULb"; 
                                    goto MATCH_label_c746; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IMULb"; 
                                      goto MATCH_label_c748; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IMULb"; 
                                      goto MATCH_label_c747; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IMULb"; 
                                    goto MATCH_label_c749; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1168 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43184 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c747; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c748; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c749; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IMULb"; 
                              goto MATCH_label_c746; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "DIVAL"; 
                                    goto MATCH_label_c750; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DIVAL"; 
                                      goto MATCH_label_c752; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DIVAL"; 
                                      goto MATCH_label_c751; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "DIVAL"; 
                                    goto MATCH_label_c753; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVAL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1192 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43280 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c751; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c752; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c753; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "DIVAL"; 
                              goto MATCH_label_c750; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IDIV"; 
                                    goto MATCH_label_c754; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IDIV"; 
                                      goto MATCH_label_c756; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IDIV"; 
                                      goto MATCH_label_c755; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IDIV"; 
                                    goto MATCH_label_c757; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIV"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1177 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 43379 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c755; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c756; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c757; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IDIV"; 
                              goto MATCH_label_c754; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "TEST.Ed.Id"; 
                                    goto MATCH_label_c758; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "TEST.Ed.Id"; 
                                      goto MATCH_label_c760; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "TEST.Ed.Id"; 
                                      goto MATCH_label_c759; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "TEST.Ed.Id"; 
                                    goto MATCH_label_c761; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 43490 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c759; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c760; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c761; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "TEST.Ed.Id"; 
                              goto MATCH_label_c758; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NOTod"; 
                                    goto MATCH_label_c762; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NOTod"; 
                                      goto MATCH_label_c764; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NOTod"; 
                                      goto MATCH_label_c763; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NOTod"; 
                                    goto MATCH_label_c765; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 900 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43592 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c763; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c764; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c765; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NOTod"; 
                              goto MATCH_label_c762; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NEGod"; 
                                    goto MATCH_label_c766; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NEGod"; 
                                      goto MATCH_label_c768; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NEGod"; 
                                      goto MATCH_label_c767; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NEGod"; 
                                    goto MATCH_label_c769; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 909 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43688 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c767; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c768; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c769; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NEGod"; 
                              goto MATCH_label_c766; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "MUL.AXod"; 
                                    goto MATCH_label_c770; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "MUL.AXod"; 
                                      goto MATCH_label_c772; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "MUL.AXod"; 
                                      goto MATCH_label_c771; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "MUL.AXod"; 
                                    goto MATCH_label_c773; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AXod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 918 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43784 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c771; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c772; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c773; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "MUL.AXod"; 
                              goto MATCH_label_c770; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IMULod"; 
                                    goto MATCH_label_c774; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IMULod"; 
                                      goto MATCH_label_c776; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IMULod"; 
                                      goto MATCH_label_c775; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IMULod"; 
                                    goto MATCH_label_c777; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1162 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43880 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c775; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c776; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c777; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IMULod"; 
                              goto MATCH_label_c774; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "DIVeAX"; 
                                    goto MATCH_label_c778; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DIVeAX"; 
                                      goto MATCH_label_c780; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DIVeAX"; 
                                      goto MATCH_label_c779; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "DIVeAX"; 
                                    goto MATCH_label_c781; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVeAX"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1186 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43976 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c779; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c780; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c781; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "DIVeAX"; 
                              goto MATCH_label_c778; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IDIVeAX"; 
                                    goto MATCH_label_c782; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IDIVeAX"; 
                                      goto MATCH_label_c784; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IDIVeAX"; 
                                      goto MATCH_label_c783; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IDIVeAX"; 
                                    goto MATCH_label_c785; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIVeAX"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1171 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 44072 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c783; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c784; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c785; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IDIVeAX"; 
                              goto MATCH_label_c782; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    
  }goto MATCH_finished_c; 
  
  MATCH_label_c0: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44135 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c2: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c3: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44189 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c4: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c5: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c6: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44243 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c7: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c8: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44279 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c9: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44297 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c10: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c11: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44333 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c12: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c13: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c14: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c15: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c16: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c17: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c18: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c19: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c20: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44495 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c21: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c22: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44531 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c23: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44549 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c24: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c25: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44585 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c26: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c27: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44621 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c28: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c29: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c30: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c31: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1413 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44693 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c32: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c33: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c34: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c35: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44765 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c36: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1473 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44783 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c37: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1473 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c38: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1473 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44819 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c39: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1473 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44837 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c40: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44855 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c41: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c42: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44891 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c43: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44909 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c44: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44927 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c45: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44945 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c46: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c47: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c48: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44999 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c49: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c50: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c51: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45053 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c52: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1461 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c53: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1461 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c54: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1461 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45107 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c55: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1461 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45125 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c56: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45143 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c57: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45161 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c58: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c59: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45197 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c60: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45215 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c61: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c62: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45251 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c63: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c64: (void)0; /*placeholder for label*/ 
    { 
      nextPC = MATCH_p; 
      
#line 2097 "machine/pentium/decoder.m"

		result.valid = false;

#line 45283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c65: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c66: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45319 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c67: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c68: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c69: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45373 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c70: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45391 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c71: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c72: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45427 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c73: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45445 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c74: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c75: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45481 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c76: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c77: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c78: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c79: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45553 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c80: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45571 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c81: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45589 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c82: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c83: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c84: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c85: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45661 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c86: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45679 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c87: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c88: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45715 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c89: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45733 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c90: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45751 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c91: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45769 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c92: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45787 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c93: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45805 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c94: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45823 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c95: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45841 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c96: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45859 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c97: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c98: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c99: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45916 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c100: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45935 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c101: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45954 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c102: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45973 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c103: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45992 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c104: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 46011 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c105: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46029 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c106: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46047 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c107: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c108: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c109: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c110: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c111: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46137 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c112: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46155 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c113: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1159 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c114: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1159 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46191 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c115: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1159 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46209 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c116: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1159 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c117: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1231 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46245 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c118: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1231 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46263 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c119: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1231 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c120: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1231 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46299 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c121: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c122: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c123: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46356 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c124: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46375 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c125: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1292 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c126: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1292 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46413 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c127: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1292 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46432 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c128: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1292 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46451 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c129: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46470 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c130: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46489 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c131: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46508 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c132: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c133: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46546 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c134: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46565 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c135: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46584 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c136: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c137: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46621 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c138: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c139: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c140: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c141: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46693 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c142: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c143: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c144: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1355 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1355 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46831 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1355 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1355 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1345 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 46934 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1345 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 46953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1345 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 46972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1345 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 46991 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c153: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 933 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47009 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c154: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 933 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47027 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c155: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 933 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47045 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c156: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 933 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c157: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 942 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47081 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c158: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 942 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c159: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 942 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c160: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 942 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47135 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c161: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 353 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c162: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 353 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c163: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 353 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47189 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c164: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 353 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c165: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c166: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47243 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c167: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c168: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47279 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c169: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47297 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c170: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c171: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47333 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c172: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c173: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c174: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c175: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c176: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1416 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c177: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c178: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c179: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c180: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1410 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47495 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c181: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c182: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47531 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c183: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47549 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c184: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c185: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1470 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47585 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c186: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1470 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c187: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1470 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47621 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c188: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1470 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c189: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c190: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c191: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47693 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c192: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1404 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c193: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c194: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c195: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47765 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c196: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1398 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47783 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c197: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1464 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c198: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1464 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47819 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c199: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1464 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47837 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c200: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1464 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47855 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c201: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c202: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47891 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c203: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47909 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c204: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47927 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c205: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47945 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c206: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c207: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c208: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1392 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47999 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c209: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c210: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c211: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48053 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c212: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c213: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1147 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c214: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1147 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c215: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 10 + MATCH_p; 
      
#line 1147 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c216: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1147 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c217: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1153 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c218: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1153 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48191 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c219: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1153 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48211 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c220: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1153 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48231 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c221: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48250 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c222: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c223: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48288 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c224: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c225: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48326 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c226: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48345 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c227: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48364 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c228: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c229: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48402 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c230: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c231: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48440 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c232: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c233: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48478 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c234: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c235: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c236: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c237: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48554 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c238: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c239: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48592 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c240: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48611 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c241: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48630 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c242: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c243: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48668 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c244: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48687 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c245: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48706 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c246: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48725 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c247: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48744 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c248: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c249: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48782 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c250: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c251: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48820 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c252: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48839 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c253: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c254: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48875 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c255: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48893 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c256: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48911 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c257: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c258: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48949 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c259: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48968 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c260: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c261: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49006 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c262: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49025 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c263: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49044 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c264: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c265: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c266: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c267: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49120 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c268: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c269: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49158 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c270: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49177 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c271: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49196 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c272: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49215 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c273: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49234 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c274: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c275: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49272 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c276: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49291 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c277: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49310 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c278: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c279: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49348 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c280: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49367 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c281: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49386 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c282: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c283: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49424 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c284: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c285: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49462 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c286: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49481 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c287: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49500 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c288: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49519 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c289: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49537 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c290: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49555 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c291: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c292: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49591 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c293: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 377 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c294: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 377 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c295: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 377 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49645 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c296: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 377 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c297: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c298: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49699 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c299: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49717 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c300: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 317 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49735 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c301: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 317 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c302: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 317 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c303: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 317 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c304: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c305: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49877 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c306: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c307: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 870 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49965 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c308: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49984 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c309: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50003 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c310: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50022 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c311: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c312: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50060 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c313: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50079 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c314: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50098 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c315: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c316: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c317: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50155 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c318: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50174 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c319: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c320: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50212 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c321: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50231 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c322: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50250 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c323: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c324: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50288 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c325: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c326: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50326 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c327: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50345 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c328: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50364 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c329: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c330: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50402 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c331: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c332: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50440 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c333: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c334: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50478 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c335: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c336: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c337: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c338: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50554 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c339: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c340: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 733 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c341: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 733 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c342: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 733 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c343: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 733 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c344: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50658 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c345: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c346: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50692 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c347: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c348: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c349: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c350: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50760 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c351: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c352: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c353: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c354: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50828 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c355: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50845 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c356: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50862 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c357: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50879 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c358: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50896 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c359: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50913 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c360: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c361: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50947 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c362: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50964 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c363: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c364: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50998 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c365: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c366: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51032 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c367: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c368: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51066 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c369: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c370: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c371: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c372: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51134 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c373: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c374: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51168 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c375: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c376: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c377: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c378: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51236 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c379: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c380: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51270 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c381: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51287 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c382: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51304 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c383: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c384: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c385: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c386: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51372 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c387: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c388: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51406 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c389: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c390: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51440 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c391: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c392: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51474 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c393: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c394: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51508 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c395: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51525 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c396: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_24 & 0xffff) /* i16 at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51543 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c397: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_32 & 0xffff) /* i16 at 32 */;
      nextPC = 6 + MATCH_p; 
      
#line 386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c398: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_64 & 0xffff) /* i16 at 64 */;
      nextPC = 10 + MATCH_p; 
      
#line 386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51579 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c399: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_56 & 0xffff) /* i16 at 56 */;
      nextPC = 9 + MATCH_p; 
      
#line 386 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51597 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c400: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 903 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51614 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c401: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 903 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51631 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c402: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 903 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51648 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c403: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 903 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51665 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c404: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 912 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51682 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c405: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 912 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51699 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c406: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 912 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51716 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c407: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 912 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51733 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c408: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 921 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51750 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c409: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 921 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c410: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 921 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51784 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c411: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 921 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c412: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1165 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51818 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c413: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1165 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51835 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c414: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1165 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51852 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c415: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1165 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51869 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c416: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1189 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51886 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c417: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1189 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c418: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1189 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51920 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c419: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1189 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51937 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c420: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1174 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51954 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c421: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1174 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51971 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c422: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1174 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51988 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c423: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1174 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52005 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c424: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1120 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52022 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c425: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1120 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52039 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c426: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1120 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52056 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c427: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1120 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52073 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c428: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1204 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52090 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c429: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1204 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52107 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c430: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1204 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52124 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c431: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1204 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52141 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c432: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52170 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c433: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52199 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c434: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52228 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c435: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52257 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c436: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52276 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c437: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c438: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52314 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c439: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52333 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c440: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c441: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52371 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c442: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52390 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c443: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c444: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52428 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c445: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52447 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c446: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52466 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c447: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52485 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c448: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52504 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c449: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c450: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52542 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c451: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c452: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52580 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c453: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52599 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c454: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52618 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c455: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52637 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c456: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52656 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c457: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c458: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52694 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c459: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c460: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52732 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c461: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52751 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c462: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52770 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c463: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c464: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52808 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c465: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c466: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52846 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c467: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c468: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52883 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c469: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52901 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c470: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52919 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c471: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52937 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c472: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c473: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52973 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c474: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 52991 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c475: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53009 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c476: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53027 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c477: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53045 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c478: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c479: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53081 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c480: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c481: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c482: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53135 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c483: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c484: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c485: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53189 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c486: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c487: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c488: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53243 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c489: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c490: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53279 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c491: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53297 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c492: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c493: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53333 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c494: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c495: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c496: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c497: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c498: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c499: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 53441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c500: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53460 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c501: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c502: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53498 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c503: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c504: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53536 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c505: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53555 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c506: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53574 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c507: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c508: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c509: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53631 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c510: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53650 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c511: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c512: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53688 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c513: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53707 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c514: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c515: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c516: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1545 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c517: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1545 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c518: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1545 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c519: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1545 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c520: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53852 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c521: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c522: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53890 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c523: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53909 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c524: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53928 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c525: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53947 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c526: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53966 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c527: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53985 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c528: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54004 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c529: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c530: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54042 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c531: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54061 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c532: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 380 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54079 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c533: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 380 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54097 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c534: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 380 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54115 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c535: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 380 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c536: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 374 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c537: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 374 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54169 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c538: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 374 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54187 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c539: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 374 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54205 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c540: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 320 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54223 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c541: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 320 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54241 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c542: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 320 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54259 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c543: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 320 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54277 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c544: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c545: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54313 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c546: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54331 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c547: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c548: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54368 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c549: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c550: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54406 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c551: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c552: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54444 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c553: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c554: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54482 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c555: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54501 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c556: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54520 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c557: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c558: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c559: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c560: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54596 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c561: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c562: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54634 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c563: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54653 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c564: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54672 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c565: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54691 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c566: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54710 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c567: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c568: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54748 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c569: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c570: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54786 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c571: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54805 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c572: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54824 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c573: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c574: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54862 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c575: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54881 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c576: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54900 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c577: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54919 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c578: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c579: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54957 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c580: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54976 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c581: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54995 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c582: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c583: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55033 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c584: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55052 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c585: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c586: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55090 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c587: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55109 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c588: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55128 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c589: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55147 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c590: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55166 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c591: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c592: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55204 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c593: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55223 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c594: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55242 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c595: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c596: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55280 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c597: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55299 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c598: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c599: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c600: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55356 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c601: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55375 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c602: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c603: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55413 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c604: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55431 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c605: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55449 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c606: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55467 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c607: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55485 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c608: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55503 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c609: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55521 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c610: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55540 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c611: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c612: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55578 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c613: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55597 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c614: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 55615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c615: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 55633 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c616: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 55651 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c617: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 55669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c618: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55700 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c619: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c620: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c621: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55793 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c622: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 769 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c623: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 769 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c624: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 769 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55844 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c625: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 769 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c626: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 763 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c627: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 763 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c628: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 763 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55912 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c629: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 763 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c630: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 757 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55946 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c631: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 757 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c632: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 757 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55980 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c633: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 757 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c634: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 751 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c635: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 751 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c636: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 751 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56048 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c637: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 751 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c638: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 745 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c639: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 745 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c640: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 745 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56116 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c641: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 745 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c642: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 739 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56150 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c643: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 739 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c644: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 739 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56184 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c645: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 739 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56201 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c646: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56218 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c647: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56235 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c648: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56252 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c649: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c650: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56286 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c651: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56303 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c652: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c653: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c654: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56354 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c655: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56371 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c656: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56388 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c657: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c658: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56422 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c659: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56439 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c660: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56456 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c661: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56473 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c662: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c663: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56507 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c664: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56524 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c665: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56541 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c666: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c667: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56575 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c668: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56592 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c669: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c670: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56626 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c671: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c672: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56660 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c673: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56677 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c674: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56694 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c675: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c676: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56728 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c677: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c678: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 766 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c679: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 766 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56779 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c680: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 766 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56796 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c681: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 766 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56813 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c682: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 760 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56830 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c683: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 760 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56847 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c684: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 760 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56864 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c685: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 760 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56881 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c686: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 754 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56898 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c687: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 754 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c688: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 754 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56932 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c689: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 754 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56949 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c690: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 748 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56966 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c691: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 748 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56983 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c692: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 748 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57000 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c693: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 748 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c694: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 742 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57034 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c695: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 742 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57051 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c696: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 742 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57068 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c697: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 742 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57085 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c698: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 736 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57102 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c699: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 736 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c700: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 736 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c701: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 736 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c702: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57170 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c703: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57187 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c704: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57204 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c705: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c706: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57238 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c707: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57255 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c708: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57272 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c709: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c710: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57306 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c711: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c712: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57340 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c713: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57357 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c714: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57374 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c715: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57391 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c716: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57408 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c717: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c718: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c719: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c720: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57476 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c721: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57493 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c722: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57510 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c723: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c724: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57544 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c725: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c726: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57578 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c727: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c728: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c729: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c730: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57647 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c731: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57665 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c732: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      nextPC = 8 + MATCH_p; 
      
#line 389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57683 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c733: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_48 & 0xff) /* i8 at 48 */;
      nextPC = 7 + MATCH_p; 
      
#line 389 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57701 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c734: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 906 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57718 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c735: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 906 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57735 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c736: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 906 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57752 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c737: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 906 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57769 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c738: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 915 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57786 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c739: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 915 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57803 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c740: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 915 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57820 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c741: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 915 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57837 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c742: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 924 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57854 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c743: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 924 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c744: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 924 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57888 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c745: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 924 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57905 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c746: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1168 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57922 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c747: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1168 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57939 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c748: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1168 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57956 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c749: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1168 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57973 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c750: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1192 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57990 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c751: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1192 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58007 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c752: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1192 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58024 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c753: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1192 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c754: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1177 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58061 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c755: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1177 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58081 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c756: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1177 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c757: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1177 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58121 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c758: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 58139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c759: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 58157 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c760: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 58175 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c761: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I32);


#line 58193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c762: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 900 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58210 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c763: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 900 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c764: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 900 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c765: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 900 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c766: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 909 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58278 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c767: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 909 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c768: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 909 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58312 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c769: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 909 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c770: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 918 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c771: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 918 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58363 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c772: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 918 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58380 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c773: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 918 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58397 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c774: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1162 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58414 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c775: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1162 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58431 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c776: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1162 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58448 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c777: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1162 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58465 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c778: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1186 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58482 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c779: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1186 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c780: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1186 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c781: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1186 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c782: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1171 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58550 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c783: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1171 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c784: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1171 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58584 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c785: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1171 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58601 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c786: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58619 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c787: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58637 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c788: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58655 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c789: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58673 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c790: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58691 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c791: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c792: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58727 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c793: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c794: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c795: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58781 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c796: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c797: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1449 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58817 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c798: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58835 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c799: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58853 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c800: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c801: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1419 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c802: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58906 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c803: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58923 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c804: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58940 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c805: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 425 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58957 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c806: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 58974 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c807: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 58991 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c808: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 401 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59008 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c809: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59025 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c810: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59042 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c811: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59059 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c812: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59076 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c813: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 371 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59093 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c814: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 371 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59110 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c815: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 371 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59127 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c816: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 371 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59144 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c817: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 368 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59161 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c818: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 368 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59178 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c819: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 368 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59195 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c820: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 368 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59212 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c821: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c822: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59248 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c823: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c824: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c825: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59300 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c826: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 452 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59317 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c827: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59334 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c828: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c829: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59368 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c830: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 422 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59385 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c831: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59402 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c832: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c833: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1085 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59436 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c834: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59454 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c835: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c836: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c837: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59508 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c838: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59526 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c839: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59544 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c840: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59562 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c841: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59580 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c842: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 301 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59604 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c843: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 301 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59628 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c844: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 301 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59652 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c845: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 301 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59676 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c846: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 298 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59693 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c847: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 298 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59710 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c848: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 298 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59727 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c849: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 298 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59744 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c850: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 295 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c851: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 295 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59778 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c852: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 295 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c853: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 295 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59812 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c854: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 292 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59829 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c855: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 292 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59846 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c856: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 292 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59863 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c857: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 292 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59880 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c858: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 289 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c859: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 289 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59914 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c860: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 289 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59931 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c861: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 289 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59948 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c862: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 286 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 59965 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c863: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 286 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 59982 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c864: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 286 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 59999 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c865: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 286 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 60016 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c866: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 283 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60033 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c867: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 283 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60050 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c868: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 283 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60067 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c869: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 283 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60084 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c870: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 280 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c871: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 280 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60118 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c872: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 280 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60135 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c873: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 280 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60152 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c874: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 271 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60175 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c875: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 271 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60198 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c876: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 271 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c877: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 271 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c878: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 268 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c879: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 268 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60278 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c880: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 268 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c881: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 268 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60312 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c882: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 265 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c883: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 265 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c884: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 265 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60363 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c885: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 265 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60380 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c886: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 262 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60397 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c887: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 262 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60414 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c888: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 262 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60431 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c889: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 262 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60448 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c890: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60466 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c891: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60484 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c892: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60502 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c893: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60520 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c894: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60538 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c895: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60556 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c896: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60574 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c897: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60592 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c898: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60611 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c899: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60630 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c900: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c901: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 440 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60668 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c902: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60687 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c903: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60706 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c904: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60725 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c905: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 446 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60744 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c906: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c907: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60780 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c908: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60798 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c909: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 428 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60816 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c910: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60834 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c911: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60852 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c912: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60870 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c913: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 434 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60888 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c914: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1156 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60906 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c915: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1156 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60924 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c916: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1156 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60942 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c917: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1156 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60960 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c918: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1234 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 60978 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c919: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1234 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 60996 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c920: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1234 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c921: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1234 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61032 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c922: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1228 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61050 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c923: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1228 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61068 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c924: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1228 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61086 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c925: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1228 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61104 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c926: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c927: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61140 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c928: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61158 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c929: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61176 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c930: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61194 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c931: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61212 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c932: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c933: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61248 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c934: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c935: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61284 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c936: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61302 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c937: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c938: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c939: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 930 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61356 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c940: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 930 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61374 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c941: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 930 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61392 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c942: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 930 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61410 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c943: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 927 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61428 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c944: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 927 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61446 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c945: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 927 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61464 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c946: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 927 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61482 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c947: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61501 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c948: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61520 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c949: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c950: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c951: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1289 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c952: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1289 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61596 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c953: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1289 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c954: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1289 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61634 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c955: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61653 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c956: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61672 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c957: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61691 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c958: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61710 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c959: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c960: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61748 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c961: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c962: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61786 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c963: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61804 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c964: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61822 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c965: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61840 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c966: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61858 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c967: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 61877 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c968: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 61896 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c969: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 61915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c970: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 61934 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c971: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 61953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c972: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 61972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c973: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 61991 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c974: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 62010 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c975: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 939 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62028 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c976: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 939 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62046 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c977: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 939 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62064 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c978: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 939 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c979: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 936 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c980: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 936 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62118 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c981: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 936 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c982: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 936 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c983: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 356 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62172 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c984: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 356 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c985: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 356 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62208 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c986: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 356 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62226 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c987: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 350 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c988: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 350 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62262 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c989: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 350 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62280 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c990: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 350 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c991: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1225 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c992: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1225 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62332 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c993: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1225 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c994: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62367 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c995: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62385 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c996: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c997: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c998: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62439 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c999: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1000: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1001: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62493 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1002: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1003: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62529 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1004: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62547 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1005: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1443 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62565 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1006: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62583 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1007: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62601 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1008: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62619 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1009: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1407 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62637 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1010: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62655 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1011: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62673 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1012: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62691 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1013: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1014: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1467 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62727 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1015: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1467 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1016: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1467 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1017: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1467 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62781 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1018: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1019: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62817 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1020: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62835 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1021: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1437 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62853 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1022: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1023: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1024: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62907 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1025: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1395 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62925 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1026: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62943 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1027: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62961 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1028: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62979 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1029: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1030: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1031: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63033 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1032: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63051 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1033: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1455 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63069 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1034: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63087 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1035: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63105 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1036: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1037: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1431 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63141 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1038: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1039: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63177 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1040: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63195 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1041: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1383 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63213 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1042: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1144 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I32);


#line 63232 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1043: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1144 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I32);


#line 63251 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1044: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 11 + MATCH_p; 
      
#line 1144 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I32);


#line 63270 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1045: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 10 + MATCH_p; 
      
#line 1144 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I32);


#line 63289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1046: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1150 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1047: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 4 + MATCH_p; 
      
#line 1150 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1048: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 8 + MATCH_p; 
      
#line 1150 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1049: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1150 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1050: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1051: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1052: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1053: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1054: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1055: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1056: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63495 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1057: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1058: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63531 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1059: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63549 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1060: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1061: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63585 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1062: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1063: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63621 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1064: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1065: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1066: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1067: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63693 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1068: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1069: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63728 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1070: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1071: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1072: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63779 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1073: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1738 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63796 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1074: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1738 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63813 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1075: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1738 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63830 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1076: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1932 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63847 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1077: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1932 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63864 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1078: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1932 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63881 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1079: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1771 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63898 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1080: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1771 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1081: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1771 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63932 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1082: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1783 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63949 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1083: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1783 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63966 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1084: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1783 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63983 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1085: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64000 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1086: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1087: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64034 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1088: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64051 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1089: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64068 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1090: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64085 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1091: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64102 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1092: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1093: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1816 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1094: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1837 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1095: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1837 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64170 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1096: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1837 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64187 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1097: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1888 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64204 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1098: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1888 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1099: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1888 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64238 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1100: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64255 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1101: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64272 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1102: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1103: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64306 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1104: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1105: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64340 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1106: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64357 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1107: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1929 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64374 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1108: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1929 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64391 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1109: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1929 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64408 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1110: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1929 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1111: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1926 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1112: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1926 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1113: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1926 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64476 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1114: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1926 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64493 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1115: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64510 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1116: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1117: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64544 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1118: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1119: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64578 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1120: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1121: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1122: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1123: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1753 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64646 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1124: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1753 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1125: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1753 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64680 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1126: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1753 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1127: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1947 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64714 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1128: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1947 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1129: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1947 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64748 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1130: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1947 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64765 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1131: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1777 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64782 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1132: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1777 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1133: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1777 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64816 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1134: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1777 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1135: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64850 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1136: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64867 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1137: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64884 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1138: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1795 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64901 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1139: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64918 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1140: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64935 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1141: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64952 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1142: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1143: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64986 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1144: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65003 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1145: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65020 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1146: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65037 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1147: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65054 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1148: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1149: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65088 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1150: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1831 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65105 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1151: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1152: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1153: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65156 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1154: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1849 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1155: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1156: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1157: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65224 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1158: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1864 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65241 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1159: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1876 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65258 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1160: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1876 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1161: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1876 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65292 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1162: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1876 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1163: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1882 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65326 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1164: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1882 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65343 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1165: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1882 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65360 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1166: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1882 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1167: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1894 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65399 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1168: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1894 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1169: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1894 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1170: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1894 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65465 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1171: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65482 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1172: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1173: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1174: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1175: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1741 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65550 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1176: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1741 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1177: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1741 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65584 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1178: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1741 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65601 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1179: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1935 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65618 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1180: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1935 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65635 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1181: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1935 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65652 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1182: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1935 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1183: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1774 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65686 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1184: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1774 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65703 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1185: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1774 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65720 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1186: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1774 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65737 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1187: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1786 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65754 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1188: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1786 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1189: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1786 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65788 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1190: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1786 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65805 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1191: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65822 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1192: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65839 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1193: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65856 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1194: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1195: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65890 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1196: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65907 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1197: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65924 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1198: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65941 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1199: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65958 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1200: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65975 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1201: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65992 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1202: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1819 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66009 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1203: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1840 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66026 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1204: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1840 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66043 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1205: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1840 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66060 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1206: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1840 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66077 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1207: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1891 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66094 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1208: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1891 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1209: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1891 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66128 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1210: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1891 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66145 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1211: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66162 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1212: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1213: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66196 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1214: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66213 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1215: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1216: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66247 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1217: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66264 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1218: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1219: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1220: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1221: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66332 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1222: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1223: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66366 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1224: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1225: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66400 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1226: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66417 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1227: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66434 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1228: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66451 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1229: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66468 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1230: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66485 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1231: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1756 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66502 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1232: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1756 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66519 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1233: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1756 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66536 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1234: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1756 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66553 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1235: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66570 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1236: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1237: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66604 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1238: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66621 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1239: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1780 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66638 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1240: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1780 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66655 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1241: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1780 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66672 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1242: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1780 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66689 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1243: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66706 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1244: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1245: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66740 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1246: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1798 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66757 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1247: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66774 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1248: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66791 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1249: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66808 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1250: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66825 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1251: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66842 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1252: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66859 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1253: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66876 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1254: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66893 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1255: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1834 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66910 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1256: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1834 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66927 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1257: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1834 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66944 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1258: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1834 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66961 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1259: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66978 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1260: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66995 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1261: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67012 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1262: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1852 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67029 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1263: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67046 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1264: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1265: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67080 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1266: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1861 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67097 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1267: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1873 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67114 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1268: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1873 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1269: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1873 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67148 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1270: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1873 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67165 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1271: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1879 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67182 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1272: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1879 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67199 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1273: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1879 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67216 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1274: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1879 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1275: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1759 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67250 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1276: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1759 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67267 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1277: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1759 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67284 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1278: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1759 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1279: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1280: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67335 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1281: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1282: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1867 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1283: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1762 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67386 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1284: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1762 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1285: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1762 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67420 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1286: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1762 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1287: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1885 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67454 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1288: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1885 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67471 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1289: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1885 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67488 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1290: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1885 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1291: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1123 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67540 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1292: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1123 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67575 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1293: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1123 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67610 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1294: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1123 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67645 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1295: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1207 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67662 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1296: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1207 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67679 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1297: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1207 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67696 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1298: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1207 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1299: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1117 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67730 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1300: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1117 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1301: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1117 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67764 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1302: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1117 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67781 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1303: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1201 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67798 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1304: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1201 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67815 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1305: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1201 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67832 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1306: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1201 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67849 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1307: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67874 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1308: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67899 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1309: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67924 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1310: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67949 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1311: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 135 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 67974 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1312: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 135 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 67999 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1313: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 135 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68024 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1314: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 135 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1315: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68066 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1316: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1317: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1318: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 828 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_finished_c: (void)0; /*placeholder for label*/
  
}
#line 68126 "pentiumdecoder.cpp"

#line 2100 "machine/pentium/decoder.m"

	if (result.valid && !result.rtl)
		result.rtl = new RTL(pc);  // FIXME:  Why return an empty RTL?
	result.numBytes = nextPC - pc;
	return result;
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. [1000] --> m[, 1000
 *
 * \param pc    The address of the Eaddr part of the instr.
 * \param expr  The expression that will be built.
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Mem(ADDRESS pc, const BinaryFile *bf)
{
	Exp *expr = nullptr;
	lastDwordLc = (unsigned)-1;


#line 68152 "pentiumdecoder.cpp"

#line 2122 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2122 "machine/pentium/decoder.m"
pc
#line 68160 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned MATCH_w_32_16;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    
      switch((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */) {
        case 0: 
          
            switch((MATCH_w_8_0 & 0x7) /* r_m at 0 */) {
              case 0: case 1: case 2: case 3: case 6: case 7: 
                { 
                  unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
                  
#line 2176 "machine/pentium/decoder.m"

		// m[ r[base] ]
		expr = Location::memOf(dis_Reg(24 + base));

#line 68183 "pentiumdecoder.cpp"

                  
                }
                
                break;
              case 4: 
                MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                if ((MATCH_w_8_8 & 0x7) /* base at 8 */ == 5) 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      
#line 2186 "machine/pentium/decoder.m"

		// [d] (Same as Abs32 using SIB)
		expr = Location::memOf(addReloc(new Const(d)));

#line 68202 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/
                  else { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      unsigned index = 
                        (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                      unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                      
#line 2179 "machine/pentium/decoder.m"

		// m[ r[index] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  new Binary(opMult,
		                                             dis_Reg(24 + index),
		                                             new Const(1 << ss)),
		                                  addReloc(new Const(d))));

#line 68225 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/ /*opt-block+*/
                else 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    
#line 2143 "machine/pentium/decoder.m"

		// m[ r[base] ]
		expr = Location::memOf(dis_Reg(24 + base));

#line 68240 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/
                  else { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    unsigned index = 
                      (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                    unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                    
#line 2136 "machine/pentium/decoder.m"

		// m[ r[base] + r[index] * ss]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opMult,
		                                             dis_Reg(24 + index),
		                                             new Const(1 << ss))));

#line 68259 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/ /*opt-block+*/
                
                break;
              case 5: 
                MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                { 
                  unsigned a = MATCH_w_32_8 /* i32 at 8 */;
                  
#line 2123 "machine/pentium/decoder.m"

		// [a]
		expr = Location::memOf(addReloc(new Const(a)));

#line 68275 "pentiumdecoder.cpp"

                  
                }
                
                break;
              default: assert(0);
            } /* (MATCH_w_8_0 & 0x7) -- r_m at 0 --*/ 
          break;
        case 1: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
                
#line 2169 "machine/pentium/decoder.m"

		// m[ r[ base] + d ]
		// Note: d should be sign extended; we do it here manually
		signed char ds8 = d;
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Const(ds8)));

#line 68302 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                int /* [~128..127] */ d = 
                  sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2160 "machine/pentium/decoder.m"

		// m[ r[ base ] + r[ index ] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opPlus,
		                                             new Binary(opMult,
		                                                        dis_Reg(24 + index),
		                                                        new Const(1 << ss)),
		                                             addReloc(new Const(d)))));

#line 68328 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            { 
              int /* [~128..127] */ d = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              
#line 2131 "machine/pentium/decoder.m"

		// m[ r[ r32] + d]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + r32),
		                                  addReloc(new Const(d))));

#line 68350 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 2: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                
#line 2155 "machine/pentium/decoder.m"

		// m[ r[ base] + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  addReloc(new Const(d))));

#line 68373 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2146 "machine/pentium/decoder.m"

		// m[ r[ base ] + r[ index ] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opPlus,
		                                             new Binary(opMult,
		                                                        dis_Reg(24 + index),
		                                                        new Const(1 << ss)),
		                                             addReloc(new Const(d)))));

#line 68398 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            { 
              unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              unsigned d = MATCH_w_32_8 /* i32 at 8 */;
              
#line 2126 "machine/pentium/decoder.m"

		// m[ r[ base] + d]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  addReloc(new Const(d))));

#line 68419 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 3: 
          assert(0);  /* no match */break;
        default: assert(0);
      } /* (MATCH_w_8_0 >> 6 & 0x3) -- mod at 0 --*/ 
    
  }goto MATCH_finished_b; 
  
  MATCH_finished_b: (void)0; /*placeholder for label*/
  
}
#line 68436 "pentiumdecoder.cpp"

#line 2190 "machine/pentium/decoder.m"
	return expr;
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. %ecx --> r[ 25 ]
 *
 * \param pc    The instruction stream address of the dynamic address.
 * \param size  Size of the operand (important if a register).
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Eaddr(ADDRESS pc, const BinaryFile *bf, int size)
{

#line 68455 "pentiumdecoder.cpp"

#line 2205 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2205 "machine/pentium/decoder.m"
pc
#line 68463 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */ == 3) { 
      unsigned reg = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
      
#line 2208 "machine/pentium/decoder.m"

		switch (size) {
		case  8: return DIS_REG8;
		case 16: return DIS_REG16;
		default:
		case 32: return DIS_REG32;
		}

#line 68481 "pentiumdecoder.cpp"

      
    } /*opt-block*//*opt-block+*/
    else 
      goto MATCH_label_a0;  /*opt-block+*/
    
  }goto MATCH_finished_a; 
  
  MATCH_label_a0: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = addressToPC(MATCH_p);
      
#line 2206 "machine/pentium/decoder.m"

		return DIS_MEM;

#line 68498 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_a; 
    
  MATCH_finished_a: (void)0; /*placeholder for label*/
  
}
#line 68507 "pentiumdecoder.cpp"

#line 2216 "machine/pentium/decoder.m"
}

#if 0 // Cruft?
/**
 * Check to see if the instructions at the given offset match any callee
 * prologue, i.e. does it look like this offset is a pointer to a function?
 *
 * \param hostPC  Pointer to the code in question (native address).
 * \returns       True if a match found.
 */
bool
PentiumDecoder::isFuncPrologue(ADDRESS hostPC)
{
#if 0
	int locals, regs;
	if (InstructionPatterns::frameless_pro(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::struct_ptr(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::std_entry(prog.csrSrc, hostPC, locals, regs))
		return true;
#endif
	return false;
}
#endif

/**
 * Generates statements for the BSF and BSR series (Bit Scan Forward/Reverse).
 *
 * \param pc        Native PC address (start of the BSF/BSR instruction).
 * \param dest      An expression for the destination register.
 * \param modrm     An expression for the operand being scanned.
 * \param init      Initial value for the dest register.
 * \param size      sizeof(modrm) (in bits).
 * \param incdec    Either opPlus for Forward scans,
 *                  or opMinus for Reverse scans.
 * \param numBytes  Number of bytes this instruction.
 *
 * \returns  true if have to exit early (not in last state).
 */
DecodeResult &
PentiumDecoder::genBSFR(ADDRESS pc, Exp *dest, Exp *modrm, int init, int size, OPER incdec, int numBytes)
{
	// Note the horrible hack needed here. We need initialisation code, and an extra branch, so the %SKIP/%RPT won't
	// work. We need to emit 6 statements, but these need to be in 3 RTLs, since the destination of a branch has to be
	// to the start of an RTL.  So we use a state machine, and set numBytes to 0 for the first two times. That way, this
	// instruction ends up emitting three RTLs, each with the semantics we need.
	// Note: we don't use pentium.SSL for these.
	// BSFR1:
	//  pc+0: *1* %ZF := 1
	//  pc+0: branch exit condition modrm = 0
	// BSFR2:
	//  pc+1: *1* %ZF := 0
	//  pc+1: dest := init
	// BSFR3:
	//  pc+2: dest := dest op 1
	//  pc+2: branch pc+2 condition modrm@[dest:dest] = 0
	// exit:

	auto stmts = std::list<Statement *>();
	Statement *s;
	BranchStatement *b;
	switch (BSFRstate) {
	case 0:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(1));
		stmts.push_back(s);
		b = new BranchStatement(pc + numBytes);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEqual,
		                          modrm->clone(),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	case 1:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(0));
		stmts.push_back(s);
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Const(init));
		stmts.push_back(s);
		break;
	case 2:
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Binary(incdec,
		                          dest->clone(),
		                          new Const(1)));
		stmts.push_back(s);
		b = new BranchStatement(pc + 2);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEqual,
		                          new Ternary(opAt,
		                                      modrm->clone(),
		                                      dest->clone(),
		                                      dest->clone()),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	default:
		// Should never happen
		assert(BSFRstate - BSFRstate);
	}
	result.rtl = new RTL(pc + BSFRstate);
	result.rtl->splice(stmts);
	// Keep numBytes == 0 until the last state, so we re-decode this instruction 3 times
	if (BSFRstate != 3 - 1) {
		// Let the number of bytes be 1. This is important at least for setting the fallthrough address for the branch
		// (in the first RTL), which should point to the next RTL
		result.numBytes = 1;
		result.reDecode = true;  // Decode this instruction again
	} else {
		result.numBytes = numBytes;
		result.reDecode = false;
	}
	if (DEBUG_DECODER)
		std::cout << std::hex << pc+BSFRstate << std::dec << ": "
		          << "BS" << (init == -1 ? "F" : "R") << (size == 32 ? ".od" : ".ow")
		          << BSFRstate + 1 << "\n";
	if (++BSFRstate == 3)
		BSFRstate = 0;  // Ready for next time
	return result;
}

Exp *
PentiumDecoder::addReloc(Exp *e)
{
	if (lastDwordLc != (unsigned)-1)
		e = prog->addReloc(e, lastDwordLc);
	return e;
}

#line 68645 "pentiumdecoder.cpp"

