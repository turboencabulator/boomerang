#define sign_extend(N,SIZE) (((int)((N) << (sizeof(unsigned)*8-(SIZE)))) >> (sizeof(unsigned)*8-(SIZE)))
#include <assert.h>

#line 1 "machine/pentium/decoder.m"
/**
 * \file
 * \brief Contains the high level decoding functionality, for example matching
 *        logues, calls, branches, etc.  Ordinary instructions are processed
 *        in decoder_low.m
 *
 * \authors
 * Copyright (C) 1998-2001, The University of Queensland
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "pentiumdecoder.h"

#include "boomerang.h"
#include "exp.h"
#include "prog.h"
#include "rtl.h"
#include "statement.h"

#include <cassert>

class Proc;

#define DIS_R8      (dis_Reg(r8  +  8))
#define DIS_R16     (dis_Reg(r16 +  0))
#define DIS_R32     (dis_Reg(r32 + 24))
#define DIS_REG8    (dis_Reg(reg +  8))
#define DIS_REG16   (dis_Reg(reg +  0))
#define DIS_REG32   (dis_Reg(reg + 24))
#define DIS_SR16    (dis_Reg(sr16 + 16))
#define DIS_IDX     (dis_Reg(idx + 32))
#define DIS_IDXP1   (dis_Reg((idx + 1) % 7 + 32))
#define DIS_BASE    (dis_Reg(base + 24))
#define DIS_INDEX   (new Binary(opMult, dis_Reg(index + 24), new Const(1 << ss)))

#define DIS_EADDR32 (dis_Eaddr(Eaddr, bf, 32))
#define DIS_EADDR16 (dis_Eaddr(Eaddr, bf, 16))
#define DIS_EADDR8  (dis_Eaddr(Eaddr, bf,  8))
#define DIS_MEM     (dis_Mem(Mem, bf))
#define DIS_MEM16   (dis_Mem(Mem16, bf))    // Probably needs changing
#define DIS_MEM32   (dis_Mem(Mem32, bf))    // Probably needs changing
#define DIS_MEM64   (dis_Mem(Mem64, bf))    // Probably needs changing
#define DIS_MEM80   (dis_Mem(Mem80, bf))    // Probably needs changing

#define DIS_I32     (new Const(i32))
#define DIS_I16     (new Const(i16))
#define DIS_I8      (new Const(i8))
#define DIS_COUNT   (new Const(count))
#define DIS_OFF     (new Const(off))

#define addressToPC(pc) (pc)
#define fetch8(pc)  bf->readNative1(pc)
#define fetch16(pc) bf->readNative2(pc)
#define fetch32(pc) (lastDwordLc = pc, bf->readNative4(pc))
#define addReloc(e) (prog->addReloc(e, lastDwordLc))

static RTL *
SETS(ADDRESS pc, const std::string &name, Exp *dest, BRANCH_TYPE cond)
{
	auto bs = new BoolAssign();
	bs->setLeft(dest);
	bs->setCondType(cond);
	SHOW_ASM(name << " " << *dest);
	return new RTL(pc, bs);
}

/**
 * Constructor.  The code won't work without this (not sure why the default
 * constructor won't do...)
 */
PentiumDecoder::PentiumDecoder(Prog *prog) :
	NJMCDecoder(prog)
{
	std::string file = Boomerang::get().getProgPath() + "frontend/machine/pentium/pentium.ssl";
	RTLDict.readSSLFile(file);
}

#if 0 // Cruft?
// For now...
int
PentiumDecoder::decodeAssemblyInstruction(ADDRESS, ptrdiff_t)
{
	return 0;
}
#endif

void
PentiumDecoder::decodeInstruction(DecodeResult &result, ADDRESS pc, const BinaryFile *bf)
{
	// Clear the result structure;
	result.reset();

	ADDRESS lastDwordLc = NO_ADDRESS;
	ADDRESS nextPC = NO_ADDRESS;


#line 109 "pentiumdecoder.cpp"

#line 103 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 103 "machine/pentium/decoder.m"
pc
#line 117 "pentiumdecoder.cpp"
;
  const char *MATCH_name;
  static const char *MATCH_name_r_m_0[] = {
    "ADDmrb", "ADDmrb", "ADDmrb", "ADDmrb", "FTST", "ADDmrb", "ADDmrb", 
    "ADDmrb", 
  };
  static const char *MATCH_name_r_m_3[] = {
    "ADDmrod", "ADDmrod", "ADDmrod", "ADDmrod", "FLDLG2", "ADDmrod", 
    "ADDmrod", "ADDmrod", 
  };
  static const char *MATCH_name_r_m_6[] = {
    "ADDrmb", "ADDrmb", "ADDrmb", "ADDrmb", "FXTRACT", "ADDrmb", "ADDrmb", 
    "ADDrmb", 
  };
  static const char *MATCH_name_r_m_9[] = {
    "ADDrmod", "ADDrmod", "ADDrmod", "ADDrmod", "FRNDINT", "ADDrmod", 
    "ADDrmod", "ADDrmod", 
  };
  static const char *MATCH_name_col_12[] = {
    "Jb.O", "Jb.NO", "Jb.B", "Jb.NB", "ADDiAL", "ADDiEAX", "PUSH.ES", 
    "POP.ES", 
  };
  static const char *MATCH_name_col_25[] = {
    "NOP", "MOV.eAX.Ovod", "MOV.Ob.AL", "MOV.Ov.eAXod", "ADCiAL", "ADCiEAX", 
    "PUSH.SS", "POP.SS", 
  };
  static const char *MATCH_name_col_38[] = {
    "MOV.AL.Ob", "LOOPE", "RET.Iw", "RET", "ANDiAL", "ANDiEAX", "SEG.ES", 
    "DAA", 
  };
  static const char *MATCH_name_col_51[] = {
    "LOOPNE", "Jb.NS", "LOOP", "Jb.NP", "XORiAL", "XORiEAX", "SEG.SS", 
    "Jb.NBE", 
  };
  static const char *MATCH_name_row_52[] = {
    NULL, NULL, NULL, NULL, "INCod", "PUSHod", NULL, NULL, NULL, NULL, NULL, 
    "MOVib", 
  };
  static const char *MATCH_name_col_53[] = {
    "PUSH.Ivod", "CDQ", "PUSH.Ibod", "WAIT", "SEG.FS", "SEG.GS", "Jb.BE", 
    "CMPSvod", 
  };
  static const char *MATCH_name_page_66[] = {"ADDiAX", "ORiAX", };
  static const char *MATCH_name_col_73[] = {
    "Jv.Oow", "Jv.NOow", "Jv.Bow", "Jv.NBow", "Jv.Zow", "Jv.NZow", "Jv.BEow", 
    "Jv.NBEow", 
  };
  static const char *MATCH_name_col_74[] = {
    "Jv.Sow", "Jv.NSow", "Jv.Pow", "Jv.NPow", "Jv.Low", "Jv.NLow", "Jv.LEow", 
    "Jv.NLEow", 
  };
  static const char *MATCH_name_page_138[] = {"ADCiAX", "SBBiAX", };
  static const char *MATCH_name_page_151[] = {"ANDiAX", "SUBiAX", };
  static const char *MATCH_name_page_164[] = {"XORiAX", "CMPiAX", };
  static const char *MATCH_name_page_165[] = {"INCow", "DECow", };
  static const char *MATCH_name_page_166[] = {"PUSHow", "POPow", };
  static const char *MATCH_name_col_167[] = {
    "PUSH.Ivow", "CWD", "PUSH.Ibow", "Jv.NBod", "Jv.Zod", "Jv.NZod", 
    "Jv.BEod", "Jv.NBEod", 
  };
  static const char *MATCH_name_page_239[] = {"XCHGeAXow", "TEST.eAX.Ivow", };
  static const char *MATCH_name_col_240[] = {
    "CBW", "Jv.NOod", "Jv.Bod", "Jv.NPod", "Jv.Lod", "Jv.NLod", "Jv.LEod", 
    "Jv.NLEod", 
  };
  static const char *MATCH_name_page_241[] = {"MOV.eAX.Ovow", "STOSvow", };
  static const char *MATCH_name_page_242[] = {"MOV.Ov.eAXow", "LODSvow", };
  static const char *MATCH_name_page_243[] = {"MOVSvow", "SCASvow", };
  static const char *MATCH_name_page_244[] = {"CMPSvow", "MOViw", };
  static const char *MATCH_name_page_311[] = {"REPNE.MOVSB", "JMP.Jvow", };
  static const char *MATCH_name_col_342[] = {
    "Jb.S", "TEST.eAX.Ivod", "Jb.P", "STOSvod", "Jb.Z", "Jb.NZ", "CMPSB", 
    "XLATB", 
  };
  static const char *MATCH_name_col_427[] = {
    "CWDE", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", "XCHGeAXod", 
    "XCHGeAXod", "XCHGeAXod", 
  };
  static const char *MATCH_name_col_428[] = {
    "TEST.AL.Ib", "LEAVE", "CALL.aPod", "RET.far", "MOVSB", "MOVSvod", 
    "PUSH.CS", "POP.DS", 
  };
  static const char *MATCH_name_page_565[] = {
    "REPNE.MOVSvow", "REPNE.STOSvow", 
  };
  static const char *MATCH_name_page_566[] = {
    "REPNE.CMPSvow", "REPNE.LODSvow", 
  };
  static const char *MATCH_name_page_567[] = {
    "REP.MOVSvow", "REPNE.SCASvow", 
  };
  static const char *MATCH_name_page_568[] = {
    "REPNE.MOVSvod", "REPNE.STOSB", 
  };
  static const char *MATCH_name_page_569[] = {
    "REPNE.CMPSB", "REPNE.STOSvod", 
  };
  static const char *MATCH_name_page_570[] = {
    "REPNE.CMPSvod", "REPNE.LODSB", 
  };
  static const char *MATCH_name_page_571[] = {"REP.MOVSB", "REPNE.LODSvod", };
  static const char *MATCH_name_page_572[] = {"REP.MOVSvod", "REPNE.SCASB", };
  static const char *MATCH_name_page_573[] = {"REP.CMPSB", "REPNE.SCASvod", };
  static const char *MATCH_name_page_574[] = {"REP.CMPSvow", "REP.STOSvow", };
  static const char *MATCH_name_page_577[] = {"REP.CMPSvod", "REP.STOSB", };
  static const char *MATCH_name_page_578[] = {"CLTS", "REP.STOSvod", };
  static const char *MATCH_name_page_579[] = {"WRMSR", "REP.LODSB", };
  static const char *MATCH_name_page_580[] = {"RDMSR", "REP.LODSvod", };
  static const char *MATCH_name_page_581[] = {"PUSH.FS", "REP.SCASB", };
  static const char *MATCH_name_page_582[] = {"POP.FS", "REP.SCASvod", };
  static const char *MATCH_name_col_583[] = {
    "ENTER", "JMP.Jvod", "STOSB", "JMP.Jb", "ORiAL", "CMC", "PUSH.DS", "DAS", 
  };
  static const char *MATCH_name_col_638[] = {
    "CALL.Jvod", "STC", "RET.far.Iw", "STI", "SBBiAL", "ORiEAX", "SEG.CS", 
    "Jb.NLE", 
  };
  static const char *MATCH_name_page_653[] = {"CPUID", "INVD", };
  static const char *MATCH_name_col_670[] = {"Jv.Ood", "Jv.NSod", "Jv.Pod", };
  static const char *MATCH_name_col_795[] = {
    "CLC", NULL, "CLI", NULL, "SUBiAL", "SBBiEAX", "SEG.DS", "LAHF", 
  };
  static const char *MATCH_name_col_808[] = {
    NULL, NULL, NULL, NULL, "CMPiAL", "SUBiEAX", "Jb.LE", "SCASvod", 
  };
  static const char *MATCH_name_col_821[] = {
    NULL, NULL, NULL, NULL, "Jb.L", "CMPiEAX", "SAHF", "IRET", 
  };
  static const char *MATCH_name_row_822[] = {
    NULL, NULL, NULL, NULL, "DECod", "POPod", NULL, NULL, NULL, NULL, NULL, 
    "MOVid", 
  };
  static const char *MATCH_name_col_829[] = {
    NULL, NULL, NULL, NULL, "LODSB", "Jb.NL", "SCASB", 
  };
  static const char *MATCH_name_col_847[] = {
    NULL, NULL, NULL, NULL, "CLD", "LODSvod", "INTO", 
  };
  static const char *MATCH_name_r_m_879[] = {
    "FNOP", "FABS", "FLDL2E", "FLDPI", NULL, "FSTP.lsR32", "FSTP.lsR32", 
    "FSTP.lsR32", 
  };
  static const char *MATCH_name_r_m_880[] = {
    "FSTP.lsR32", "FSTP.lsR32", "FSTP.lsR32", "FSTP.lsR32", NULL, "FLDENV", 
    "FLDENV", "FLDENV", 
  };
  static const char *MATCH_name_r_m_882[] = {
    "FLDENV", "FLDENV", "FLDENV", "FLDENV", NULL, "FXAM", "FLDCW", "FLDCW", 
  };
  static const char *MATCH_name_r_m_884[] = {
    "FCHS", "FLDL2T", "FPTAN", "FPATAN", NULL, "FLDCW", "FLDCW", "FLDCW", 
  };
  static const char *MATCH_name_r_m_885[] = {
    "FLDCW", "FLDCW", "FLDCW", "FLDCW", NULL, "FLDLN2", "FLDZ", "FCOS", 
  };
  static const char *MATCH_name_r_m_887[] = {
    "FLD1", "FYL2X", "FSQRT", "FSINCOS", NULL, "FSTENV", "FSTENV", "FSTENV", 
  };
  static const char *MATCH_name_r_m_888[] = {
    "FSTENV", "FSTENV", "FSTENV", "FSTENV", NULL, "FPREM1", "FDECSTP", 
  };
  static const char *MATCH_name_r_m_890[] = {
    "F2XM1", "FYL2XP1", NULL, NULL, NULL, "FSTCW", "FSTCW", "FSTCW", 
  };
  static const char *MATCH_name_r_m_891[] = {
    "FSTCW", "FSTCW", "FSTCW", "FSTCW", NULL, "FSCALE", "FSIN", 
  };
  static const char *MATCH_name_r_m_893[] = {
    "FPREM", "FUCOMPP", NULL, NULL, NULL, "FIADD.I32", "FIADD.I32", 
    "FIADD.I32", 
  };
  static const char *MATCH_name_r_m_894[] = {
    "FIADD.I32", "FIADD.I32", "FIADD.I32", "FIADD.I32", NULL, "FIMUL.I32", 
    "FIMUL.I32", "FIMUL.I32", 
  };
  static const char *MATCH_name_r_m_896[] = {
    "FIMUL.I32", "FIMUL.I32", "FIMUL.I32", "FIMUL.I32", NULL, "FICOM.I32", 
    "FICOM.I32", "FICOM.I32", 
  };
  static const char *MATCH_name_r_m_898[] = {
    "FICOM.I32", "FICOM.I32", "FICOM.I32", "FICOM.I32", NULL, "FICOMP.I32", 
    "FICOMP.I32", "FICOMP.I32", 
  };
  static const char *MATCH_name_r_m_900[] = {
    "FICOMP.I32", "FICOMP.I32", "FICOMP.I32", "FICOMP.I32", NULL, 
    "FISUB.I32", "FISUB.I32", "FISUB.I32", 
  };
  static const char *MATCH_name_r_m_902[] = {
    "FISUB.I32", "FISUB.I32", "FISUB.I32", "FISUB.I32", NULL, "FISUBR.I32", 
    "FISUBR.I32", "FISUBR.I32", 
  };
  static const char *MATCH_name_r_m_904[] = {
    "FISUBR.I32", "FISUBR.I32", "FISUBR.I32", "FISUBR.I32", NULL, 
    "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", 
  };
  static const char *MATCH_name_r_m_906[] = {
    "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", "FIDIV.I32", NULL, "FIDIVR.I32", 
    "FIDIVR.I32", "FIDIVR.I32", 
  };
  static const char *MATCH_name_r_m_908[] = {
    "FIDIVR.I32", "FIDIVR.I32", "FIDIVR.I32", "FIDIVR.I32", NULL, 
    "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", 
  };
  static const char *MATCH_name_r_m_910[] = {
    "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", "FILD.lsI32", NULL, 
    "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", 
  };
  static const char *MATCH_name_r_m_912[] = {
    "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", "FIST.lsI32", NULL, 
    "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", 
  };
  static const char *MATCH_name_r_m_914[] = {
    "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", "FISTP.lsI32", NULL, 
    "FLD80", "FLD80", "FLD80", 
  };
  static const char *MATCH_name_r_m_918[] = {
    "FLD80", "FLD80", "FLD80", "FLD80", NULL, "FSTP80", "FSTP80", "FSTP80", 
  };
  static const char *MATCH_name_r_m_922[] = {
    "FSTP80", "FSTP80", "FSTP80", "FSTP80", NULL, "FADD.R64", "FADD.R64", 
    "FADD.R64", 
  };
  static const char *MATCH_name_r_m_924[] = {
    "FADD.R64", "FADD.R64", "FADD.R64", "FADD.R64", NULL, "FMUL.R64", 
    "FMUL.R64", "FMUL.R64", 
  };
  static const char *MATCH_name_r_m_927[] = {
    "FMUL.R64", "FMUL.R64", "FMUL.R64", "FMUL.R64", NULL, "FCOM.R64", 
    "FCOM.R64", "FCOM.R64", 
  };
  static const char *MATCH_name_r_m_930[] = {
    "FCOM.R64", "FCOM.R64", "FCOM.R64", "FCOM.R64", NULL, "FCOMP.R64", 
    "FCOMP.R64", "FCOMP.R64", 
  };
  static const char *MATCH_name_r_m_932[] = {
    "FCOMP.R64", "FCOMP.R64", "FCOMP.R64", "FCOMP.R64", NULL, "FSUB.R64", 
    "FSUB.R64", "FSUB.R64", 
  };
  static const char *MATCH_name_r_m_934[] = {
    "FSUB.R64", "FSUB.R64", "FSUB.R64", "FSUB.R64", NULL, "FSUBR.R64", 
    "FSUBR.R64", "FSUBR.R64", 
  };
  static const char *MATCH_name_r_m_937[] = {
    "FSUBR.R64", "FSUBR.R64", "FSUBR.R64", "FSUBR.R64", NULL, "FDIV.R64", 
    "FDIV.R64", "FDIV.R64", 
  };
  static const char *MATCH_name_r_m_940[] = {
    "FDIV.R64", "FDIV.R64", "FDIV.R64", "FDIV.R64", NULL, "FDIVR.R64", 
    "FDIVR.R64", "FDIVR.R64", 
  };
  static const char *MATCH_name_r_m_943[] = {
    "FDIVR.R64", "FDIVR.R64", "FDIVR.R64", "FDIVR.R64", NULL, "FLD.lsR64", 
    "FLD.lsR64", "FLD.lsR64", 
  };
  static const char *MATCH_name_r_m_946[] = {
    "FLD.lsR64", "FLD.lsR64", "FLD.lsR64", "FLD.lsR64", NULL, "FST.lsR64", 
    "FST.lsR64", "FST.lsR64", 
  };
  static const char *MATCH_name_r_m_949[] = {
    "FST.lsR64", "FST.lsR64", "FST.lsR64", "FST.lsR64", NULL, "FSTP.lsR64", 
    "FSTP.lsR64", "FSTP.lsR64", 
  };
  static const char *MATCH_name_r_m_952[] = {
    "FSTP.lsR64", "FSTP.lsR64", "FSTP.lsR64", "FSTP.lsR64", NULL, "FRSTOR", 
    "FRSTOR", "FRSTOR", 
  };
  static const char *MATCH_name_r_m_955[] = {
    "FRSTOR", "FRSTOR", "FRSTOR", "FRSTOR", NULL, "FNSAVE", "FNSAVE", 
    "FNSAVE", 
  };
  static const char *MATCH_name_r_m_959[] = {
    "FNSAVE", "FNSAVE", "FNSAVE", "FNSAVE", NULL, "FSTSW", "FSTSW", "FSTSW", 
  };
  static const char *MATCH_name_r_m_961[] = {
    "FSTSW", "FSTSW", "FSTSW", "FSTSW", NULL, "FIADD.I16", "FIADD.I16", 
    "FIADD.I16", 
  };
  static const char *MATCH_name_r_m_963[] = {
    "FIADD.I16", "FIADD.I16", "FIADD.I16", "FIADD.I16", NULL, "FIMUL.I16", 
    "FIMUL.I16", "FIMUL.I16", 
  };
  static const char *MATCH_name_r_m_966[] = {
    "FIMUL.I16", "FIMUL.I16", "FIMUL.I16", "FIMUL.I16", NULL, "FICOM.I16", 
    "FICOM.I16", "FICOM.I16", 
  };
  static const char *MATCH_name_r_m_969[] = {
    "FICOM.I16", "FICOM.I16", "FICOM.I16", "FICOM.I16", NULL, "FICOMP.I16", 
    "FICOMP.I16", "FICOMP.I16", 
  };
  static const char *MATCH_name_r_m_971[] = {
    "FICOMP.I16", "FICOMP.I16", "FICOMP.I16", "FICOMP.I16", NULL, 
    "FISUB.I16", "FISUB.I16", "FISUB.I16", 
  };
  static const char *MATCH_name_r_m_973[] = {
    "FSTSW.AX", "FCOMPP", NULL, NULL, NULL, "FISUBR.I16", "FISUBR.I16", 
    "FISUBR.I16", 
  };
  static const char *MATCH_name_r_m_974[] = {
    "FISUB.I16", "FISUB.I16", "FISUB.I16", "FISUB.I16", NULL, "FIDIV.I16", 
    "FIDIV.I16", "FIDIV.I16", 
  };
  static const char *MATCH_name_r_m_977[] = {
    "FISUBR.I16", "FISUBR.I16", "FISUBR.I16", "FISUBR.I16", NULL, 
    "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", 
  };
  static const char *MATCH_name_r_m_980[] = {
    "FIDIV.I16", "FIDIV.I16", "FIDIV.I16", "FIDIV.I16", NULL, "FILD.lsI16", 
    "FILD.lsI16", "FILD.lsI16", 
  };
  static const char *MATCH_name_r_m_983[] = {
    "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", "FIDIVR.I16", NULL, 
    "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", 
  };
  static const char *MATCH_name_r_m_986[] = {
    "FILD.lsI16", "FILD.lsI16", "FILD.lsI16", "FILD.lsI16", NULL, 
    "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", 
  };
  static const char *MATCH_name_r_m_988[] = {
    "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", "FIST.lsI16", NULL, "FBLD", 
    "FBLD", "FBLD", 
  };
  static const char *MATCH_name_r_m_990[] = {
    "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", "FISTP.lsI16", NULL, 
    "FILD64", "FILD64", "FILD64", 
  };
  static const char *MATCH_name_r_m_992[] = {
    "FBLD", "FBLD", "FBLD", "FBLD", NULL, "FBSTP", "FBSTP", "FBSTP", 
  };
  static const char *MATCH_name_r_m_994[] = {
    "FILD64", "FILD64", "FILD64", "FILD64", NULL, "FISTP64", "FISTP64", 
    "FISTP64", 
  };
  static const char *MATCH_name_r_m_997[] = {
    "FBSTP", "FBSTP", "FBSTP", "FBSTP", NULL, "INC.Eb", "INC.Eb", "INC.Eb", 
  };
  static const char *MATCH_name_r_m_1000[] = {
    "FISTP64", "FISTP64", "FISTP64", "FISTP64", NULL, "DEC.Eb", "DEC.Eb", 
    "DEC.Eb", 
  };
  static const char *MATCH_name_r_m_1003[] = {
    "INC.Eb", "INC.Eb", "INC.Eb", "INC.Eb", NULL, "INC.Evod", "INC.Evod", 
    "INC.Evod", 
  };
  static const char *MATCH_name_r_m_1006[] = {
    "DEC.Eb", "DEC.Eb", "DEC.Eb", "DEC.Eb", NULL, "DEC.Evod", "DEC.Evod", 
    "DEC.Evod", 
  };
  static const char *MATCH_name_r_m_1009[] = {
    "INC.Evod", "INC.Evod", "INC.Evod", "INC.Evod", NULL, "CALL.Evod", 
    "CALL.Evod", "CALL.Evod", 
  };
  static const char *MATCH_name_r_m_1012[] = {
    "DEC.Evod", "DEC.Evod", "DEC.Evod", "DEC.Evod", NULL, "PUSH.Evod", 
    "PUSH.Evod", "PUSH.Evod", 
  };
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned /* [0..65535] */ MATCH_w_16_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned /* [0..65535] */ MATCH_w_16_16;
  unsigned MATCH_w_32_16;
  unsigned /* [0..255] */ MATCH_w_8_24;
  unsigned /* [0..65535] */ MATCH_w_16_24;
  unsigned MATCH_w_32_24;
  unsigned /* [0..255] */ MATCH_w_8_32;
  unsigned /* [0..65535] */ MATCH_w_16_32;
  unsigned MATCH_w_32_32;
  unsigned /* [0..255] */ MATCH_w_8_40;
  unsigned /* [0..65535] */ MATCH_w_16_40;
  unsigned /* [0..255] */ MATCH_w_8_48;
  unsigned MATCH_w_32_48;
  unsigned /* [0..255] */ MATCH_w_8_56;
  unsigned /* [0..65535] */ MATCH_w_16_56;
  unsigned MATCH_w_32_56;
  unsigned /* [0..255] */ MATCH_w_8_64;
  unsigned /* [0..65535] */ MATCH_w_16_64;
  unsigned /* [0..255] */ MATCH_w_8_72;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 3 & 0x1) /* page at 0 */ == 1) 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORmrb"; 
                              goto MATCH_label_c786; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORmrb"; 
                                goto MATCH_label_c788; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORmrb"; 
                                goto MATCH_label_c787; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORmrb"; 
                              goto MATCH_label_c789; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 562 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c787; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c788; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrb"; 
                          goto MATCH_label_c789; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORmrb"; goto MATCH_label_c786; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORmrod"; 
                              goto MATCH_label_c790; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORmrod"; 
                                goto MATCH_label_c792; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORmrod"; 
                                goto MATCH_label_c791; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORmrod"; 
                              goto MATCH_label_c793; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 656 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c791; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c792; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORmrod"; 
                          goto MATCH_label_c793; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORmrod"; goto MATCH_label_c790; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORrmb"; 
                              goto MATCH_label_c794; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORrmb"; 
                                goto MATCH_label_c796; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORrmb"; 
                                goto MATCH_label_c795; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORrmb"; 
                              goto MATCH_label_c797; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 750 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c795; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c796; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmb"; 
                          goto MATCH_label_c797; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORrmb"; goto MATCH_label_c794; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ORrmod"; 
                              goto MATCH_label_c798; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ORrmod"; 
                                goto MATCH_label_c800; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ORrmod"; 
                                goto MATCH_label_c799; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ORrmod"; 
                              goto MATCH_label_c801; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 844 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c799; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c800; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ORrmod"; 
                          goto MATCH_label_c801; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ORrmod"; goto MATCH_label_c798; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 895 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 915 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 787 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 933 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_653[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1068 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 961 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SLDT"; 
                                                  goto MATCH_label_c802; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SLDT"; 
                                                    goto MATCH_label_c804; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SLDT"; 
                                                    goto MATCH_label_c803; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SLDT"; 
                                                  goto MATCH_label_c805; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SLDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1036 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c803; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c804; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SLDT"; 
                                              goto MATCH_label_c805; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SLDT"; 
                                            goto MATCH_label_c802; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "STR"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1102 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "STR"; 
                                                    goto MATCH_label_c807; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "STR"; 
                                                    goto MATCH_label_c806; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "STR"; 
                                                  goto MATCH_label_c808; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "STR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1158 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c806; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c807; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "STR"; 
                                              goto MATCH_label_c808; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 6: case 7: 
                                      goto MATCH_label_c64; break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "LTR"; 
                                                  goto MATCH_label_c809; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "LTR"; 
                                                    goto MATCH_label_c811; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "LTR"; 
                                                    goto MATCH_label_c810; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "LTR"; 
                                                  goto MATCH_label_c812; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LTR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 1010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1263 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c810; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c811; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LTR"; 
                                              goto MATCH_label_c812; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "LTR"; 
                                            goto MATCH_label_c809; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "VERR"; 
                                                  goto MATCH_label_c813; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "VERR"; 
                                                    goto MATCH_label_c815; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "VERR"; 
                                                    goto MATCH_label_c814; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "VERR"; 
                                                  goto MATCH_label_c816; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERR"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1369 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c814; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c815; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERR"; 
                                              goto MATCH_label_c816; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "VERR"; 
                                            goto MATCH_label_c813; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "VERW"; 
                                                  goto MATCH_label_c817; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "VERW"; 
                                                    goto MATCH_label_c819; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "VERW"; 
                                                    goto MATCH_label_c818; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "VERW"; 
                                                  goto MATCH_label_c820; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERW"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1475 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c818; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c819; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "VERW"; 
                                              goto MATCH_label_c820; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "VERW"; 
                                            goto MATCH_label_c817; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "WBINVD"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 342 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 1536 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SGDT"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 1572 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SGDT"; 
                                                    goto MATCH_label_c822; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SGDT"; 
                                                    goto MATCH_label_c821; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SGDT"; 
                                                  goto MATCH_label_c823; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SGDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 1629 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c821; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c822; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SGDT"; 
                                              goto MATCH_label_c823; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SIDT"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1692 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SIDT"; 
                                                    goto MATCH_label_c825; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SIDT"; 
                                                    goto MATCH_label_c824; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SIDT"; 
                                                  goto MATCH_label_c826; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SIDT"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1748 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c824; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c825; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SIDT"; 
                                              goto MATCH_label_c826; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 3: case 5: case 6: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SMSW"; 
                                                  goto MATCH_label_c827; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "SMSW"; 
                                                    goto MATCH_label_c829; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "SMSW"; 
                                                    goto MATCH_label_c828; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SMSW"; 
                                                  goto MATCH_label_c830; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SMSW"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 1853 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c828; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c829; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SMSW"; 
                                              goto MATCH_label_c830; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SMSW"; 
                                            goto MATCH_label_c827; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "INVLPG"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 1065 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1919 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = "INVLPG"; 
                                                    goto MATCH_label_c832; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = "INVLPG"; 
                                                    goto MATCH_label_c831; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "INVLPG"; 
                                                  goto MATCH_label_c833; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "INVLPG"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 1065 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 1975 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c831; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c832; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "INVLPG"; 
                                              goto MATCH_label_c833; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LARod"; 
                                            goto MATCH_label_c834; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LARod"; 
                                              goto MATCH_label_c836; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LARod"; 
                                              goto MATCH_label_c835; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LARod"; 
                                            goto MATCH_label_c837; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LARod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 2091 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c835; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c836; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LARod"; 
                                        goto MATCH_label_c837; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "LARod"; 
                                      goto MATCH_label_c834; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LSLod"; 
                                            goto MATCH_label_c838; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LSLod"; 
                                              goto MATCH_label_c840; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LSLod"; 
                                              goto MATCH_label_c839; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LSLod"; 
                                            goto MATCH_label_c841; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 2205 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c839; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c840; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSLod"; 
                                        goto MATCH_label_c841; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "LSLod"; 
                                      goto MATCH_label_c838; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: case 5: case 7: 
                              goto MATCH_label_c64; break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_578[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2265 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: case 2: case 4: case 5: case 6: case 7: 
                      case 13: case 14: case 15: 
                        goto MATCH_label_c64; break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_579[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 339 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2299 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 1: case 3: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_page_580[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 2326 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 8: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = "Jv.Sod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 223 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 2357 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_670[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 221 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 2379 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_670[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 219 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 2401 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 217 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 2423 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 215 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 2445 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 213 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 2467 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 211 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 2489 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 209 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 2511 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_670[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 239 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);


#line 2539 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 237 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 2561 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 235 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 2583 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 233 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 2605 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 231 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 2627 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 229 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 2649 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 227 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 2671 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 225 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 2693 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c866; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c868; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c867; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c869; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 263 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 2770 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c867; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c868; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c869; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.S"; 
                                      goto MATCH_label_c866; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c870; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c872; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c871; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c873; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 260 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 2876 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c871; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c872; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c873; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NS"; 
                                      goto MATCH_label_c870; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: 
                                goto MATCH_label_c64; break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c874; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c876; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c875; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c877; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 251 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 2990 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c875; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c876; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c877; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.L"; 
                                      goto MATCH_label_c874; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c878; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c880; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c879; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c881; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 248 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 3096 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c879; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c880; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c881; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NL"; 
                                      goto MATCH_label_c878; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c882; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c884; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c883; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c885; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 245 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 3202 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c883; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c884; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c885; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.LE"; 
                                      goto MATCH_label_c882; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c886; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c888; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c887; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c889; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 242 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 3308 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c887; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c888; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c889; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NLE"; 
                                      goto MATCH_label_c886; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c842; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c844; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c843; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c845; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 281 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 3428 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c843; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c844; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c845; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.B"; 
                                      goto MATCH_label_c842; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c846; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c848; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c847; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c849; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 278 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 3534 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c847; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c848; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c849; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NB"; 
                                      goto MATCH_label_c846; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c850; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c852; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c851; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c853; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 275 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 3640 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c851; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c852; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c853; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.Z"; 
                                      goto MATCH_label_c850; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c854; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c856; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c855; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c857; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 272 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 3746 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c855; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c856; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c857; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NZ"; 
                                      goto MATCH_label_c854; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c858; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c860; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c859; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c861; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 269 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 3852 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c859; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c860; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c861; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.BE"; 
                                      goto MATCH_label_c858; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c862; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c864; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c863; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c865; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 266 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 3958 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c863; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c864; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c865; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NBE"; 
                                      goto MATCH_label_c862; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "PUSH.GS"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 772 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4019 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_581[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 775 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4038 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "POP.GS"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 826 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4059 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_582[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 829 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4078 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "RSM"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4099 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_653[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1202 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 4118 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTSod"; 
                                            goto MATCH_label_c894; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTSod"; 
                                              goto MATCH_label_c896; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTSod"; 
                                              goto MATCH_label_c895; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTSod"; 
                                            goto MATCH_label_c897; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTSod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4195 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c895; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c896; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTSod"; 
                                        goto MATCH_label_c897; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTSod"; 
                                      goto MATCH_label_c894; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTod"; 
                                            goto MATCH_label_c890; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTod"; 
                                              goto MATCH_label_c892; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTod"; 
                                              goto MATCH_label_c891; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTod"; 
                                            goto MATCH_label_c893; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1308 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4304 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c891; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c892; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTod"; 
                                        goto MATCH_label_c893; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTod"; 
                                      goto MATCH_label_c890; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHRD.Ibod"; 
                                            goto MATCH_label_c902; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHRD.Ibod"; 
                                              goto MATCH_label_c904; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHRD.Ibod"; 
                                              goto MATCH_label_c903; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "SHRD.Ibod"; 
                                            goto MATCH_label_c905; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 4428 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c903; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c904; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "SHRD.Ibod"; 
                                        goto MATCH_label_c905; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRD.Ibod"; 
                                      goto MATCH_label_c902; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHLD.Ibod"; 
                                            goto MATCH_label_c898; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHLD.Ibod"; 
                                              goto MATCH_label_c900; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHLD.Ibod"; 
                                              goto MATCH_label_c899; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "SHLD.Ibod"; 
                                            goto MATCH_label_c901; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 4553 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c899; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c900; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "SHLD.Ibod"; 
                                        goto MATCH_label_c901; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLD.Ibod"; 
                                      goto MATCH_label_c898; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SHRD.CLod"; 
                                            goto MATCH_label_c910; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRD.CLod"; 
                                              goto MATCH_label_c912; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRD.CLod"; 
                                              goto MATCH_label_c911; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SHRD.CLod"; 
                                            goto MATCH_label_c913; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHRD.CLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4669 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c911; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c912; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHRD.CLod"; 
                                        goto MATCH_label_c913; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SHRD.CLod"; 
                                      goto MATCH_label_c910; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SHLD.CLod"; 
                                            goto MATCH_label_c906; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLD.CLod"; 
                                              goto MATCH_label_c908; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLD.CLod"; 
                                              goto MATCH_label_c907; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SHLD.CLod"; 
                                            goto MATCH_label_c909; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHLD.CLod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 4778 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c907; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c908; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SHLD.CLod"; 
                                        goto MATCH_label_c909; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SHLD.CLod"; 
                                      goto MATCH_label_c906; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 6: 
                              goto MATCH_label_c64; break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "IMULrmod"; 
                                            goto MATCH_label_c914; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "IMULrmod"; 
                                              goto MATCH_label_c916; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "IMULrmod"; 
                                              goto MATCH_label_c915; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "IMULrmod"; 
                                            goto MATCH_label_c917; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "IMULrmod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1136 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 4892 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c915; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c916; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "IMULrmod"; 
                                        goto MATCH_label_c917; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "IMULrmod"; 
                                      goto MATCH_label_c914; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: case 1: case 2: case 3: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTiod"; 
                                                  goto MATCH_label_c947; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTiod"; 
                                                    goto MATCH_label_c949; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTiod"; 
                                                    goto MATCH_label_c948; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTiod"; 
                                                  goto MATCH_label_c950; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5032 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c948; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c949; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTiod"; 
                                              goto MATCH_label_c950; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTiod"; 
                                            goto MATCH_label_c947; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTSiod"; 
                                                  goto MATCH_label_c951; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTSiod"; 
                                                    goto MATCH_label_c953; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTSiod"; 
                                                    goto MATCH_label_c952; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTSiod"; 
                                                  goto MATCH_label_c954; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 5161 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c952; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c953; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTSiod"; 
                                              goto MATCH_label_c954; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTSiod"; 
                                            goto MATCH_label_c951; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTRiod"; 
                                                  goto MATCH_label_c955; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTRiod"; 
                                                    goto MATCH_label_c957; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTRiod"; 
                                                    goto MATCH_label_c956; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTRiod"; 
                                                  goto MATCH_label_c958; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1278 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5290 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c956; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c957; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTRiod"; 
                                              goto MATCH_label_c958; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTRiod"; 
                                            goto MATCH_label_c955; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "BTCiod"; 
                                                  goto MATCH_label_c959; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "BTCiod"; 
                                                    goto MATCH_label_c961; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "BTCiod"; 
                                                    goto MATCH_label_c960; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "BTCiod"; 
                                                  goto MATCH_label_c962; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 5419 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c960; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c961; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "BTCiod"; 
                                              goto MATCH_label_c962; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "BTCiod"; 
                                            goto MATCH_label_c959; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTCod"; 
                                            goto MATCH_label_c963; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTCod"; 
                                              goto MATCH_label_c965; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTCod"; 
                                              goto MATCH_label_c964; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTCod"; 
                                            goto MATCH_label_c966; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTCod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 5541 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c964; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c965; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTCod"; 
                                        goto MATCH_label_c966; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTCod"; 
                                      goto MATCH_label_c963; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c967; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c969;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c968;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c970; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1329 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);
		return;


#line 5638 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c968;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c969;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c970;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c967; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c971; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c973;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c972;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c974; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1317 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);
		return;


#line 5721 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c972;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c973;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c974;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c971; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVSX.Gv.Ebod"; 
                                            goto MATCH_label_c975; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVSX.Gv.Ebod"; 
                                              goto MATCH_label_c977; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVSX.Gv.Ebod"; 
                                              goto MATCH_label_c976; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVSX.Gv.Ebod"; 
                                            goto MATCH_label_c978; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 5816 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c976; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c977; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ebod"; 
                                        goto MATCH_label_c978; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVSX.Gv.Ebod"; 
                                      goto MATCH_label_c975; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVSX.Gv.Ew"; 
                                            goto MATCH_label_c979; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVSX.Gv.Ew"; 
                                              goto MATCH_label_c981; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVSX.Gv.Ew"; 
                                              goto MATCH_label_c980; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVSX.Gv.Ew"; 
                                            goto MATCH_label_c982; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 5925 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c980; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c981; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVSX.Gv.Ew"; 
                                        goto MATCH_label_c982; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVSX.Gv.Ew"; 
                                      goto MATCH_label_c979; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPXCHG.Eb.Gb"; 
                                            goto MATCH_label_c918; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPXCHG.Eb.Gb"; 
                                              goto MATCH_label_c920; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPXCHG.Eb.Gb"; 
                                              goto MATCH_label_c919; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPXCHG.Eb.Gb"; 
                                            goto MATCH_label_c921; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 6039 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c919; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c920; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Eb.Gb"; 
                                        goto MATCH_label_c921; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPXCHG.Eb.Gb"; 
                                      goto MATCH_label_c918; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                            goto MATCH_label_c922; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                              goto MATCH_label_c924; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                              goto MATCH_label_c923; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                            goto MATCH_label_c925; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 6148 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c923; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c924; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                        goto MATCH_label_c925; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPXCHG.Ev.Gvod"; 
                                      goto MATCH_label_c922; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LSS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6216 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LSS"; 
                                              goto MATCH_label_c927; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LSS"; 
                                              goto MATCH_label_c926; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LSS"; 
                                            goto MATCH_label_c928; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6274 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c926; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c927; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LSS"; 
                                        goto MATCH_label_c928; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "BTRod"; 
                                            goto MATCH_label_c929; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "BTRod"; 
                                              goto MATCH_label_c931; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "BTRod"; 
                                              goto MATCH_label_c930; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "BTRod"; 
                                            goto MATCH_label_c932; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTRod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 6380 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c930; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c931; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "BTRod"; 
                                        goto MATCH_label_c932; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "BTRod"; 
                                      goto MATCH_label_c929; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LFS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6448 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LFS"; 
                                              goto MATCH_label_c934; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LFS"; 
                                              goto MATCH_label_c933; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LFS"; 
                                            goto MATCH_label_c935; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LFS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6506 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c933; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c934; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LFS"; 
                                        goto MATCH_label_c935; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LGS"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6571 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LGS"; 
                                              goto MATCH_label_c937; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LGS"; 
                                              goto MATCH_label_c936; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LGS"; 
                                            goto MATCH_label_c938; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LGS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 6629 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c936; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c937; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LGS"; 
                                        goto MATCH_label_c938; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVZX.Gv.Ebod"; 
                                            goto MATCH_label_c939; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVZX.Gv.Ebod"; 
                                              goto MATCH_label_c941; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVZX.Gv.Ebod"; 
                                              goto MATCH_label_c940; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVZX.Gv.Ebod"; 
                                            goto MATCH_label_c942; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 6735 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c940; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c941; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ebod"; 
                                        goto MATCH_label_c942; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVZX.Gv.Ebod"; 
                                      goto MATCH_label_c939; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVZX.Gv.Ew"; 
                                            goto MATCH_label_c943; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVZX.Gv.Ew"; 
                                              goto MATCH_label_c945; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVZX.Gv.Ew"; 
                                              goto MATCH_label_c944; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVZX.Gv.Ew"; 
                                            goto MATCH_label_c946; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned r32 = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 6844 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c944; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c945; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVZX.Gv.Ew"; 
                                        goto MATCH_label_c946; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVZX.Gv.Ew"; 
                                      goto MATCH_label_c943; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 12: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = "BSWAP"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1314 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 6902 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XADD.Eb.Gb"; 
                                            goto MATCH_label_c983; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XADD.Eb.Gb"; 
                                              goto MATCH_label_c985; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XADD.Eb.Gb"; 
                                              goto MATCH_label_c984; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XADD.Eb.Gb"; 
                                            goto MATCH_label_c986; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 336 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 6978 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c984; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c985; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Eb.Gb"; 
                                        goto MATCH_label_c986; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XADD.Eb.Gb"; 
                                      goto MATCH_label_c983; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XADD.Ev.Gvod"; 
                                            goto MATCH_label_c987; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XADD.Ev.Gvod"; 
                                              goto MATCH_label_c989; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XADD.Ev.Gvod"; 
                                              goto MATCH_label_c988; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XADD.Ev.Gvod"; 
                                            goto MATCH_label_c990; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 330 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7087 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c988; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c989; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XADD.Ev.Gvod"; 
                                        goto MATCH_label_c990; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XADD.Ev.Gvod"; 
                                      goto MATCH_label_c987; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: 
                                goto MATCH_label_c64; break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 1) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "CMPXCHG8B"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 3 + MATCH_p; 
                                                
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 7156 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "CMPXCHG8B"; 
                                                goto MATCH_label_c992; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "CMPXCHG8B"; 
                                                goto MATCH_label_c991; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "CMPXCHG8B"; 
                                              goto MATCH_label_c993; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Mem = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 7211 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c991; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c992; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "CMPXCHG8B"; 
                                          goto MATCH_label_c993; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c64; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBmrb"; 
                              goto MATCH_label_c994; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBmrb"; 
                                goto MATCH_label_c996; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBmrb"; 
                                goto MATCH_label_c995; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBmrb"; 
                              goto MATCH_label_c997; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 7323 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c995; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c996; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrb"; 
                          goto MATCH_label_c997; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBmrb"; goto MATCH_label_c994; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBmrod"; 
                              goto MATCH_label_c998; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBmrod"; 
                                goto MATCH_label_c1000; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBmrod"; 
                                goto MATCH_label_c999; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBmrod"; 
                              goto MATCH_label_c1001; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7417 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c999; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c1000; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBmrod"; 
                          goto MATCH_label_c1001; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBmrod"; goto MATCH_label_c998; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBrmb"; 
                              goto MATCH_label_c1002; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBrmb"; 
                                goto MATCH_label_c1004; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBrmb"; 
                                goto MATCH_label_c1003; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBrmb"; 
                              goto MATCH_label_c1005; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 7511 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1003; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1004; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmb"; 
                          goto MATCH_label_c1005; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBrmb"; goto MATCH_label_c1002; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SBBrmod"; 
                              goto MATCH_label_c1006; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SBBrmod"; 
                                goto MATCH_label_c1008; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SBBrmod"; 
                                goto MATCH_label_c1007; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SBBrmod"; 
                              goto MATCH_label_c1009; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 7605 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1007; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1008; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SBBrmod"; 
                          goto MATCH_label_c1009; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SBBrmod"; goto MATCH_label_c1006; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 7656 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 7676 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 781 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 7694 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 7712 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBmrb"; 
                              goto MATCH_label_c1010; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBmrb"; 
                                goto MATCH_label_c1012; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBmrb"; 
                                goto MATCH_label_c1011; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBmrb"; 
                              goto MATCH_label_c1013; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 7782 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1011; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1012; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrb"; 
                          goto MATCH_label_c1013; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBmrb"; goto MATCH_label_c1010; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBmrod"; 
                              goto MATCH_label_c1014; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBmrod"; 
                                goto MATCH_label_c1016; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBmrod"; 
                                goto MATCH_label_c1015; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBmrod"; 
                              goto MATCH_label_c1017; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 7876 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1015; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1016; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBmrod"; 
                          goto MATCH_label_c1017; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBmrod"; goto MATCH_label_c1014; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBrmb"; 
                              goto MATCH_label_c1018; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBrmb"; 
                                goto MATCH_label_c1020; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBrmb"; 
                                goto MATCH_label_c1019; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBrmb"; 
                              goto MATCH_label_c1021; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 7970 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1019; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1020; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmb"; 
                          goto MATCH_label_c1021; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBrmb"; goto MATCH_label_c1018; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "SUBrmod"; 
                              goto MATCH_label_c1022; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SUBrmod"; 
                                goto MATCH_label_c1024; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SUBrmod"; 
                                goto MATCH_label_c1023; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "SUBrmod"; 
                              goto MATCH_label_c1025; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1376 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 8064 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1023; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1024; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "SUBrmod"; 
                          goto MATCH_label_c1025; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "SUBrmod"; goto MATCH_label_c1022; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8115 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_808[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 8135 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 306 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 8153 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 8171 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPmrb"; 
                              goto MATCH_label_c1026; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPmrb"; 
                                goto MATCH_label_c1028; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPmrb"; 
                                goto MATCH_label_c1027; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPmrb"; 
                              goto MATCH_label_c1029; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 8241 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1027; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1028; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrb"; 
                          goto MATCH_label_c1029; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPmrb"; goto MATCH_label_c1026; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPmrod"; 
                              goto MATCH_label_c1030; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPmrod"; 
                                goto MATCH_label_c1032; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPmrod"; 
                                goto MATCH_label_c1031; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPmrod"; 
                              goto MATCH_label_c1033; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 8335 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1031; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1032; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPmrod"; 
                          goto MATCH_label_c1033; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPmrod"; goto MATCH_label_c1030; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPrmb"; 
                              goto MATCH_label_c1034; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPrmb"; 
                                goto MATCH_label_c1036; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPrmb"; 
                                goto MATCH_label_c1035; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPrmb"; 
                              goto MATCH_label_c1037; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 8429 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1035; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1036; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmb"; 
                          goto MATCH_label_c1037; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPrmb"; goto MATCH_label_c1034; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "CMPrmod"; 
                              goto MATCH_label_c1038; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "CMPrmod"; 
                                goto MATCH_label_c1040; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "CMPrmod"; 
                                goto MATCH_label_c1039; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "CMPrmod"; 
                              goto MATCH_label_c1041; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1364 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 8523 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1039; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1040; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "CMPrmod"; 
                          goto MATCH_label_c1041; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "CMPrmod"; goto MATCH_label_c1038; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_808[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8574 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_821[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 8594 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 309 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 8612 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            MATCH_name = 
              MATCH_name_row_822[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 8636 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            MATCH_name = 
              MATCH_name_row_822[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 841 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 8655 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 790 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 8678 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "IMUL.Ivd"; 
                              goto MATCH_label_c1042; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "IMUL.Ivd"; 
                                goto MATCH_label_c1044; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "IMUL.Ivd"; 
                                goto MATCH_label_c1043; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                              MATCH_name = "IMUL.Ivd"; 
                              goto MATCH_label_c1045; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 8 + MATCH_p; 
                            
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, addReloc(DIS_I32));


#line 8748 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1043; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1044; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                          MATCH_name = "IMUL.Ivd"; 
                          goto MATCH_label_c1045; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                        MATCH_name = "IMUL.Ivd"; 
                        goto MATCH_label_c1042; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 796 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 8806 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "IMUL.Ibod"; 
                              goto MATCH_label_c1046; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "IMUL.Ibod"; 
                                goto MATCH_label_c1048; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "IMUL.Ibod"; 
                                goto MATCH_label_c1047; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                              MATCH_name = "IMUL.Ibod"; 
                              goto MATCH_label_c1049; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            int /* [~128..127] */ i8 = 
                              sign_extend(
                                          (MATCH_w_8_32 & 0xff) 
                                                /* i8 at 32 */, 8);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 5 + MATCH_p; 
                            
#line 1130 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 8879 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1047; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1048; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                          MATCH_name = "IMUL.Ibod"; 
                          goto MATCH_label_c1049; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        MATCH_name = "IMUL.Ibod"; 
                        goto MATCH_label_c1046; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 151 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 8945 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 149 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 8966 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 147 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 8987 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 145 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 9008 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_821[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 143 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 9029 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_829[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 141 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 9050 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_808[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 139 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 9071 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 137 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 9092 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVmrb"; 
                              goto MATCH_label_c1050; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVmrb"; 
                                goto MATCH_label_c1052; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVmrb"; 
                                goto MATCH_label_c1051; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVmrb"; 
                              goto MATCH_label_c1053; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 9162 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1051; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1052; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrb"; 
                          goto MATCH_label_c1053; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVmrb"; goto MATCH_label_c1050; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVmrod"; 
                              goto MATCH_label_c1054; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVmrod"; 
                                goto MATCH_label_c1056; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVmrod"; 
                                goto MATCH_label_c1055; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVmrod"; 
                              goto MATCH_label_c1057; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 9256 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1055; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1056; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVmrod"; 
                          goto MATCH_label_c1057; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVmrod"; goto MATCH_label_c1054; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVrmb"; 
                              goto MATCH_label_c1058; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVrmb"; 
                                goto MATCH_label_c1060; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVrmb"; 
                                goto MATCH_label_c1059; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVrmb"; 
                              goto MATCH_label_c1061; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 9350 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1059; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1060; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmb"; 
                          goto MATCH_label_c1061; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVrmb"; goto MATCH_label_c1058; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "MOVrmod"; 
                              goto MATCH_label_c1062; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MOVrmod"; 
                                goto MATCH_label_c1064; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MOVrmod"; 
                                goto MATCH_label_c1063; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "MOVrmod"; 
                              goto MATCH_label_c1065; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 9444 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1063; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1064; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "MOVrmod"; 
                          goto MATCH_label_c1065; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "MOVrmod"; goto MATCH_label_c1062; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 6: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LEAod"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 9504 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LEAod"; 
                                goto MATCH_label_c1067; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LEAod"; 
                                goto MATCH_label_c1066; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LEAod"; 
                              goto MATCH_label_c1068; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LEAod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 9556 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1066; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1067; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LEAod"; 
                          goto MATCH_label_c1068; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_name = "POP.Evod"; 
                                goto MATCH_label_c1069; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_name = "POP.Evod"; 
                                  goto MATCH_label_c1071; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_name = "POP.Evod"; 
                                  goto MATCH_label_c1070; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_name = "POP.Evod"; 
                                goto MATCH_label_c1072; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_name = "POP.Evod"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              nextPC = 4 + MATCH_p; 
                              
#line 847 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 9650 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1070; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1071; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_name = "POP.Evod"; 
                            goto MATCH_label_c1072; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_name = "POP.Evod"; 
                          goto MATCH_label_c1069; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_name = 
                    MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1241 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9710 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9728 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_w_16_40 = fetch16(5 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    unsigned seg = (MATCH_w_16_40 & 0xffff) /* i16 at 40 */;
                    nextPC = 7 + MATCH_p; 
                    
#line 1247 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, new Const(seg), new Const(off));


#line 9750 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 345 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9768 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: case 5: 
                  goto MATCH_label_c64; break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_821[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9788 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

	/* Branches have been handled in decodeInstruction() now */

#line 9807 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i8 = (MATCH_w_8_8 & 0xff) /* i8 at 8 */;
                    nextPC = 2 + MATCH_p; 
                    
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 9833 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 9853 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9871 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9889 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_829[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

	/* Floating point instructions */

#line 9908 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_847[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9926 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_829[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9944 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_808[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 9962 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            MATCH_name = 
              MATCH_name_row_822[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 5 + MATCH_p; 
              
#line 959 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, addReloc(DIS_I32));


#line 9986 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
                    nextPC = 4 + MATCH_p; 
                    
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16, DIS_I8);


#line 10012 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10030 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 10051 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 462 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);
		result.rtl->appendStmt(new ReturnStatement);


#line 10070 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = "INT.Ib"; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1074 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);

// Removing because an invalid instruction is better than trying to
// instantiate this. -trent
//	| INT3() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| INSB() [name] =>
//		result.rtl = instantiate(pc, name);


#line 10106 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_847[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1071 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10124 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_821[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1062 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 10142 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FADD.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10178 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FADD.R32"; 
                                      goto MATCH_label_c1074; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FADD.R32"; 
                                      goto MATCH_label_c1073; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FADD.R32"; 
                                    goto MATCH_label_c1075; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FADD.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10229 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1073; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1074; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FADD.R32"; 
                                goto MATCH_label_c1075; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FADD.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10273 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FMUL.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10302 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FMUL.R32"; 
                                      goto MATCH_label_c1077; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FMUL.R32"; 
                                      goto MATCH_label_c1076; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FMUL.R32"; 
                                    goto MATCH_label_c1078; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FMUL.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10353 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1076; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1077; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FMUL.R32"; 
                                goto MATCH_label_c1078; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FMUL.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10397 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FCOM.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10426 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOM.R32"; 
                                      goto MATCH_label_c1080; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOM.R32"; 
                                      goto MATCH_label_c1079; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FCOM.R32"; 
                                    goto MATCH_label_c1081; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOM.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10477 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1079; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1080; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOM.R32"; 
                                goto MATCH_label_c1081; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOM.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10521 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FCOMP.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10550 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOMP.R32"; 
                                      goto MATCH_label_c1083; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOMP.R32"; 
                                      goto MATCH_label_c1082; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FCOMP.R32"; 
                                    goto MATCH_label_c1084; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOMP.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10601 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1082; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1083; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FCOMP.R32"; 
                                goto MATCH_label_c1084; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOMP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10645 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FSUB.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10674 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUB.R32"; 
                                      goto MATCH_label_c1086; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUB.R32"; 
                                      goto MATCH_label_c1085; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FSUB.R32"; 
                                    goto MATCH_label_c1087; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUB.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10725 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1085; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1086; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUB.R32"; 
                                goto MATCH_label_c1087; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FSUB.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2009 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10769 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FSUBR.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10798 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUBR.R32"; 
                                      goto MATCH_label_c1089; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUBR.R32"; 
                                      goto MATCH_label_c1088; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FSUBR.R32"; 
                                    goto MATCH_label_c1090; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUBR.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10849 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1088; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1089; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FSUBR.R32"; 
                                goto MATCH_label_c1090; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FSUBR.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10893 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FDIV.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10922 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIV.R32"; 
                                      goto MATCH_label_c1092; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIV.R32"; 
                                      goto MATCH_label_c1091; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FDIV.R32"; 
                                    goto MATCH_label_c1093; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIV.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 10973 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1091; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1092; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIV.R32"; 
                                goto MATCH_label_c1093; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FDIV.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1803 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11017 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FDIVR.R32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11046 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIVR.R32"; 
                                      goto MATCH_label_c1095; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIVR.R32"; 
                                      goto MATCH_label_c1094; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FDIVR.R32"; 
                                    goto MATCH_label_c1096; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIVR.R32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11097 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1094; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1095; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FDIVR.R32"; 
                                goto MATCH_label_c1096; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FDIVR.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1824 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11141 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FLD.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11178 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD.lsR32"; 
                                      goto MATCH_label_c1098; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD.lsR32"; 
                                      goto MATCH_label_c1097; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FLD.lsR32"; 
                                    goto MATCH_label_c1099; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FLD.lsR32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11229 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1097; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1098; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FLD.lsR32"; 
                                goto MATCH_label_c1099; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FLD.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDXP1);


#line 11273 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FXCH"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 2066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11295 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "FST.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11325 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FST.lsR32"; 
                                      goto MATCH_label_c1101; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FST.lsR32"; 
                                      goto MATCH_label_c1100; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "FST.lsR32"; 
                                    goto MATCH_label_c1102; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FST.lsR32"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11376 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1100; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1101; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "FST.lsR32"; 
                                goto MATCH_label_c1102; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11421 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1103; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP.lsR32"; 
                                      goto MATCH_label_c1105; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP.lsR32"; 
                                      goto MATCH_label_c1104; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1103; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1104; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 11506 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1104; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR32"; 
                                    goto MATCH_label_c1105; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1106; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_882[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1107; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLDENV"; 
                                      goto MATCH_label_c1109; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLDENV"; 
                                      goto MATCH_label_c1108; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1107; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_882[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1108; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDENV"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 11623 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1108; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_882[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDENV"; 
                                    goto MATCH_label_c1109; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_880[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1110; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11680 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11699 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: case 3: case 6: case 7: 
                                    goto MATCH_label_c64; break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11720 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_882[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11739 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1111; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLDCW"; 
                                      goto MATCH_label_c1113; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLDCW"; 
                                      goto MATCH_label_c1112; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_882[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1111; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1112; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDCW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 11823 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1112; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLDCW"; 
                                    goto MATCH_label_c1113; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1114; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11880 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11899 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11918 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_879[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11937 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11956 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11975 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 11994 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_888[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1115; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTENV"; 
                                      goto MATCH_label_c1117; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTENV"; 
                                      goto MATCH_label_c1116; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1115; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_888[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1116; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTENV"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 12079 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1116; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_888[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTENV"; 
                                    goto MATCH_label_c1117; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1118; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12136 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12155 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12174 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_884[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12193 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12212 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_888[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12231 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_888[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1794 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12250 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_891[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1119; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTCW"; 
                                      goto MATCH_label_c1121; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTCW"; 
                                      goto MATCH_label_c1120; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1119; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_891[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1120; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTCW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 12336 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1120; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_891[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTCW"; 
                                    goto MATCH_label_c1121; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1122; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12393 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 1: 
                                    MATCH_name = 
                                      MATCH_name_r_m_890[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12412 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 2: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1967 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12431 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_887[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1964 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12450 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = 
                                      MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12469 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_891[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1958 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12488 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 6: 
                                    MATCH_name = 
                                      MATCH_name_r_m_891[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1961 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12507 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_885[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1791 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 12526 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1123; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIADD.I32"; 
                                      goto MATCH_label_c1125; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIADD.I32"; 
                                      goto MATCH_label_c1124; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1123; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1124; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12618 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1124; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I32"; 
                                    goto MATCH_label_c1125; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1126; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1127; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIMUL.I32"; 
                                      goto MATCH_label_c1129; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIMUL.I32"; 
                                      goto MATCH_label_c1128; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1127; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1128; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12736 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1128; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I32"; 
                                    goto MATCH_label_c1129; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_894[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1130; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1131; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOM.I32"; 
                                      goto MATCH_label_c1133; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOM.I32"; 
                                      goto MATCH_label_c1132; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1131; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1132; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12854 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1132; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I32"; 
                                    goto MATCH_label_c1133; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_896[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1134; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1135; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOMP.I32"; 
                                      goto MATCH_label_c1137; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOMP.I32"; 
                                      goto MATCH_label_c1136; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1135; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1136; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 12972 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1136; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I32"; 
                                    goto MATCH_label_c1137; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_898[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1138; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1139; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUB.I32"; 
                                      goto MATCH_label_c1141; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUB.I32"; 
                                      goto MATCH_label_c1140; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1139; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1140; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13090 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1140; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I32"; 
                                    goto MATCH_label_c1141; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_900[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1142; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1143; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUBR.I32"; 
                                      goto MATCH_label_c1145; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUBR.I32"; 
                                      goto MATCH_label_c1144; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1143; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1144; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13208 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1144; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I32"; 
                                    goto MATCH_label_c1145; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_902[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1146; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_r_m_893[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 2054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13263 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1147; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIV.I32"; 
                                      goto MATCH_label_c1149; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIV.I32"; 
                                      goto MATCH_label_c1148; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1147; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1148; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13348 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1148; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I32"; 
                                    goto MATCH_label_c1149; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_904[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1150; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1151; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIVR.I32"; 
                                      goto MATCH_label_c1153; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIVR.I32"; 
                                      goto MATCH_label_c1152; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1151; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1152; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13466 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1152; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I32"; 
                                    goto MATCH_label_c1153; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_906[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1154; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1155; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD.lsI32"; 
                                      goto MATCH_label_c1157; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD.lsI32"; 
                                      goto MATCH_label_c1156; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1155; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1156; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13592 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1156; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI32"; 
                                    goto MATCH_label_c1157; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_908[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1158; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1159; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIST.lsI32"; 
                                      goto MATCH_label_c1161; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIST.lsI32"; 
                                      goto MATCH_label_c1160; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1159; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1160; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13712 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1160; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI32"; 
                                    goto MATCH_label_c1161; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_910[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1162; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1163; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP.lsI32"; 
                                      goto MATCH_label_c1165; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP.lsI32"; 
                                      goto MATCH_label_c1164; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1163; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1164; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI32"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 13830 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1164; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI32"; 
                                    goto MATCH_label_c1165; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_912[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1166; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                MATCH_name = "FNCLEX"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13894 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                MATCH_name = "FINIT"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 13917 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1167; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD80"; 
                                      goto MATCH_label_c1169; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD80"; 
                                      goto MATCH_label_c1168; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1167; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1168; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD80"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 14007 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1168; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD80"; 
                                    goto MATCH_label_c1169; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_914[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1170; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOMI.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14061 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FCOMI.ST.STi"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14083 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1171; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP80"; 
                                      goto MATCH_label_c1173; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP80"; 
                                      goto MATCH_label_c1172; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1171; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1172; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP80"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 14165 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1172; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP80"; 
                                    goto MATCH_label_c1173; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_918[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1174; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1175; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FADD.R64"; 
                                      goto MATCH_label_c1177; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FADD.R64"; 
                                      goto MATCH_label_c1176; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1175; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1176; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FADD.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14291 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1176; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FADD.R64"; 
                                    goto MATCH_label_c1177; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_922[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1178; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FADD.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14345 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1179; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FMUL.R64"; 
                                      goto MATCH_label_c1181; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FMUL.R64"; 
                                      goto MATCH_label_c1180; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1179; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1180; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FMUL.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14426 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1180; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FMUL.R64"; 
                                    goto MATCH_label_c1181; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_924[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1182; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FMUL.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14480 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1183; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOM.R64"; 
                                      goto MATCH_label_c1185; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOM.R64"; 
                                      goto MATCH_label_c1184; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1183; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1184; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOM.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14561 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1184; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOM.R64"; 
                                    goto MATCH_label_c1185; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_927[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1186; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1187; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FCOMP.R64"; 
                                      goto MATCH_label_c1189; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FCOMP.R64"; 
                                      goto MATCH_label_c1188; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1187; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1188; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOMP.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14679 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1188; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FCOMP.R64"; 
                                    goto MATCH_label_c1189; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_930[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1190; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1191; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUB.R64"; 
                                      goto MATCH_label_c1193; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUB.R64"; 
                                      goto MATCH_label_c1192; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1191; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1192; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUB.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14797 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1192; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUB.R64"; 
                                    goto MATCH_label_c1193; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_932[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1194; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBR.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14851 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1195; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSUBR.R64"; 
                                      goto MATCH_label_c1197; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSUBR.R64"; 
                                      goto MATCH_label_c1196; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1195; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1196; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUBR.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 14932 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1196; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSUBR.R64"; 
                                    goto MATCH_label_c1197; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_934[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1198; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUB.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 14986 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1199; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIV.R64"; 
                                      goto MATCH_label_c1201; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIV.R64"; 
                                      goto MATCH_label_c1200; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1199; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1200; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIV.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15067 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1200; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIV.R64"; 
                                    goto MATCH_label_c1201; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_937[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1202; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVR.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1827 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15121 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1203; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FDIVR.R64"; 
                                      goto MATCH_label_c1205; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FDIVR.R64"; 
                                      goto MATCH_label_c1204; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1203; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1204; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIVR.R64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15202 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1204; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FDIVR.R64"; 
                                    goto MATCH_label_c1205; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_940[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1206; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIV.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1806 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15256 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1207; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FLD.lsR64"; 
                                      goto MATCH_label_c1209; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FLD.lsR64"; 
                                      goto MATCH_label_c1208; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1207; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1208; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15345 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1208; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FLD.lsR64"; 
                                    goto MATCH_label_c1209; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_943[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1210; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FFREE"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15399 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1211; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FST.lsR64"; 
                                      goto MATCH_label_c1213; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FST.lsR64"; 
                                      goto MATCH_label_c1212; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1211; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1212; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FST.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15482 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1212; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FST.lsR64"; 
                                    goto MATCH_label_c1213; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_946[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1214; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FST.st.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1985 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15536 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1215; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTP.lsR64"; 
                                      goto MATCH_label_c1217; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTP.lsR64"; 
                                      goto MATCH_label_c1216; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1215; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1216; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 15617 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1216; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTP.lsR64"; 
                                    goto MATCH_label_c1217; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_949[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1218; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSTP.st.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1988 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15671 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1219; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FRSTOR"; 
                                      goto MATCH_label_c1221; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FRSTOR"; 
                                      goto MATCH_label_c1220; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1219; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1220; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FRSTOR"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 15751 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1220; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FRSTOR"; 
                                    goto MATCH_label_c1221; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_952[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1222; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOM"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15805 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FUCOMP"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 2051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 15827 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1223; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FNSAVE"; 
                                      goto MATCH_label_c1225; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FNSAVE"; 
                                      goto MATCH_label_c1224; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1223; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1224; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FNSAVE"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 15908 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1224; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FNSAVE"; 
                                    goto MATCH_label_c1225; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_955[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1226; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1227; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FSTSW"; 
                                      goto MATCH_label_c1229; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FSTSW"; 
                                      goto MATCH_label_c1228; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1227; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1228; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTSW"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16026 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1228; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FSTSW"; 
                                    goto MATCH_label_c1229; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_959[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1230; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1231; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIADD.I16"; 
                                      goto MATCH_label_c1233; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIADD.I16"; 
                                      goto MATCH_label_c1232; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1231; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1232; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16152 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1232; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIADD.I16"; 
                                    goto MATCH_label_c1233; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_961[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1234; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FADDP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16206 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1235; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIMUL.I16"; 
                                      goto MATCH_label_c1237; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIMUL.I16"; 
                                      goto MATCH_label_c1236; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1235; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1236; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16287 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1236; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIMUL.I16"; 
                                    goto MATCH_label_c1237; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_963[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1238; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FMULP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16341 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1239; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOM.I16"; 
                                      goto MATCH_label_c1241; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOM.I16"; 
                                      goto MATCH_label_c1240; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1239; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1240; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16422 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1240; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOM.I16"; 
                                    goto MATCH_label_c1241; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_966[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1242; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1243; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FICOMP.I16"; 
                                      goto MATCH_label_c1245; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FICOMP.I16"; 
                                      goto MATCH_label_c1244; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1243; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1244; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16540 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1244; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FICOMP.I16"; 
                                    goto MATCH_label_c1245; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_969[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1246; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 16595 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1247; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUB.I16"; 
                                      goto MATCH_label_c1249; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUB.I16"; 
                                      goto MATCH_label_c1248; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1247; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1248; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16680 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1248; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUB.I16"; 
                                    goto MATCH_label_c1249; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_971[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1250; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBRP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2042 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16734 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1251; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISUBR.I16"; 
                                      goto MATCH_label_c1253; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISUBR.I16"; 
                                      goto MATCH_label_c1252; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1251; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1252; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16815 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1252; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISUBR.I16"; 
                                    goto MATCH_label_c1253; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1254; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FSUBP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 16869 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1255; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIV.I16"; 
                                      goto MATCH_label_c1257; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIV.I16"; 
                                      goto MATCH_label_c1256; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1255; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1256; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 16950 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1256; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIV.I16"; 
                                    goto MATCH_label_c1257; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_974[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1258; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVRP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17004 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1259; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIDIVR.I16"; 
                                      goto MATCH_label_c1261; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIDIVR.I16"; 
                                      goto MATCH_label_c1260; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1259; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1260; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17085 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1260; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIDIVR.I16"; 
                                    goto MATCH_label_c1261; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_977[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1262; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FDIVP.STi.ST"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1809 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17139 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1263; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD.lsI16"; 
                                      goto MATCH_label_c1265; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD.lsI16"; 
                                      goto MATCH_label_c1264; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1263; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1264; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17228 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1264; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD.lsI16"; 
                                    goto MATCH_label_c1265; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_980[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1266; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1267; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FIST.lsI16"; 
                                      goto MATCH_label_c1269; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FIST.lsI16"; 
                                      goto MATCH_label_c1268; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1267; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1268; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17348 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1268; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FIST.lsI16"; 
                                    goto MATCH_label_c1269; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_983[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1270; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1271; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP.lsI16"; 
                                      goto MATCH_label_c1273; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP.lsI16"; 
                                      goto MATCH_label_c1272; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1271; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1272; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI16"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 17466 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1272; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP.lsI16"; 
                                    goto MATCH_label_c1273; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_986[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1274; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1275; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FBLD"; 
                                      goto MATCH_label_c1277; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FBLD"; 
                                      goto MATCH_label_c1276; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1275; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1276; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBLD"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 17584 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1276; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBLD"; 
                                    goto MATCH_label_c1277; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_988[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1278; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                MATCH_name = 
                                  MATCH_name_r_m_973[(MATCH_w_8_8 & 0x7) 
                                      /* r_m at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 17639 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1279; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FILD64"; 
                                      goto MATCH_label_c1281; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FILD64"; 
                                      goto MATCH_label_c1280; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1279; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1280; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 17724 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1280; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FILD64"; 
                                    goto MATCH_label_c1281; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_990[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1282; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FUCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17778 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1283; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FBSTP"; 
                                      goto MATCH_label_c1285; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FBSTP"; 
                                      goto MATCH_label_c1284; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1283; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1284; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBSTP"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 17859 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1284; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FBSTP"; 
                                    goto MATCH_label_c1285; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_992[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1286; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "FCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 17913 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1287; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "FISTP64"; 
                                      goto MATCH_label_c1289; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "FISTP64"; 
                                      goto MATCH_label_c1288; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1287; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1288; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP64"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 17994 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1288; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "FISTP64"; 
                                    goto MATCH_label_c1289; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_994[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1290; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 1250 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));
		if (relocd == nextPC) {
			// This is a call $+5
			// Use the standard semantics, except for the last statement
			// (just updates %pc)
			result.rtl->getList().pop_back();
			// And don't make it a call statement
		} else {
			auto call = new CallStatement(relocd);
			result.rtl->getList().push_back(call);
			Proc *destProc = prog->setNewProc(relocd);
			if (destProc == (Proc *)-1) destProc = nullptr;  // In case a deleted Proc
			call->setDestProc(destProc);
		}


#line 18078 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 127 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 18098 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 131 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

	/*
	 * Conditional branches, 8 bit offset: 7X XX
	 */

#line 18125 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18149 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 399 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18167 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_name = 
                    MATCH_name_col_795[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18185 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_638[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18203 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_847[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18221 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = "STD"; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 396 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 18238 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1291; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "INC.Eb"; 
                                      goto MATCH_label_c1293; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "INC.Eb"; 
                                      goto MATCH_label_c1292; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1291; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1292; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Eb"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1103 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 18338 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1292; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Eb"; 
                                    goto MATCH_label_c1293; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_997[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1294; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "INC.Eb"; 
                              goto MATCH_label_c1291; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1295; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DEC.Eb"; 
                                      goto MATCH_label_c1297; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DEC.Eb"; 
                                      goto MATCH_label_c1296; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1295; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1296; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Eb"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 18459 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1296; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Eb"; 
                                    goto MATCH_label_c1297; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1000[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1298; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "DEC.Eb"; 
                              goto MATCH_label_c1295; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: case 3: case 4: case 5: case 6: case 7: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1299; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "INC.Evod"; 
                                      goto MATCH_label_c1301; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "INC.Evod"; 
                                      goto MATCH_label_c1300; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1299; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1300; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1097 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 18590 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1300; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "INC.Evod"; 
                                    goto MATCH_label_c1301; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1003[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1302; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "INC.Evod"; 
                              goto MATCH_label_c1299; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1303; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DEC.Evod"; 
                                      goto MATCH_label_c1305; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DEC.Evod"; 
                                      goto MATCH_label_c1304; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1303; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1304; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 18711 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1304; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "DEC.Evod"; 
                                    goto MATCH_label_c1305; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1006[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1306; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "DEC.Evod"; 
                              goto MATCH_label_c1303; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1307; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "CALL.Evod"; 
                                      goto MATCH_label_c1309; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "CALL.Evod"; 
                                      goto MATCH_label_c1308; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1307; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1308; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "CALL.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 104 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 18836 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1308; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "CALL.Evod"; 
                                    goto MATCH_label_c1309; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1009[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1310; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "CALL.Evod"; 
                              goto MATCH_label_c1307; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: case 5: case 7: 
                        goto MATCH_label_c64; break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1311; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1313;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1312;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1314; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 115 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 18936 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1312;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1313;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1314;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1311; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1315; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "PUSH.Evod"; 
                                      goto MATCH_label_c1317; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "PUSH.Evod"; 
                                      goto MATCH_label_c1316; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1315; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1316; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "PUSH.Evod"; 
                                    { 
                                      const char *name = MATCH_name;
                                      unsigned Eaddr = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 4 + MATCH_p; 
                                      
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 19029 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1316; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 2: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_name = "PUSH.Evod"; 
                                    goto MATCH_label_c1317; 
                                    
                                    break;
                                  case 5: case 6: case 7: 
                                    MATCH_name = 
                                      MATCH_name_r_m_1012[(MATCH_w_8_8 & 0x7) 
                                          /* r_m at 8 */]; 
                                    goto MATCH_label_c1318; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 3: 
                              MATCH_name = "PUSH.Evod"; 
                              goto MATCH_label_c1315; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    else 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c0; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDmrb"; 
                                goto MATCH_label_c2; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDmrb"; 
                                goto MATCH_label_c1; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c3; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 19153 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c1; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrb"; 
                          goto MATCH_label_c2; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_0[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c3; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDmrb"; goto MATCH_label_c0; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c4; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDmrod"; 
                                goto MATCH_label_c6; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDmrod"; 
                                goto MATCH_label_c5; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c7; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 19253 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c5; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDmrod"; 
                          goto MATCH_label_c6; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_3[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c7; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDmrod"; goto MATCH_label_c4; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c8; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDrmb"; 
                                goto MATCH_label_c10; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDrmb"; 
                                goto MATCH_label_c9; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c11; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 19353 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c9; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmb"; 
                          goto MATCH_label_c10; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_6[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c11; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDrmb"; goto MATCH_label_c8; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = 
                                MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c12; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADDrmod"; 
                                goto MATCH_label_c14; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADDrmod"; 
                                goto MATCH_label_c13; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = 
                                MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                    /* r_m at 8 */]; 
                              goto MATCH_label_c15; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 19453 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c13; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADDrmod"; 
                          goto MATCH_label_c14; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = MATCH_name_r_m_9[(MATCH_w_8_8 & 0x7) 
                                /* r_m at 8 */]; 
                          goto MATCH_label_c15; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADDrmod"; goto MATCH_label_c12; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 19506 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 19526 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 778 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 19544 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 838 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 19562 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCmrb"; 
                              goto MATCH_label_c16; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCmrb"; 
                                goto MATCH_label_c18; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCmrb"; 
                                goto MATCH_label_c17; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCmrb"; 
                              goto MATCH_label_c19; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 19632 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c17; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c18; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrb"; 
                          goto MATCH_label_c19; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCmrb"; goto MATCH_label_c16; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCmrod"; 
                              goto MATCH_label_c20; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCmrod"; 
                                goto MATCH_label_c22; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCmrod"; 
                                goto MATCH_label_c21; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCmrod"; 
                              goto MATCH_label_c23; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 19726 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c21; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c22; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCmrod"; 
                          goto MATCH_label_c23; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCmrod"; goto MATCH_label_c20; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCrmb"; 
                              goto MATCH_label_c24; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCrmb"; 
                                goto MATCH_label_c26; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCrmb"; 
                                goto MATCH_label_c25; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCrmb"; 
                              goto MATCH_label_c27; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 19820 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c25; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c26; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmb"; 
                          goto MATCH_label_c27; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCrmb"; goto MATCH_label_c24; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ADCrmod"; 
                              goto MATCH_label_c28; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ADCrmod"; 
                                goto MATCH_label_c30; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ADCrmod"; 
                                goto MATCH_label_c29; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ADCrmod"; 
                              goto MATCH_label_c31; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 19914 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c29; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c30; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ADCrmod"; 
                          goto MATCH_label_c31; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ADCrmod"; goto MATCH_label_c28; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 19965 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 19985 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 784 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20003 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20021 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDmrb"; 
                              goto MATCH_label_c32; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDmrb"; 
                                goto MATCH_label_c34; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDmrb"; 
                                goto MATCH_label_c33; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDmrb"; 
                              goto MATCH_label_c35; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 20091 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c33; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c34; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrb"; 
                          goto MATCH_label_c35; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDmrb"; goto MATCH_label_c32; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDmrod"; 
                              goto MATCH_label_c36; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDmrod"; 
                                goto MATCH_label_c38; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDmrod"; 
                                goto MATCH_label_c37; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDmrod"; 
                              goto MATCH_label_c39; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 20185 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c37; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c38; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDmrod"; 
                          goto MATCH_label_c39; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDmrod"; goto MATCH_label_c36; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDrmb"; 
                              goto MATCH_label_c40; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDrmb"; 
                                goto MATCH_label_c42; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDrmb"; 
                                goto MATCH_label_c41; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDrmb"; 
                              goto MATCH_label_c43; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 20279 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c41; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c42; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmb"; 
                          goto MATCH_label_c43; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDrmb"; goto MATCH_label_c40; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "ANDrmod"; 
                              goto MATCH_label_c44; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ANDrmod"; 
                                goto MATCH_label_c46; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ANDrmod"; 
                                goto MATCH_label_c45; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "ANDrmod"; 
                              goto MATCH_label_c47; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1382 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 20373 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c45; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c46; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "ANDrmod"; 
                          goto MATCH_label_c47; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "ANDrmod"; goto MATCH_label_c44; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 20424 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 20444 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 312 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20462 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20480 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORmrb"; 
                              goto MATCH_label_c48; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORmrb"; 
                                goto MATCH_label_c50; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORmrb"; 
                                goto MATCH_label_c49; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORmrb"; 
                              goto MATCH_label_c51; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 20550 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c49; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c50; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrb"; 
                          goto MATCH_label_c51; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORmrb"; goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORmrod"; 
                              goto MATCH_label_c52; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORmrod"; 
                                goto MATCH_label_c54; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORmrod"; 
                                goto MATCH_label_c53; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORmrod"; 
                              goto MATCH_label_c55; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 20644 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c53; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c54; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORmrod"; 
                          goto MATCH_label_c55; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORmrod"; goto MATCH_label_c52; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORrmb"; 
                              goto MATCH_label_c56; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORrmb"; 
                                goto MATCH_label_c58; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORrmb"; 
                                goto MATCH_label_c57; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORrmb"; 
                              goto MATCH_label_c59; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned r8 = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 20738 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c57; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c58; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmb"; 
                          goto MATCH_label_c59; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORrmb"; goto MATCH_label_c56; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XORrmod"; 
                              goto MATCH_label_c60; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XORrmod"; 
                                goto MATCH_label_c62; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XORrmod"; 
                                goto MATCH_label_c61; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XORrmod"; 
                              goto MATCH_label_c63; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1370 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 20832 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c61; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c62; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XORrmod"; 
                          goto MATCH_label_c63; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XORrmod"; goto MATCH_label_c60; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 20883 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_I32));


#line 20903 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20921 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1091 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 20945 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 802 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 20964 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 2: case 3: case 7: 
                  goto MATCH_label_c64; break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 315 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 20987 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 21005 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ORmrow"; 
                                            goto MATCH_label_c69; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ORmrow"; 
                                              goto MATCH_label_c71; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ORmrow"; 
                                              goto MATCH_label_c70; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ORmrow"; 
                                            goto MATCH_label_c72; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 21089 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c70; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c71; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORmrow"; 
                                        goto MATCH_label_c72; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ORmrow"; 
                                      goto MATCH_label_c69; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADDmrow"; 
                                            goto MATCH_label_c65; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADDmrow"; 
                                              goto MATCH_label_c67; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADDmrow"; 
                                              goto MATCH_label_c66; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADDmrow"; 
                                            goto MATCH_label_c68; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 21198 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c66; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c67; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDmrow"; 
                                        goto MATCH_label_c68; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADDmrow"; 
                                      goto MATCH_label_c65; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ORrmow"; 
                                            goto MATCH_label_c77; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ORrmow"; 
                                              goto MATCH_label_c79; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ORrmow"; 
                                              goto MATCH_label_c78; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ORrmow"; 
                                            goto MATCH_label_c80; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21310 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c78; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c79; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ORrmow"; 
                                        goto MATCH_label_c80; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ORrmow"; 
                                      goto MATCH_label_c77; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADDrmow"; 
                                            goto MATCH_label_c73; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADDrmow"; 
                                              goto MATCH_label_c75; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADDrmow"; 
                                              goto MATCH_label_c74; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADDrmow"; 
                                            goto MATCH_label_c76; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21419 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c74; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c75; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADDrmow"; 
                                        goto MATCH_label_c76; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADDrmow"; 
                                      goto MATCH_label_c73; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_66[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 21482 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_66[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 21506 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 4 & 0xf) 
                                        /* row at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 4: case 5: 
                                          case 6: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "LARow"; 
                                                          goto MATCH_label_c81; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "LARow"; 
                                                            goto MATCH_label_c83; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "LARow"; 
                                                            goto MATCH_label_c82; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "LARow"; 
                                                          goto MATCH_label_c84; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LARow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21610 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c82; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c83; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LARow"; 
                                                      goto MATCH_label_c84; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "LARow"; 
                                                    goto MATCH_label_c81; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "LSLow"; 
                                                          goto MATCH_label_c85; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "LSLow"; 
                                                            goto MATCH_label_c87; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "LSLow"; 
                                                            goto MATCH_label_c86; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "LSLow"; 
                                                          goto MATCH_label_c88; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LSLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 21736 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c86; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c87; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "LSLow"; 
                                                      goto MATCH_label_c88; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "LSLow"; 
                                                    goto MATCH_label_c85; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 1: case 2: case 3: case 4: case 5: 
                                    case 6: case 7: case 9: case 13: case 14: 
                                    case 15: 
                                      goto MATCH_label_c64; break;
                                    case 8: 
                                      if ((MATCH_w_8_16 >> 3 & 0x1) 
                                              /* page at 16 */ == 1) 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 187 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 21814 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 185 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 21840 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 183 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 21866 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 181 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 21892 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 179 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 21918 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 177 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 21944 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 175 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 21970 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_74[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 173 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 21996 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      else 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 203 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 32 bit offset: 0F 8X XX XX XX XX
	 */

#line 22033 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 201 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 22059 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 199 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 22085 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 197 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 22111 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 195 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 22137 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 193 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 22163 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 191 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 22189 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_73[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 189 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 22215 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      break;
                                    case 10: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 2: case 6: 
                                            goto MATCH_label_c64; break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTSow"; 
                                                          goto MATCH_label_c93; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTSow"; 
                                                            goto MATCH_label_c95; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTSow"; 
                                                            goto MATCH_label_c94; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTSow"; 
                                                          goto MATCH_label_c96; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTSow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22311 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c94; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c95; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTSow"; 
                                                      goto MATCH_label_c96; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTSow"; 
                                                    goto MATCH_label_c93; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTow"; 
                                                          goto MATCH_label_c89; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTow"; 
                                                            goto MATCH_label_c91; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTow"; 
                                                            goto MATCH_label_c90; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTow"; 
                                                          goto MATCH_label_c92; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22432 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c90; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c91; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTow"; 
                                                      goto MATCH_label_c92; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTow"; 
                                                    goto MATCH_label_c89; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHRD.Ibow"; 
                                                          goto MATCH_label_c101; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHRD.Ibow"; 
                                                            goto MATCH_label_c103; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHRD.Ibow"; 
                                                            goto MATCH_label_c102; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHRD.Ibow"; 
                                                          goto MATCH_label_c104; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 22578 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c102; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c103; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHRD.Ibow"; 
                                                      goto MATCH_label_c104; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SHRD.Ibow"; 
                                                    goto MATCH_label_c101; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHLD.Ibow"; 
                                                          goto MATCH_label_c97; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHLD.Ibow"; 
                                                            goto MATCH_label_c99; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "SHLD.Ibow"; 
                                                            goto MATCH_label_c98; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "SHLD.Ibow"; 
                                                          goto MATCH_label_c100; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 22732 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c98; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c99; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      MATCH_name = 
                                                        "SHLD.Ibow"; 
                                                      goto MATCH_label_c100; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SHLD.Ibow"; 
                                                    goto MATCH_label_c97; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "SHRD.CLow"; 
                                                          goto MATCH_label_c109; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "SHRD.CLow"; 
                                                            goto MATCH_label_c111; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "SHRD.CLow"; 
                                                            goto MATCH_label_c110; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "SHRD.CLow"; 
                                                          goto MATCH_label_c112; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22868 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c110; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c111; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHRD.CLow"; 
                                                      goto MATCH_label_c112; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "SHRD.CLow"; 
                                                    goto MATCH_label_c109; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "SHLD.CLow"; 
                                                          goto MATCH_label_c105; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "SHLD.CLow"; 
                                                            goto MATCH_label_c107; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "SHLD.CLow"; 
                                                            goto MATCH_label_c106; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "SHLD.CLow"; 
                                                          goto MATCH_label_c108; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 22993 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c106; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c107; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "SHLD.CLow"; 
                                                      goto MATCH_label_c108; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "SHLD.CLow"; 
                                                    goto MATCH_label_c105; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 7: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "IMULrmow"; 
                                                          goto MATCH_label_c113; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "IMULrmow"; 
                                                            goto MATCH_label_c115; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "IMULrmow"; 
                                                            goto MATCH_label_c114; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "IMULrmow"; 
                                                          goto MATCH_label_c116; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1139 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 23121 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c114; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c115; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "IMULrmow"; 
                                                      goto MATCH_label_c116; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "IMULrmow"; 
                                                    goto MATCH_label_c113; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 11: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 1: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "CMPXCHG.Ev.Gvow"; 
                                                          goto MATCH_label_c117; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "CMPXCHG.Ev.Gvow"; 
                                                            goto MATCH_label_c119; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "CMPXCHG.Ev.Gvow"; 
                                                            goto MATCH_label_c118; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "CMPXCHG.Ev.Gvow"; 
                                                          goto MATCH_label_c120; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 23263 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c118; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c119; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "CMPXCHG.Ev.Gvow"; 
                                                      goto MATCH_label_c120; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "CMPXCHG.Ev.Gvow"; 
                                                    goto MATCH_label_c117; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* reg_opcode at 24 */) {
                                                  case 0: case 1: case 2: 
                                                  case 3: 
                                                    goto MATCH_label_c64; 
                                                    
                                                    break;
                                                  case 4: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTiow"; 
                                                                goto MATCH_label_c121; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTiow"; 
                                                                  goto MATCH_label_c123; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTiow"; 
                                                                  goto MATCH_label_c122; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTiow"; 
                                                                goto MATCH_label_c124; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23427 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c122; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c123; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTiow"; 
                                                            goto MATCH_label_c124; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTiow"; 
                                                          goto MATCH_label_c121; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 5: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTSiow"; 
                                                                goto MATCH_label_c125; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTSiow"; 
                                                                  goto MATCH_label_c127; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTSiow"; 
                                                                  goto MATCH_label_c126; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTSiow"; 
                                                                goto MATCH_label_c128; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 23594 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c126; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c127; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTSiow"; 
                                                            goto MATCH_label_c128; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTSiow"; 
                                                          goto MATCH_label_c125; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 6: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTRiow"; 
                                                                goto MATCH_label_c129; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTRiow"; 
                                                                  goto MATCH_label_c131; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTRiow"; 
                                                                  goto MATCH_label_c130; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTRiow"; 
                                                                goto MATCH_label_c132; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1281 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23761 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c130; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c131; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTRiow"; 
                                                            goto MATCH_label_c132; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTRiow"; 
                                                          goto MATCH_label_c129; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 7: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTCiow"; 
                                                                goto MATCH_label_c133; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTCiow"; 
                                                                  goto MATCH_label_c135; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  MATCH_name = 
                                                                    "BTCiow"; 
                                                                  goto MATCH_label_c134; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                MATCH_name = 
                                                                  "BTCiow"; 
                                                                goto MATCH_label_c136; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            { 
                                                              const char *name = 
                                                                MATCH_name;
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 23928 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c134; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c135; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            MATCH_name = 
                                                              "BTCiow"; 
                                                            goto MATCH_label_c136; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          MATCH_name = 
                                                            "BTCiow"; 
                                                          goto MATCH_label_c133; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 3 & 0x7) 
                                                      -- reg_opcode at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTCow"; 
                                                          goto MATCH_label_c141; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTCow"; 
                                                            goto MATCH_label_c143; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTCow"; 
                                                            goto MATCH_label_c142; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTCow"; 
                                                          goto MATCH_label_c144; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTCow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24080 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c142; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c143; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTCow"; 
                                                      goto MATCH_label_c144; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTCow"; 
                                                    goto MATCH_label_c141; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "BTRow"; 
                                                          goto MATCH_label_c137; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "BTRow"; 
                                                            goto MATCH_label_c139; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "BTRow"; 
                                                            goto MATCH_label_c138; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "BTRow"; 
                                                          goto MATCH_label_c140; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTRow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 1287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24201 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c138; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c139; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = "BTRow"; 
                                                      goto MATCH_label_c140; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = "BTRow"; 
                                                    goto MATCH_label_c137; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c145; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c147;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c146;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c148; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1335 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);
		return;

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 24335 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c146;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c147;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c148;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c145; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c149; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c151;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c150;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c152; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1323 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);
		return;


#line 24436 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c150;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c151;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c152;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c149; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 6: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "MOVSX.Gv.Ebow"; 
                                                          goto MATCH_label_c157; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "MOVSX.Gv.Ebow"; 
                                                            goto MATCH_label_c159; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "MOVSX.Gv.Ebow"; 
                                                            goto MATCH_label_c158; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "MOVSX.Gv.Ebow"; 
                                                          goto MATCH_label_c160; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned r16 = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 24551 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c158; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c159; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVSX.Gv.Ebow"; 
                                                      goto MATCH_label_c160; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "MOVSX.Gv.Ebow"; 
                                                    goto MATCH_label_c157; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_name = 
                                                            "MOVZX.Gv.Ebow"; 
                                                          goto MATCH_label_c153; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_name = 
                                                              "MOVZX.Gv.Ebow"; 
                                                            goto MATCH_label_c155; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_name = 
                                                              "MOVZX.Gv.Ebow"; 
                                                            goto MATCH_label_c154; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_name = 
                                                            "MOVZX.Gv.Ebow"; 
                                                          goto MATCH_label_c156; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      { 
                                                        const char *name = 
                                                          MATCH_name;
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned r16 = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 6 + MATCH_p; 
                                                        
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 24677 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c154; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c155; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_name = 
                                                        "MOVZX.Gv.Ebow"; 
                                                      goto MATCH_label_c156; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_name = 
                                                      "MOVZX.Gv.Ebow"; 
                                                    goto MATCH_label_c153; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 12: 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */ == 1) 
                                        if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                /* page at 16 */ == 1) 
                                          goto MATCH_label_c64;  /*opt-block+*/
                                        else { 
                                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                          
                                            switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                  /* mod at 24 */) {
                                              case 0: 
                                                
                                                  switch((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */) {
                                                    case 0: case 1: case 2: 
                                                    case 3: case 6: case 7: 
                                                      MATCH_name = 
                                                        "XADD.Ev.Gvow"; 
                                                      goto MATCH_label_c161; 
                                                      
                                                      break;
                                                    case 4: 
                                                      MATCH_w_8_32 = 
                                                        fetch8(4 + MATCH_p); 
                                                      if ((MATCH_w_8_32 & 0x7) 
                                                              /* base at 32 */ == 5 && 
                                                        (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ && 
                                                        (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ < 8)) { 
                                                        MATCH_name = 
                                                          "XADD.Ev.Gvow"; 
                                                        goto MATCH_label_c163; 
                                                        
                                                      } /*opt-block*/
                                                      else { 
                                                        MATCH_name = 
                                                          "XADD.Ev.Gvow"; 
                                                        goto MATCH_label_c162; 
                                                        
                                                      } /*opt-block*/
                                                      
                                                      break;
                                                    case 5: 
                                                      MATCH_name = 
                                                        "XADD.Ev.Gvow"; 
                                                      goto MATCH_label_c164; 
                                                      
                                                      break;
                                                    default: assert(0);
                                                  } /* (MATCH_w_8_24 & 0x7) 
                                                        -- r_m at 24 --*/ 
                                                break;
                                              case 1: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  { 
                                                    const char *name = 
                                                      MATCH_name;
                                                    unsigned Eaddr = 
                                                      3 + 
                                                      addressToPC(MATCH_p);
                                                    unsigned reg = 
                                                      (MATCH_w_8_24 >> 3 & 0x7) 
                                                            /* reg_opcode at 24 */;
                                                    nextPC = 6 + MATCH_p; 
                                                    
#line 333 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24810 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                } /*opt-block*/
                                                else { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c162; 
                                                  
                                                } /*opt-block*/
                                                
                                                break;
                                              case 2: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c163; 
                                                  
                                                } /*opt-block*/
                                                else { 
                                                  MATCH_name = 
                                                    "XADD.Ev.Gvow"; 
                                                  goto MATCH_label_c164; 
                                                  
                                                } /*opt-block*/
                                                
                                                break;
                                              case 3: 
                                                MATCH_name = "XADD.Ev.Gvow"; 
                                                goto MATCH_label_c161; 
                                                
                                                break;
                                              default: assert(0);
                                            } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                  -- mod at 24 --*/ 
                                          
                                        } /*opt-block*/ 
                                      else 
                                        goto MATCH_label_c64;  /*opt-block+*/
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 4 & 0xf) 
                                        -- row at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SBBmrow"; 
                                            goto MATCH_label_c169; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SBBmrow"; 
                                              goto MATCH_label_c171; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SBBmrow"; 
                                              goto MATCH_label_c170; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SBBmrow"; 
                                            goto MATCH_label_c172; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 24944 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c170; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c171; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBmrow"; 
                                        goto MATCH_label_c172; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SBBmrow"; 
                                      goto MATCH_label_c169; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADCmrow"; 
                                            goto MATCH_label_c165; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADCmrow"; 
                                              goto MATCH_label_c167; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADCmrow"; 
                                              goto MATCH_label_c166; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADCmrow"; 
                                            goto MATCH_label_c168; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25053 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c166; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c167; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCmrow"; 
                                        goto MATCH_label_c168; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADCmrow"; 
                                      goto MATCH_label_c165; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SBBrmow"; 
                                            goto MATCH_label_c177; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SBBrmow"; 
                                              goto MATCH_label_c179; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SBBrmow"; 
                                              goto MATCH_label_c178; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SBBrmow"; 
                                            goto MATCH_label_c180; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25165 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c178; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c179; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SBBrmow"; 
                                        goto MATCH_label_c180; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SBBrmow"; 
                                      goto MATCH_label_c177; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ADCrmow"; 
                                            goto MATCH_label_c173; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ADCrmow"; 
                                              goto MATCH_label_c175; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ADCrmow"; 
                                              goto MATCH_label_c174; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ADCrmow"; 
                                            goto MATCH_label_c176; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25274 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c174; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c175; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ADCrmow"; 
                                        goto MATCH_label_c176; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ADCrmow"; 
                                      goto MATCH_label_c173; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_138[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25337 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_138[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25361 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SUBmrow"; 
                                            goto MATCH_label_c185; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SUBmrow"; 
                                              goto MATCH_label_c187; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SUBmrow"; 
                                              goto MATCH_label_c186; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SUBmrow"; 
                                            goto MATCH_label_c188; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25446 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c186; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c187; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBmrow"; 
                                        goto MATCH_label_c188; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SUBmrow"; 
                                      goto MATCH_label_c185; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ANDmrow"; 
                                            goto MATCH_label_c181; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ANDmrow"; 
                                              goto MATCH_label_c183; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ANDmrow"; 
                                              goto MATCH_label_c182; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ANDmrow"; 
                                            goto MATCH_label_c184; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25555 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c182; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c183; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDmrow"; 
                                        goto MATCH_label_c184; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ANDmrow"; 
                                      goto MATCH_label_c181; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SUBrmow"; 
                                            goto MATCH_label_c193; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SUBrmow"; 
                                              goto MATCH_label_c195; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SUBrmow"; 
                                              goto MATCH_label_c194; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SUBrmow"; 
                                            goto MATCH_label_c196; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1379 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25667 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c194; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c195; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SUBrmow"; 
                                        goto MATCH_label_c196; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SUBrmow"; 
                                      goto MATCH_label_c193; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "ANDrmow"; 
                                            goto MATCH_label_c189; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ANDrmow"; 
                                              goto MATCH_label_c191; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ANDrmow"; 
                                              goto MATCH_label_c190; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "ANDrmow"; 
                                            goto MATCH_label_c192; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 25776 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c190; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c191; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "ANDrmow"; 
                                        goto MATCH_label_c192; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "ANDrmow"; 
                                      goto MATCH_label_c189; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_151[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25839 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_151[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 25863 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPmrow"; 
                                            goto MATCH_label_c201; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPmrow"; 
                                              goto MATCH_label_c203; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPmrow"; 
                                              goto MATCH_label_c202; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPmrow"; 
                                            goto MATCH_label_c204; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 25948 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c202; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c203; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPmrow"; 
                                        goto MATCH_label_c204; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPmrow"; 
                                      goto MATCH_label_c201; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XORmrow"; 
                                            goto MATCH_label_c197; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XORmrow"; 
                                              goto MATCH_label_c199; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XORmrow"; 
                                              goto MATCH_label_c198; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XORmrow"; 
                                            goto MATCH_label_c200; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 26057 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c198; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c199; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORmrow"; 
                                        goto MATCH_label_c200; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XORmrow"; 
                                      goto MATCH_label_c197; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "CMPrmow"; 
                                            goto MATCH_label_c209; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "CMPrmow"; 
                                              goto MATCH_label_c211; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "CMPrmow"; 
                                              goto MATCH_label_c210; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "CMPrmow"; 
                                            goto MATCH_label_c212; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1367 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 26169 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c210; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c211; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "CMPrmow"; 
                                        goto MATCH_label_c212; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "CMPrmow"; 
                                      goto MATCH_label_c209; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XORrmow"; 
                                            goto MATCH_label_c205; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XORrmow"; 
                                              goto MATCH_label_c207; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XORrmow"; 
                                              goto MATCH_label_c206; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XORrmow"; 
                                            goto MATCH_label_c208; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1373 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 26278 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c206; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c207; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XORrmow"; 
                                        goto MATCH_label_c208; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XORrmow"; 
                                      goto MATCH_label_c205; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_164[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26341 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_164[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26365 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 4: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = 
                            MATCH_name_page_165[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 26391 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = 
                            MATCH_name_page_165[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1094 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 26411 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_name = 
                            MATCH_name_page_166[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 844 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);  // Check!


#line 26434 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = 
                            MATCH_name_page_166[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 805 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);  // Check!


#line 26454 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 793 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 26484 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "IMUL.Ivw"; 
                                            goto MATCH_label_c213; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "IMUL.Ivw"; 
                                              goto MATCH_label_c215; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "IMUL.Ivw"; 
                                              goto MATCH_label_c214; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_16_56 = 
                                              fetch16(7 + MATCH_p); 
                                            MATCH_name = "IMUL.Ivw"; 
                                            goto MATCH_label_c216; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_40 = fetch16(5 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~32768..32767] */ i16 = 
                                            sign_extend(
                                                        (MATCH_w_16_40 & 0xffff) 
                                                              /* i16 at 40 */, 
                                                        16);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 7 + MATCH_p; 
                                          
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 26571 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_32 = fetch16(4 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c214; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_64 = fetch16(8 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c215; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_56 = fetch16(7 + MATCH_p); 
                                        MATCH_name = "IMUL.Ivw"; 
                                        goto MATCH_label_c216; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                      MATCH_name = "IMUL.Ivw"; 
                                      goto MATCH_label_c213; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_16 & 0xff) 
                                                      /* i8 at 16 */, 8);
                                  nextPC = 3 + MATCH_p; 
                                  
#line 799 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8);


#line 26635 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "IMUL.Ibow"; 
                                            goto MATCH_label_c217; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "IMUL.Ibow"; 
                                              goto MATCH_label_c219; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "IMUL.Ibow"; 
                                              goto MATCH_label_c218; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            MATCH_name = "IMUL.Ibow"; 
                                            goto MATCH_label_c220; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~128..127] */ i8 = 
                                            sign_extend(
                                                        (MATCH_w_8_40 & 0xff) 
                                                              /* i8 at 40 */, 
                                                        8);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 1133 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 26722 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c218; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c219; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        MATCH_name = "IMUL.Ibow"; 
                                        goto MATCH_label_c220; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "IMUL.Ibow"; 
                                      goto MATCH_label_c217; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 7: 
                        goto MATCH_label_c64; break;
                      case 8: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVmrow"; 
                                            goto MATCH_label_c253; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVmrow"; 
                                              goto MATCH_label_c255; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVmrow"; 
                                              goto MATCH_label_c254; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVmrow"; 
                                            goto MATCH_label_c256; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVmrow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 26851 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c254; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c255; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVmrow"; 
                                        goto MATCH_label_c256; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVmrow"; 
                                      goto MATCH_label_c253; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ADDiw"; 
                                                  goto MATCH_label_c221; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ADDiw"; 
                                                    goto MATCH_label_c223; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ADDiw"; 
                                                    goto MATCH_label_c222; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ADDiw"; 
                                                  goto MATCH_label_c224; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 26977 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c222; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c223; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ADDiw"; 
                                              goto MATCH_label_c224; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ADDiw"; 
                                            goto MATCH_label_c221; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ORiw"; 
                                                  goto MATCH_label_c225; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ORiw"; 
                                                    goto MATCH_label_c227; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ORiw"; 
                                                    goto MATCH_label_c226; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ORiw"; 
                                                  goto MATCH_label_c228; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27106 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c226; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c227; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ORiw"; 
                                              goto MATCH_label_c228; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ORiw"; 
                                            goto MATCH_label_c225; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ADCiw"; 
                                                  goto MATCH_label_c229; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ADCiw"; 
                                                    goto MATCH_label_c231; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ADCiw"; 
                                                    goto MATCH_label_c230; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ADCiw"; 
                                                  goto MATCH_label_c232; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27235 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c230; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c231; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ADCiw"; 
                                              goto MATCH_label_c232; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ADCiw"; 
                                            goto MATCH_label_c229; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "SBBiw"; 
                                                  goto MATCH_label_c233; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "SBBiw"; 
                                                    goto MATCH_label_c235; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "SBBiw"; 
                                                    goto MATCH_label_c234; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "SBBiw"; 
                                                  goto MATCH_label_c236; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27364 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c234; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c235; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "SBBiw"; 
                                              goto MATCH_label_c236; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "SBBiw"; 
                                            goto MATCH_label_c233; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "ANDiw"; 
                                                  goto MATCH_label_c237; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "ANDiw"; 
                                                    goto MATCH_label_c239; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "ANDiw"; 
                                                    goto MATCH_label_c238; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "ANDiw"; 
                                                  goto MATCH_label_c240; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27493 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c238; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c239; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "ANDiw"; 
                                              goto MATCH_label_c240; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "ANDiw"; 
                                            goto MATCH_label_c237; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "SUBiw"; 
                                                  goto MATCH_label_c241; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "SUBiw"; 
                                                    goto MATCH_label_c243; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "SUBiw"; 
                                                    goto MATCH_label_c242; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "SUBiw"; 
                                                  goto MATCH_label_c244; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27622 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c242; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c243; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "SUBiw"; 
                                              goto MATCH_label_c244; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "SUBiw"; 
                                            goto MATCH_label_c241; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "XORiw"; 
                                                  goto MATCH_label_c245; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "XORiw"; 
                                                    goto MATCH_label_c247; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "XORiw"; 
                                                    goto MATCH_label_c246; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "XORiw"; 
                                                  goto MATCH_label_c248; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27751 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c246; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c247; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "XORiw"; 
                                              goto MATCH_label_c248; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "XORiw"; 
                                            goto MATCH_label_c245; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  MATCH_name = "CMPiw"; 
                                                  goto MATCH_label_c249; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    MATCH_name = "CMPiw"; 
                                                    goto MATCH_label_c251; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    MATCH_name = "CMPiw"; 
                                                    goto MATCH_label_c250; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  MATCH_name = "CMPiw"; 
                                                  goto MATCH_label_c252; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 27880 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c250; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c251; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "CMPiw"; 
                                              goto MATCH_label_c252; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            MATCH_name = "CMPiw"; 
                                            goto MATCH_label_c249; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "MOVrmow"; 
                                            goto MATCH_label_c289; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "MOVrmow"; 
                                              goto MATCH_label_c291; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "MOVrmow"; 
                                              goto MATCH_label_c290; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "MOVrmow"; 
                                            goto MATCH_label_c292; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVrmow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 28005 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c290; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c291; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "MOVrmow"; 
                                        goto MATCH_label_c292; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "MOVrmow"; 
                                      goto MATCH_label_c289; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ADDiowb"; 
                                                  goto MATCH_label_c257; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ADDiowb"; 
                                                    goto MATCH_label_c259; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ADDiowb"; 
                                                    goto MATCH_label_c258; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ADDiowb"; 
                                                  goto MATCH_label_c260; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28131 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c258; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c259; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ADDiowb"; 
                                              goto MATCH_label_c260; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ADDiowb"; 
                                            goto MATCH_label_c257; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ORiowb"; 
                                                  goto MATCH_label_c261; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ORiowb"; 
                                                    goto MATCH_label_c263; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ORiowb"; 
                                                    goto MATCH_label_c262; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ORiowb"; 
                                                  goto MATCH_label_c264; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28260 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c262; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c263; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ORiowb"; 
                                              goto MATCH_label_c264; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ORiowb"; 
                                            goto MATCH_label_c261; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ADCiowb"; 
                                                  goto MATCH_label_c265; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ADCiowb"; 
                                                    goto MATCH_label_c267; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ADCiowb"; 
                                                    goto MATCH_label_c266; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ADCiowb"; 
                                                  goto MATCH_label_c268; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28389 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c266; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c267; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ADCiowb"; 
                                              goto MATCH_label_c268; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ADCiowb"; 
                                            goto MATCH_label_c265; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "SBBiowb"; 
                                                  goto MATCH_label_c269; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "SBBiowb"; 
                                                    goto MATCH_label_c271; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SBBiowb"; 
                                                    goto MATCH_label_c270; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "SBBiowb"; 
                                                  goto MATCH_label_c272; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28518 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c270; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c271; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SBBiowb"; 
                                              goto MATCH_label_c272; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SBBiowb"; 
                                            goto MATCH_label_c269; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "ANDiowb"; 
                                                  goto MATCH_label_c273; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "ANDiowb"; 
                                                    goto MATCH_label_c275; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "ANDiowb"; 
                                                    goto MATCH_label_c274; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "ANDiowb"; 
                                                  goto MATCH_label_c276; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28647 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c274; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c275; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ANDiowb"; 
                                              goto MATCH_label_c276; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ANDiowb"; 
                                            goto MATCH_label_c273; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "SUBiowb"; 
                                                  goto MATCH_label_c277; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "SUBiowb"; 
                                                    goto MATCH_label_c279; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "SUBiowb"; 
                                                    goto MATCH_label_c278; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "SUBiowb"; 
                                                  goto MATCH_label_c280; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28776 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c278; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c279; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SUBiowb"; 
                                              goto MATCH_label_c280; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SUBiowb"; 
                                            goto MATCH_label_c277; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "XORiowb"; 
                                                  goto MATCH_label_c281; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "XORiowb"; 
                                                    goto MATCH_label_c283; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "XORiowb"; 
                                                    goto MATCH_label_c282; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "XORiowb"; 
                                                  goto MATCH_label_c284; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 28905 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c282; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c283; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "XORiowb"; 
                                              goto MATCH_label_c284; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "XORiowb"; 
                                            goto MATCH_label_c281; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = "CMPiowb"; 
                                                  goto MATCH_label_c285; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = "CMPiowb"; 
                                                    goto MATCH_label_c287; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = "CMPiowb"; 
                                                    goto MATCH_label_c286; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = "CMPiowb"; 
                                                  goto MATCH_label_c288; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 29034 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c286; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c287; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "CMPiowb"; 
                                              goto MATCH_label_c288; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "CMPiowb"; 
                                            goto MATCH_label_c285; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "LEAow"; 
                                            { 
                                              const char *name = MATCH_name;
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 29118 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "LEAow"; 
                                              goto MATCH_label_c298; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "LEAow"; 
                                              goto MATCH_label_c297; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "LEAow"; 
                                            goto MATCH_label_c299; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LEAow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 29176 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c297; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c298; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "LEAow"; 
                                        goto MATCH_label_c299; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "TEST.Ev.Gvow"; 
                                            goto MATCH_label_c293; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "TEST.Ev.Gvow"; 
                                              goto MATCH_label_c295; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "TEST.Ev.Gvow"; 
                                              goto MATCH_label_c294; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "TEST.Ev.Gvow"; 
                                            goto MATCH_label_c296; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 29282 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c294; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c295; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "TEST.Ev.Gvow"; 
                                        goto MATCH_label_c296; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "TEST.Ev.Gvow"; 
                                      goto MATCH_label_c293; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "POP.Evow"; 
                                              goto MATCH_label_c304; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "POP.Evow"; 
                                                goto MATCH_label_c306; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "POP.Evow"; 
                                                goto MATCH_label_c305; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "POP.Evow"; 
                                              goto MATCH_label_c307; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "POP.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 29420 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c305; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c306; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "POP.Evow"; 
                                          goto MATCH_label_c307; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "POP.Evow"; 
                                        goto MATCH_label_c304; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "XCHG.Ev.Gvow"; 
                                            goto MATCH_label_c300; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "XCHG.Ev.Gvow"; 
                                              goto MATCH_label_c302; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "XCHG.Ev.Gvow"; 
                                              goto MATCH_label_c301; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "XCHG.Ev.Gvow"; 
                                            goto MATCH_label_c303; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 5 + MATCH_p; 
                                          
#line 297 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 29531 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c301; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c302; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "XCHG.Ev.Gvow"; 
                                        goto MATCH_label_c303; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "XCHG.Ev.Gvow"; 
                                      goto MATCH_label_c300; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_name = 
                                  MATCH_name_col_240[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1244 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29594 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_name = 
                                  MATCH_name_col_167[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1199 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29613 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else { 
                          MATCH_name = 
                            MATCH_name_page_239[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 327 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 29637 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_239[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned i16 = 
                                    (MATCH_w_16_16 & 0xffff) /* i16 at 16 */;
                                  nextPC = 4 + MATCH_p; 
                                  
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);


#line 29667 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_241[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));


#line 29689 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_241[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29712 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_page_242[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 971 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));


#line 29734 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_242[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29757 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_243[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29776 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_243[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29799 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_244[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 1220 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 29818 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_244[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            int /* [~32768..32767] */ i16 = 
                              sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16);
                            unsigned r16 = (MATCH_w_8_8 & 0x7) /* r16 at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 962 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_I16);  // Check!


#line 29849 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 12: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 3: case 4: case 5: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "ROLB.Ev.Ibow"; 
                                                  goto MATCH_label_c308; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "ROLB.Ev.Ibow"; 
                                                    goto MATCH_label_c310; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "ROLB.Ev.Ibow"; 
                                                    goto MATCH_label_c309; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "ROLB.Ev.Ibow"; 
                                                  goto MATCH_label_c311; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 29956 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c309; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c310; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "ROLB.Ev.Ibow"; 
                                              goto MATCH_label_c311; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "ROLB.Ev.Ibow"; 
                                            goto MATCH_label_c308; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RORB.Ev.Ibow"; 
                                                  goto MATCH_label_c312; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RORB.Ev.Ibow"; 
                                                    goto MATCH_label_c314; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RORB.Ev.Ibow"; 
                                                    goto MATCH_label_c313; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RORB.Ev.Ibow"; 
                                                  goto MATCH_label_c315; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30089 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c313; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c314; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RORB.Ev.Ibow"; 
                                              goto MATCH_label_c315; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RORB.Ev.Ibow"; 
                                            goto MATCH_label_c312; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCLB.Ev.Ibow"; 
                                                  goto MATCH_label_c316; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCLB.Ev.Ibow"; 
                                                    goto MATCH_label_c318; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCLB.Ev.Ibow"; 
                                                    goto MATCH_label_c317; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCLB.Ev.Ibow"; 
                                                  goto MATCH_label_c319; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30222 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c317; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c318; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RCLB.Ev.Ibow"; 
                                              goto MATCH_label_c319; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RCLB.Ev.Ibow"; 
                                            goto MATCH_label_c316; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCRB.Ev.Ibow"; 
                                                  goto MATCH_label_c320; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCRB.Ev.Ibow"; 
                                                    goto MATCH_label_c322; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "RCRB.Ev.Ibow"; 
                                                    goto MATCH_label_c321; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "RCRB.Ev.Ibow"; 
                                                  goto MATCH_label_c323; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30355 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c321; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c322; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "RCRB.Ev.Ibow"; 
                                              goto MATCH_label_c323; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "RCRB.Ev.Ibow"; 
                                            goto MATCH_label_c320; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.Ibow"; 
                                                  goto MATCH_label_c324; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.Ibow"; 
                                                    goto MATCH_label_c326; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.Ibow"; 
                                                    goto MATCH_label_c325; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.Ibow"; 
                                                  goto MATCH_label_c327; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30488 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c325; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c326; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SHLSALB.Ev.Ibow"; 
                                              goto MATCH_label_c327; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHLSALB.Ev.Ibow"; 
                                            goto MATCH_label_c324; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHRB.Ev.Ibow"; 
                                                  goto MATCH_label_c328; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHRB.Ev.Ibow"; 
                                                    goto MATCH_label_c330; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SHRB.Ev.Ibow"; 
                                                    goto MATCH_label_c329; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SHRB.Ev.Ibow"; 
                                                  goto MATCH_label_c331; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30621 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c329; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c330; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SHRB.Ev.Ibow"; 
                                              goto MATCH_label_c331; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SHRB.Ev.Ibow"; 
                                            goto MATCH_label_c328; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SARB.Ev.Ibow"; 
                                                  goto MATCH_label_c332; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SARB.Ev.Ibow"; 
                                                    goto MATCH_label_c334; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    MATCH_name = 
                                                      "SARB.Ev.Ibow"; 
                                                    goto MATCH_label_c333; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  MATCH_name = 
                                                    "SARB.Ev.Ibow"; 
                                                  goto MATCH_label_c335; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 30756 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c333; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c334; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              MATCH_name = "SARB.Ev.Ibow"; 
                                              goto MATCH_label_c335; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            MATCH_name = "SARB.Ev.Ibow"; 
                                            goto MATCH_label_c332; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = "MOV.Ew.Ivow"; 
                                              goto MATCH_label_c336; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                MATCH_name = "MOV.Ew.Ivow"; 
                                                goto MATCH_label_c338; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                MATCH_name = "MOV.Ew.Ivow"; 
                                                goto MATCH_label_c337; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "MOV.Ew.Ivow"; 
                                              goto MATCH_label_c339; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            int /* [~32768..32767] */ i16 = 
                                              sign_extend(
                                                          (MATCH_w_16_40 & 0xffff) 
                                                                /* i16 at 40 */, 
                                                          16);
                                            nextPC = 7 + MATCH_p; 
                                            
#line 953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 30897 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c337; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c338; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          MATCH_name = "MOV.Ew.Ivow"; 
                                          goto MATCH_label_c339; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        MATCH_name = "MOV.Ew.Ivow"; 
                                        goto MATCH_label_c336; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 13: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "ROLB.Ev.1ow"; 
                                                  goto MATCH_label_c340; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.1ow"; 
                                                    goto MATCH_label_c342; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.1ow"; 
                                                    goto MATCH_label_c341; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "ROLB.Ev.1ow"; 
                                                  goto MATCH_label_c343; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31032 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c341; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c342; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.1ow"; 
                                              goto MATCH_label_c343; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "ROLB.Ev.1ow"; 
                                            goto MATCH_label_c340; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RORB.Ev.1ow"; 
                                                  goto MATCH_label_c344; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RORB.Ev.1ow"; 
                                                    goto MATCH_label_c346; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RORB.Ev.1ow"; 
                                                    goto MATCH_label_c345; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RORB.Ev.1ow"; 
                                                  goto MATCH_label_c347; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31140 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c345; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c346; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.1ow"; 
                                              goto MATCH_label_c347; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RORB.Ev.1ow"; 
                                            goto MATCH_label_c344; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RCLB.Ev.1ow"; 
                                                  goto MATCH_label_c348; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.1ow"; 
                                                    goto MATCH_label_c350; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.1ow"; 
                                                    goto MATCH_label_c349; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RCLB.Ev.1ow"; 
                                                  goto MATCH_label_c351; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31248 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c349; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c350; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.1ow"; 
                                              goto MATCH_label_c351; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCLB.Ev.1ow"; 
                                            goto MATCH_label_c348; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "RCRB.Ev.1ow"; 
                                                  goto MATCH_label_c352; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.1ow"; 
                                                    goto MATCH_label_c354; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.1ow"; 
                                                    goto MATCH_label_c353; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "RCRB.Ev.1ow"; 
                                                  goto MATCH_label_c355; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31356 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c353; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c354; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.1ow"; 
                                              goto MATCH_label_c355; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCRB.Ev.1ow"; 
                                            goto MATCH_label_c352; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.1ow"; 
                                                  goto MATCH_label_c356; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.1ow"; 
                                                    goto MATCH_label_c358; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.1ow"; 
                                                    goto MATCH_label_c357; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.1ow"; 
                                                  goto MATCH_label_c359; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31466 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c357; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c358; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.1ow"; 
                                              goto MATCH_label_c359; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHLSALB.Ev.1ow"; 
                                            goto MATCH_label_c356; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SHRB.Ev.1ow"; 
                                                  goto MATCH_label_c360; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.1ow"; 
                                                    goto MATCH_label_c362; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.1ow"; 
                                                    goto MATCH_label_c361; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SHRB.Ev.1ow"; 
                                                  goto MATCH_label_c363; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31574 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c361; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c362; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.1ow"; 
                                              goto MATCH_label_c363; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHRB.Ev.1ow"; 
                                            goto MATCH_label_c360; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = "SARB.Ev.1ow"; 
                                                  goto MATCH_label_c364; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SARB.Ev.1ow"; 
                                                    goto MATCH_label_c366; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SARB.Ev.1ow"; 
                                                    goto MATCH_label_c365; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = "SARB.Ev.1ow"; 
                                                  goto MATCH_label_c367; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31684 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c365; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c366; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.1ow"; 
                                              goto MATCH_label_c367; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SARB.Ev.1ow"; 
                                            goto MATCH_label_c364; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "ROLB.Ev.CLow"; 
                                                  goto MATCH_label_c368; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.CLow"; 
                                                    goto MATCH_label_c370; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "ROLB.Ev.CLow"; 
                                                    goto MATCH_label_c369; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "ROLB.Ev.CLow"; 
                                                  goto MATCH_label_c371; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31809 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c369; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c370; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "ROLB.Ev.CLow"; 
                                              goto MATCH_label_c371; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "ROLB.Ev.CLow"; 
                                            goto MATCH_label_c368; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RORB.Ev.CLow"; 
                                                  goto MATCH_label_c372; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RORB.Ev.CLow"; 
                                                    goto MATCH_label_c374; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RORB.Ev.CLow"; 
                                                    goto MATCH_label_c373; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RORB.Ev.CLow"; 
                                                  goto MATCH_label_c375; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 31919 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c373; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c374; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RORB.Ev.CLow"; 
                                              goto MATCH_label_c375; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RORB.Ev.CLow"; 
                                            goto MATCH_label_c372; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RCLB.Ev.CLow"; 
                                                  goto MATCH_label_c376; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.CLow"; 
                                                    goto MATCH_label_c378; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCLB.Ev.CLow"; 
                                                    goto MATCH_label_c377; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RCLB.Ev.CLow"; 
                                                  goto MATCH_label_c379; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32029 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c377; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c378; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCLB.Ev.CLow"; 
                                              goto MATCH_label_c379; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCLB.Ev.CLow"; 
                                            goto MATCH_label_c376; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "RCRB.Ev.CLow"; 
                                                  goto MATCH_label_c380; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.CLow"; 
                                                    goto MATCH_label_c382; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "RCRB.Ev.CLow"; 
                                                    goto MATCH_label_c381; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "RCRB.Ev.CLow"; 
                                                  goto MATCH_label_c383; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32139 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c381; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c382; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "RCRB.Ev.CLow"; 
                                              goto MATCH_label_c383; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "RCRB.Ev.CLow"; 
                                            goto MATCH_label_c380; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.CLow"; 
                                                  goto MATCH_label_c384; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.CLow"; 
                                                    goto MATCH_label_c386; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHLSALB.Ev.CLow"; 
                                                    goto MATCH_label_c385; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHLSALB.Ev.CLow"; 
                                                  goto MATCH_label_c387; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32249 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c385; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c386; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHLSALB.Ev.CLow"; 
                                              goto MATCH_label_c387; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHLSALB.Ev.CLow"; 
                                            goto MATCH_label_c384; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SHRB.Ev.CLow"; 
                                                  goto MATCH_label_c388; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.CLow"; 
                                                    goto MATCH_label_c390; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SHRB.Ev.CLow"; 
                                                    goto MATCH_label_c389; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SHRB.Ev.CLow"; 
                                                  goto MATCH_label_c391; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32359 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c389; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c390; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SHRB.Ev.CLow"; 
                                              goto MATCH_label_c391; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SHRB.Ev.CLow"; 
                                            goto MATCH_label_c388; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_name = 
                                                    "SARB.Ev.CLow"; 
                                                  goto MATCH_label_c392; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_name = 
                                                      "SARB.Ev.CLow"; 
                                                    goto MATCH_label_c394; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_name = 
                                                      "SARB.Ev.CLow"; 
                                                    goto MATCH_label_c393; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_name = 
                                                    "SARB.Ev.CLow"; 
                                                  goto MATCH_label_c395; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32471 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c393; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c394; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SARB.Ev.CLow"; 
                                              goto MATCH_label_c395; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_name = "SARB.Ev.CLow"; 
                                            goto MATCH_label_c392; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 14: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 1 && 
                          (MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_311[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned relocd = 
                              4 + sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16) + 
                              addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 129 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 32542 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 15: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 7) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) 
                                  /* page at 8 */ == 1) { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "INC.Evow"; 
                                              goto MATCH_label_c424; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "INC.Evow"; 
                                                goto MATCH_label_c426; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "INC.Evow"; 
                                                goto MATCH_label_c425; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "INC.Evow"; 
                                              goto MATCH_label_c427; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "INC.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1100 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32623 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c425; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c426; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "INC.Evow"; 
                                          goto MATCH_label_c427; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "INC.Evow"; 
                                        goto MATCH_label_c424; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "DEC.Evow"; 
                                              goto MATCH_label_c428; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "DEC.Evow"; 
                                                goto MATCH_label_c430; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "DEC.Evow"; 
                                                goto MATCH_label_c429; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "DEC.Evow"; 
                                              goto MATCH_label_c431; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DEC.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1184 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 32727 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c429; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c430; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DEC.Evow"; 
                                          goto MATCH_label_c431; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "DEC.Evow"; 
                                        goto MATCH_label_c428; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 2: case 3: case 4: case 5: case 7: 
                                  goto MATCH_label_c64; break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "PUSH.Evow"; 
                                              goto MATCH_label_c432; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "PUSH.Evow"; 
                                                goto MATCH_label_c434; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "PUSH.Evow"; 
                                                goto MATCH_label_c433; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "PUSH.Evow"; 
                                              goto MATCH_label_c435; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "PUSH.Evow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 32845 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c433; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c434; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "PUSH.Evow"; 
                                          goto MATCH_label_c435; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "PUSH.Evow"; 
                                        goto MATCH_label_c432; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = "TEST.Ew.Iw"; 
                                              goto MATCH_label_c396; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                MATCH_name = "TEST.Ew.Iw"; 
                                                goto MATCH_label_c398; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                MATCH_name = "TEST.Ew.Iw"; 
                                                goto MATCH_label_c397; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              MATCH_name = "TEST.Ew.Iw"; 
                                              goto MATCH_label_c399; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            unsigned i16 = 
                                              (MATCH_w_16_40 & 0xffff) 
                                                    /* i16 at 40 */;
                                            nextPC = 7 + MATCH_p; 
                                            
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 32972 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c397; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c398; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          MATCH_name = "TEST.Ew.Iw"; 
                                          goto MATCH_label_c399; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        MATCH_name = "TEST.Ew.Iw"; 
                                        goto MATCH_label_c396; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  goto MATCH_label_c64; break;
                                case 2: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "NOTow"; 
                                              goto MATCH_label_c400; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "NOTow"; 
                                                goto MATCH_label_c402; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "NOTow"; 
                                                goto MATCH_label_c401; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "NOTow"; 
                                              goto MATCH_label_c403; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NOTow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33085 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c401; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c402; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NOTow"; 
                                          goto MATCH_label_c403; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "NOTow"; 
                                        goto MATCH_label_c400; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 3: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "NEGow"; 
                                              goto MATCH_label_c404; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "NEGow"; 
                                                goto MATCH_label_c406; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "NEGow"; 
                                                goto MATCH_label_c405; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "NEGow"; 
                                              goto MATCH_label_c407; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NEGow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33189 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c405; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c406; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "NEGow"; 
                                          goto MATCH_label_c407; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "NEGow"; 
                                        goto MATCH_label_c404; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 4: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "MUL.AXow"; 
                                              goto MATCH_label_c408; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "MUL.AXow"; 
                                                goto MATCH_label_c410; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "MUL.AXow"; 
                                                goto MATCH_label_c409; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "MUL.AXow"; 
                                              goto MATCH_label_c411; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "MUL.AXow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33293 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c409; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c410; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "MUL.AXow"; 
                                          goto MATCH_label_c411; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "MUL.AXow"; 
                                        goto MATCH_label_c408; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 5: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "IMULow"; 
                                              goto MATCH_label_c412; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "IMULow"; 
                                                goto MATCH_label_c414; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "IMULow"; 
                                                goto MATCH_label_c413; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "IMULow"; 
                                              goto MATCH_label_c415; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IMULow"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1145 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33397 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c413; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c414; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IMULow"; 
                                          goto MATCH_label_c415; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "IMULow"; 
                                        goto MATCH_label_c412; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "DIVAX"; 
                                              goto MATCH_label_c416; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "DIVAX"; 
                                                goto MATCH_label_c418; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "DIVAX"; 
                                                goto MATCH_label_c417; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "DIVAX"; 
                                              goto MATCH_label_c419; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DIVAX"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33501 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c417; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c418; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "DIVAX"; 
                                          goto MATCH_label_c419; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "DIVAX"; 
                                        goto MATCH_label_c416; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 7: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_name = "IDIVAX"; 
                                              goto MATCH_label_c420; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_name = "IDIVAX"; 
                                                goto MATCH_label_c422; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_name = "IDIVAX"; 
                                                goto MATCH_label_c421; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_name = "IDIVAX"; 
                                              goto MATCH_label_c423; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IDIVAX"; 
                                          { 
                                            const char *name = MATCH_name;
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            nextPC = 5 + MATCH_p; 
                                            
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 33605 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c421; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c422; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_name = "IDIVAX"; 
                                          goto MATCH_label_c423; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_name = "IDIVAX"; 
                                        goto MATCH_label_c420; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 167 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 16 bit offset: 66 0F 8X XX XX
	 */

#line 33683 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 165 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 33704 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 163 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 33725 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_12[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 161 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 33746 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 159 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 33767 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 157 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 33788 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 155 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 33809 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 153 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 33830 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADDib"; 
                                    goto MATCH_label_c436; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADDib"; 
                                      goto MATCH_label_c438; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADDib"; 
                                      goto MATCH_label_c437; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADDib"; 
                                    goto MATCH_label_c439; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 33912 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c437; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c438; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADDib"; 
                                goto MATCH_label_c439; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADDib"; 
                              goto MATCH_label_c436; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ORib"; 
                                    goto MATCH_label_c440; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ORib"; 
                                      goto MATCH_label_c442; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ORib"; 
                                      goto MATCH_label_c441; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ORib"; 
                                    goto MATCH_label_c443; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34021 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c441; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c442; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ORib"; 
                                goto MATCH_label_c443; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ORib"; 
                              goto MATCH_label_c440; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADCib"; 
                                    goto MATCH_label_c444; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADCib"; 
                                      goto MATCH_label_c446; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADCib"; 
                                      goto MATCH_label_c445; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADCib"; 
                                    goto MATCH_label_c447; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34130 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c445; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c446; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADCib"; 
                                goto MATCH_label_c447; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADCib"; 
                              goto MATCH_label_c444; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SBBib"; 
                                    goto MATCH_label_c448; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SBBib"; 
                                      goto MATCH_label_c450; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SBBib"; 
                                      goto MATCH_label_c449; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SBBib"; 
                                    goto MATCH_label_c451; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34239 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c449; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c450; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SBBib"; 
                                goto MATCH_label_c451; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SBBib"; 
                              goto MATCH_label_c448; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ANDib"; 
                                    goto MATCH_label_c452; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ANDib"; 
                                      goto MATCH_label_c454; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ANDib"; 
                                      goto MATCH_label_c453; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ANDib"; 
                                    goto MATCH_label_c455; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34348 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c453; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c454; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ANDib"; 
                                goto MATCH_label_c455; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ANDib"; 
                              goto MATCH_label_c452; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SUBib"; 
                                    goto MATCH_label_c456; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SUBib"; 
                                      goto MATCH_label_c458; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SUBib"; 
                                      goto MATCH_label_c457; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SUBib"; 
                                    goto MATCH_label_c459; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34457 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c457; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c458; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SUBib"; 
                                goto MATCH_label_c459; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SUBib"; 
                              goto MATCH_label_c456; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "XORib"; 
                                    goto MATCH_label_c460; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "XORib"; 
                                      goto MATCH_label_c462; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "XORib"; 
                                      goto MATCH_label_c461; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "XORib"; 
                                    goto MATCH_label_c463; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34566 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c461; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c462; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "XORib"; 
                                goto MATCH_label_c463; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "XORib"; 
                              goto MATCH_label_c460; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "CMPib"; 
                                    goto MATCH_label_c464; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "CMPib"; 
                                      goto MATCH_label_c466; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "CMPib"; 
                                      goto MATCH_label_c465; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "CMPib"; 
                                    goto MATCH_label_c467; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 34675 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c465; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c466; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "CMPib"; 
                                goto MATCH_label_c467; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "CMPib"; 
                              goto MATCH_label_c464; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ADDid"; 
                                    goto MATCH_label_c468; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ADDid"; 
                                      goto MATCH_label_c470; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ADDid"; 
                                      goto MATCH_label_c469; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ADDid"; 
                                    goto MATCH_label_c471; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 34790 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c469; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c470; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ADDid"; 
                                goto MATCH_label_c471; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ADDid"; 
                              goto MATCH_label_c468; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ORid"; 
                                    goto MATCH_label_c472; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ORid"; 
                                      goto MATCH_label_c474; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ORid"; 
                                      goto MATCH_label_c473; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ORid"; 
                                    goto MATCH_label_c475; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 34897 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c473; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c474; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ORid"; 
                                goto MATCH_label_c475; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ORid"; 
                              goto MATCH_label_c472; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ADCid"; 
                                    goto MATCH_label_c476; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ADCid"; 
                                      goto MATCH_label_c478; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ADCid"; 
                                      goto MATCH_label_c477; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ADCid"; 
                                    goto MATCH_label_c479; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35004 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c477; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c478; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ADCid"; 
                                goto MATCH_label_c479; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ADCid"; 
                              goto MATCH_label_c476; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "SBBid"; 
                                    goto MATCH_label_c480; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "SBBid"; 
                                      goto MATCH_label_c482; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "SBBid"; 
                                      goto MATCH_label_c481; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "SBBid"; 
                                    goto MATCH_label_c483; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35111 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c481; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c482; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "SBBid"; 
                                goto MATCH_label_c483; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "SBBid"; 
                              goto MATCH_label_c480; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "ANDid"; 
                                    goto MATCH_label_c484; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "ANDid"; 
                                      goto MATCH_label_c486; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "ANDid"; 
                                      goto MATCH_label_c485; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "ANDid"; 
                                    goto MATCH_label_c487; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35218 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c485; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c486; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "ANDid"; 
                                goto MATCH_label_c487; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "ANDid"; 
                              goto MATCH_label_c484; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "SUBid"; 
                                    goto MATCH_label_c488; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "SUBid"; 
                                      goto MATCH_label_c490; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "SUBid"; 
                                      goto MATCH_label_c489; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "SUBid"; 
                                    goto MATCH_label_c491; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35325 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c489; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c490; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "SUBid"; 
                                goto MATCH_label_c491; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "SUBid"; 
                              goto MATCH_label_c488; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "XORid"; 
                                    goto MATCH_label_c492; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "XORid"; 
                                      goto MATCH_label_c494; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "XORid"; 
                                      goto MATCH_label_c493; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "XORid"; 
                                    goto MATCH_label_c495; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35432 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c493; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c494; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "XORid"; 
                                goto MATCH_label_c495; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "XORid"; 
                              goto MATCH_label_c492; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "CMPid"; 
                                    goto MATCH_label_c496; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "CMPid"; 
                                      goto MATCH_label_c498; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "CMPid"; 
                                      goto MATCH_label_c497; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "CMPid"; 
                                    goto MATCH_label_c499; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 35539 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c497; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c498; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "CMPid"; 
                                goto MATCH_label_c499; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "CMPid"; 
                              goto MATCH_label_c496; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADDiodb"; 
                                    goto MATCH_label_c500; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADDiodb"; 
                                      goto MATCH_label_c502; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADDiodb"; 
                                      goto MATCH_label_c501; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADDiodb"; 
                                    goto MATCH_label_c503; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35658 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c501; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c502; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADDiodb"; 
                                goto MATCH_label_c503; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADDiodb"; 
                              goto MATCH_label_c500; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ORiodb"; 
                                    goto MATCH_label_c504; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ORiodb"; 
                                      goto MATCH_label_c506; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ORiodb"; 
                                      goto MATCH_label_c505; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ORiodb"; 
                                    goto MATCH_label_c507; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35767 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c505; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c506; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ORiodb"; 
                                goto MATCH_label_c507; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ORiodb"; 
                              goto MATCH_label_c504; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ADCiodb"; 
                                    goto MATCH_label_c508; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ADCiodb"; 
                                      goto MATCH_label_c510; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ADCiodb"; 
                                      goto MATCH_label_c509; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ADCiodb"; 
                                    goto MATCH_label_c511; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35876 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c509; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c510; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ADCiodb"; 
                                goto MATCH_label_c511; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ADCiodb"; 
                              goto MATCH_label_c508; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SBBiodb"; 
                                    goto MATCH_label_c512; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SBBiodb"; 
                                      goto MATCH_label_c514; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SBBiodb"; 
                                      goto MATCH_label_c513; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SBBiodb"; 
                                    goto MATCH_label_c515; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 35985 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c513; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c514; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SBBiodb"; 
                                goto MATCH_label_c515; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SBBiodb"; 
                              goto MATCH_label_c512; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ANDiodb"; 
                                    goto MATCH_label_c516; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ANDiodb"; 
                                      goto MATCH_label_c518; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ANDiodb"; 
                                      goto MATCH_label_c517; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ANDiodb"; 
                                    goto MATCH_label_c519; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1526 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 36097 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c517; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c518; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ANDiodb"; 
                                goto MATCH_label_c519; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ANDiodb"; 
                              goto MATCH_label_c516; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SUBiodb"; 
                                    goto MATCH_label_c520; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SUBiodb"; 
                                      goto MATCH_label_c522; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SUBiodb"; 
                                      goto MATCH_label_c521; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SUBiodb"; 
                                    goto MATCH_label_c523; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36206 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c521; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c522; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SUBiodb"; 
                                goto MATCH_label_c523; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SUBiodb"; 
                              goto MATCH_label_c520; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "XORiodb"; 
                                    goto MATCH_label_c524; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "XORiodb"; 
                                      goto MATCH_label_c526; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "XORiodb"; 
                                      goto MATCH_label_c525; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "XORiodb"; 
                                    goto MATCH_label_c527; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36315 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c525; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c526; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "XORiodb"; 
                                goto MATCH_label_c527; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "XORiodb"; 
                              goto MATCH_label_c524; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "CMPiodb"; 
                                    goto MATCH_label_c528; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "CMPiodb"; 
                                      goto MATCH_label_c530; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "CMPiodb"; 
                                      goto MATCH_label_c529; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "CMPiodb"; 
                                    goto MATCH_label_c531; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 36424 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c529; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c530; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "CMPiodb"; 
                                goto MATCH_label_c531; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "CMPiodb"; 
                              goto MATCH_label_c528; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "TEST.Eb.Gb"; 
                              goto MATCH_label_c532; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "TEST.Eb.Gb"; 
                                goto MATCH_label_c534; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "TEST.Eb.Gb"; 
                                goto MATCH_label_c533; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "TEST.Eb.Gb"; 
                              goto MATCH_label_c535; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 36529 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c533; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c534; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Eb.Gb"; 
                          goto MATCH_label_c535; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "TEST.Eb.Gb"; 
                        goto MATCH_label_c532; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "TEST.Ev.Gvod"; 
                              goto MATCH_label_c536; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "TEST.Ev.Gvod"; 
                                goto MATCH_label_c538; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "TEST.Ev.Gvod"; 
                                goto MATCH_label_c537; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "TEST.Ev.Gvod"; 
                              goto MATCH_label_c539; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 36626 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c537; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c538; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "TEST.Ev.Gvod"; 
                          goto MATCH_label_c539; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "TEST.Ev.Gvod"; 
                        goto MATCH_label_c536; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XCHG.Eb.Gb"; 
                              goto MATCH_label_c540; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XCHG.Eb.Gb"; 
                                goto MATCH_label_c542; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XCHG.Eb.Gb"; 
                                goto MATCH_label_c541; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XCHG.Eb.Gb"; 
                              goto MATCH_label_c543; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 300 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 36723 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c541; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c542; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Eb.Gb"; 
                          goto MATCH_label_c543; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XCHG.Eb.Gb"; 
                        goto MATCH_label_c540; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "XCHG.Ev.Gvod"; 
                              goto MATCH_label_c544; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "XCHG.Ev.Gvod"; 
                                goto MATCH_label_c546; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "XCHG.Ev.Gvod"; 
                                goto MATCH_label_c545; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "XCHG.Ev.Gvod"; 
                              goto MATCH_label_c547; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 294 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 36820 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c545; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c546; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "XCHG.Ev.Gvod"; 
                          goto MATCH_label_c547; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_name = "XCHG.Ev.Gvod"; 
                        goto MATCH_label_c544; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            if ((MATCH_w_8_0 & 0x7) /* col at 0 */ == 0) { 
              MATCH_name = 
                MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
              { 
                const char *name = MATCH_name;
                nextPC = 1 + MATCH_p; 
                
#line 303 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 36875 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_name = 
                MATCH_name_col_427[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
              { 
                const char *name = MATCH_name;
                unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
                nextPC = 1 + MATCH_p; 
                
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32);


#line 36894 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 983 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));

//	| MOV.Sw.Ew(Mem, sr16) [name] =>
//		result.rtl = instantiate(pc, name, DIS_MEM, DIS_SR16);

//	| MOV.Ew.Sw(Mem, sr16) [name] =>
//		result.rtl = instantiate(pc, name, DIS_MEM, DIS_SR16);


#line 36925 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));


#line 36945 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));


#line 36965 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_25[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 968 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, addReloc(DIS_OFF));


#line 36985 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);

//	| MOV.Rd.Dd(_, _) =>
//	//| MOV.Rd.Dd(reg, dr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Dd.Rd(_, _) =>
//	//| MOV.Dd.Rd(dr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Rd.Cd(_, _) =>
//	//| MOV.Rd.Cd(reg, cr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Cd.Rd(_, _) =>
//	//| MOV.Cd.Rd(cr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");


#line 37019 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_428[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37037 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1223 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37055 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_53[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1217 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 37073 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            MATCH_name = 
              MATCH_name_row_52[(MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */]; 
            { 
              const char *name = MATCH_name;
              int /* [~128..127] */ i8 = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r8 = (MATCH_w_8_0 & 0x7) /* r8 at 0 */;
              nextPC = 2 + MATCH_p; 
              
#line 965 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_I8);


#line 37098 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ROLB.Eb.Ib"; 
                                    goto MATCH_label_c548; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ROLB.Eb.Ib"; 
                                      goto MATCH_label_c550; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ROLB.Eb.Ib"; 
                                      goto MATCH_label_c549; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ROLB.Eb.Ib"; 
                                    goto MATCH_label_c551; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37177 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c549; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c550; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ROLB.Eb.Ib"; 
                                goto MATCH_label_c551; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ROLB.Eb.Ib"; 
                              goto MATCH_label_c548; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RORB.Eb.Ib"; 
                                    goto MATCH_label_c552; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RORB.Eb.Ib"; 
                                      goto MATCH_label_c554; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RORB.Eb.Ib"; 
                                      goto MATCH_label_c553; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RORB.Eb.Ib"; 
                                    goto MATCH_label_c555; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37286 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c553; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c554; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RORB.Eb.Ib"; 
                                goto MATCH_label_c555; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RORB.Eb.Ib"; 
                              goto MATCH_label_c552; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCLB.Eb.Ib"; 
                                    goto MATCH_label_c556; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCLB.Eb.Ib"; 
                                      goto MATCH_label_c558; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCLB.Eb.Ib"; 
                                      goto MATCH_label_c557; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCLB.Eb.Ib"; 
                                    goto MATCH_label_c559; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37395 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c557; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c558; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCLB.Eb.Ib"; 
                                goto MATCH_label_c559; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCLB.Eb.Ib"; 
                              goto MATCH_label_c556; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCRB.Eb.Ib"; 
                                    goto MATCH_label_c560; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCRB.Eb.Ib"; 
                                      goto MATCH_label_c562; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCRB.Eb.Ib"; 
                                      goto MATCH_label_c561; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCRB.Eb.Ib"; 
                                    goto MATCH_label_c563; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37504 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c561; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c562; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCRB.Eb.Ib"; 
                                goto MATCH_label_c563; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCRB.Eb.Ib"; 
                              goto MATCH_label_c560; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Eb.Ib"; 
                                    goto MATCH_label_c564; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Eb.Ib"; 
                                      goto MATCH_label_c566; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Eb.Ib"; 
                                      goto MATCH_label_c565; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Eb.Ib"; 
                                    goto MATCH_label_c567; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37613 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c565; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c566; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHLSALB.Eb.Ib"; 
                                goto MATCH_label_c567; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHLSALB.Eb.Ib"; 
                              goto MATCH_label_c564; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHRB.Eb.Ib"; 
                                    goto MATCH_label_c568; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHRB.Eb.Ib"; 
                                      goto MATCH_label_c570; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRB.Eb.Ib"; 
                                      goto MATCH_label_c569; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHRB.Eb.Ib"; 
                                    goto MATCH_label_c571; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37722 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c569; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c570; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHRB.Eb.Ib"; 
                                goto MATCH_label_c571; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHRB.Eb.Ib"; 
                              goto MATCH_label_c568; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SARB.Eb.Ib"; 
                                    goto MATCH_label_c572; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SARB.Eb.Ib"; 
                                      goto MATCH_label_c574; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SARB.Eb.Ib"; 
                                      goto MATCH_label_c573; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SARB.Eb.Ib"; 
                                    goto MATCH_label_c575; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 37833 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c573; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c574; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SARB.Eb.Ib"; 
                                goto MATCH_label_c575; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SARB.Eb.Ib"; 
                              goto MATCH_label_c572; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "ROLB.Ev.Ibod"; 
                                    goto MATCH_label_c576; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "ROLB.Ev.Ibod"; 
                                      goto MATCH_label_c578; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "ROLB.Ev.Ibod"; 
                                      goto MATCH_label_c577; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "ROLB.Ev.Ibod"; 
                                    goto MATCH_label_c579; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 37950 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c577; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c578; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "ROLB.Ev.Ibod"; 
                                goto MATCH_label_c579; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "ROLB.Ev.Ibod"; 
                              goto MATCH_label_c576; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RORB.Ev.Ibod"; 
                                    goto MATCH_label_c580; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RORB.Ev.Ibod"; 
                                      goto MATCH_label_c582; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RORB.Ev.Ibod"; 
                                      goto MATCH_label_c581; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RORB.Ev.Ibod"; 
                                    goto MATCH_label_c583; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38059 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c581; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c582; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RORB.Ev.Ibod"; 
                                goto MATCH_label_c583; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RORB.Ev.Ibod"; 
                              goto MATCH_label_c580; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCLB.Ev.Ibod"; 
                                    goto MATCH_label_c584; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCLB.Ev.Ibod"; 
                                      goto MATCH_label_c586; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCLB.Ev.Ibod"; 
                                      goto MATCH_label_c585; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCLB.Ev.Ibod"; 
                                    goto MATCH_label_c587; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38168 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c585; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c586; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCLB.Ev.Ibod"; 
                                goto MATCH_label_c587; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCLB.Ev.Ibod"; 
                              goto MATCH_label_c584; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "RCRB.Ev.Ibod"; 
                                    goto MATCH_label_c588; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "RCRB.Ev.Ibod"; 
                                      goto MATCH_label_c590; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "RCRB.Ev.Ibod"; 
                                      goto MATCH_label_c589; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "RCRB.Ev.Ibod"; 
                                    goto MATCH_label_c591; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38277 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c589; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c590; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "RCRB.Ev.Ibod"; 
                                goto MATCH_label_c591; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "RCRB.Ev.Ibod"; 
                              goto MATCH_label_c588; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Ev.Ibod"; 
                                    goto MATCH_label_c592; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Ev.Ibod"; 
                                      goto MATCH_label_c594; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHLSALB.Ev.Ibod"; 
                                      goto MATCH_label_c593; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHLSALB.Ev.Ibod"; 
                                    goto MATCH_label_c595; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38386 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c593; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c594; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHLSALB.Ev.Ibod"; 
                                goto MATCH_label_c595; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHLSALB.Ev.Ibod"; 
                              goto MATCH_label_c592; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SHRB.Ev.Ibod"; 
                                    goto MATCH_label_c596; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SHRB.Ev.Ibod"; 
                                      goto MATCH_label_c598; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SHRB.Ev.Ibod"; 
                                      goto MATCH_label_c597; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SHRB.Ev.Ibod"; 
                                    goto MATCH_label_c599; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38495 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c597; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c598; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SHRB.Ev.Ibod"; 
                                goto MATCH_label_c599; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SHRB.Ev.Ibod"; 
                              goto MATCH_label_c596; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "SARB.Ev.Ibod"; 
                                    goto MATCH_label_c600; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "SARB.Ev.Ibod"; 
                                      goto MATCH_label_c602; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "SARB.Ev.Ibod"; 
                                      goto MATCH_label_c601; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "SARB.Ev.Ibod"; 
                                    goto MATCH_label_c603; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 38606 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c601; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c602; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "SARB.Ev.Ibod"; 
                                goto MATCH_label_c603; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "SARB.Ev.Ibod"; 
                              goto MATCH_label_c600; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 458 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 38668 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);
		result.rtl->appendStmt(new ReturnStatement);

//	| REPNE() [name] =>
//		result.rtl = instantiate(pc, name);

//	| REP() [name] =>
//		result.rtl = instantiate(pc, name);


#line 38693 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LES"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38721 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LES"; 
                                goto MATCH_label_c605; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LES"; 
                                goto MATCH_label_c604; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LES"; 
                              goto MATCH_label_c606; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LES"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38773 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c604; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c605; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LES"; 
                          goto MATCH_label_c606; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_name = "LDS"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38831 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "LDS"; 
                                goto MATCH_label_c608; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "LDS"; 
                                goto MATCH_label_c607; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_name = "LDS"; 
                              goto MATCH_label_c609; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LDS"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 38883 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c607; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c608; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_name = "LDS"; 
                          goto MATCH_label_c609; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                MATCH_name = "MOV.Eb.Ib"; 
                                goto MATCH_label_c610; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                  MATCH_name = "MOV.Eb.Ib"; 
                                  goto MATCH_label_c612; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                  MATCH_name = "MOV.Eb.Ib"; 
                                  goto MATCH_label_c611; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "MOV.Eb.Ib"; 
                                goto MATCH_label_c613; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              int /* [~128..127] */ i8 = 
                                sign_extend(
                                            (MATCH_w_8_32 & 0xff) 
                                                  /* i8 at 32 */, 8);
                              nextPC = 5 + MATCH_p; 
                              
#line 956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 38986 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c611; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c612; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                            MATCH_name = "MOV.Eb.Ib"; 
                            goto MATCH_label_c613; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          MATCH_name = "MOV.Eb.Ib"; 
                          goto MATCH_label_c610; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = "MOV.Ed.Ivod"; 
                                goto MATCH_label_c614; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                  MATCH_name = "MOV.Ed.Ivod"; 
                                  goto MATCH_label_c616; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                  MATCH_name = "MOV.Ed.Ivod"; 
                                  goto MATCH_label_c615; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "MOV.Ed.Ivod"; 
                                goto MATCH_label_c617; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            { 
                              const char *name = MATCH_name;
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                              nextPC = 8 + MATCH_p; 
                              
#line 950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 39096 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c615; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c616; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                            MATCH_name = "MOV.Ed.Ivod"; 
                            goto MATCH_label_c617; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                          MATCH_name = "MOV.Ed.Ivod"; 
                          goto MATCH_label_c614; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Eb.1"; 
                                    goto MATCH_label_c618; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Eb.1"; 
                                      goto MATCH_label_c620; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Eb.1"; 
                                      goto MATCH_label_c619; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Eb.1"; 
                                    goto MATCH_label_c621; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 39223 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c619; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c620; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.1"; 
                                goto MATCH_label_c621; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Eb.1"; 
                              goto MATCH_label_c618; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Eb.1"; 
                                    goto MATCH_label_c622; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Eb.1"; 
                                      goto MATCH_label_c624; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Eb.1"; 
                                      goto MATCH_label_c623; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Eb.1"; 
                                    goto MATCH_label_c625; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39319 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c623; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c624; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.1"; 
                                goto MATCH_label_c625; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Eb.1"; 
                              goto MATCH_label_c622; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Eb.1"; 
                                    goto MATCH_label_c626; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Eb.1"; 
                                      goto MATCH_label_c628; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Eb.1"; 
                                      goto MATCH_label_c627; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Eb.1"; 
                                    goto MATCH_label_c629; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39415 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c627; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c628; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.1"; 
                                goto MATCH_label_c629; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Eb.1"; 
                              goto MATCH_label_c626; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Eb.1"; 
                                    goto MATCH_label_c630; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Eb.1"; 
                                      goto MATCH_label_c632; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Eb.1"; 
                                      goto MATCH_label_c631; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Eb.1"; 
                                    goto MATCH_label_c633; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39511 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c631; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c632; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.1"; 
                                goto MATCH_label_c633; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Eb.1"; 
                              goto MATCH_label_c630; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Eb.1"; 
                                    goto MATCH_label_c634; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Eb.1"; 
                                      goto MATCH_label_c636; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Eb.1"; 
                                      goto MATCH_label_c635; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Eb.1"; 
                                    goto MATCH_label_c637; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39607 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c635; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c636; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.1"; 
                                goto MATCH_label_c637; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Eb.1"; 
                              goto MATCH_label_c634; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Eb.1"; 
                                    goto MATCH_label_c638; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Eb.1"; 
                                      goto MATCH_label_c640; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Eb.1"; 
                                      goto MATCH_label_c639; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Eb.1"; 
                                    goto MATCH_label_c641; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 39703 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c639; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c640; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.1"; 
                                goto MATCH_label_c641; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Eb.1"; 
                              goto MATCH_label_c638; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Eb.1"; 
                                    goto MATCH_label_c642; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Eb.1"; 
                                      goto MATCH_label_c644; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Eb.1"; 
                                      goto MATCH_label_c643; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Eb.1"; 
                                    goto MATCH_label_c645; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.1"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 39801 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c643; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c644; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.1"; 
                                goto MATCH_label_c645; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Eb.1"; 
                              goto MATCH_label_c642; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Ev.1od"; 
                                    goto MATCH_label_c646; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Ev.1od"; 
                                      goto MATCH_label_c648; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Ev.1od"; 
                                      goto MATCH_label_c647; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Ev.1od"; 
                                    goto MATCH_label_c649; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 39905 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c647; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c648; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.1od"; 
                                goto MATCH_label_c649; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Ev.1od"; 
                              goto MATCH_label_c646; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Ev.1od"; 
                                    goto MATCH_label_c650; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Ev.1od"; 
                                      goto MATCH_label_c652; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Ev.1od"; 
                                      goto MATCH_label_c651; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Ev.1od"; 
                                    goto MATCH_label_c653; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40001 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c651; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c652; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.1od"; 
                                goto MATCH_label_c653; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Ev.1od"; 
                              goto MATCH_label_c650; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Ev.1od"; 
                                    goto MATCH_label_c654; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Ev.1od"; 
                                      goto MATCH_label_c656; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Ev.1od"; 
                                      goto MATCH_label_c655; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Ev.1od"; 
                                    goto MATCH_label_c657; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40097 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c655; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c656; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.1od"; 
                                goto MATCH_label_c657; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Ev.1od"; 
                              goto MATCH_label_c654; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Ev.1od"; 
                                    goto MATCH_label_c658; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Ev.1od"; 
                                      goto MATCH_label_c660; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Ev.1od"; 
                                      goto MATCH_label_c659; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Ev.1od"; 
                                    goto MATCH_label_c661; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40193 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c659; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c660; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.1od"; 
                                goto MATCH_label_c661; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Ev.1od"; 
                              goto MATCH_label_c658; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Ev.1od"; 
                                    goto MATCH_label_c662; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Ev.1od"; 
                                      goto MATCH_label_c664; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Ev.1od"; 
                                      goto MATCH_label_c663; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Ev.1od"; 
                                    goto MATCH_label_c665; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40289 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c663; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c664; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.1od"; 
                                goto MATCH_label_c665; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Ev.1od"; 
                              goto MATCH_label_c662; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Ev.1od"; 
                                    goto MATCH_label_c666; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Ev.1od"; 
                                      goto MATCH_label_c668; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Ev.1od"; 
                                      goto MATCH_label_c667; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Ev.1od"; 
                                    goto MATCH_label_c669; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40385 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c667; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c668; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.1od"; 
                                goto MATCH_label_c669; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Ev.1od"; 
                              goto MATCH_label_c666; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Ev.1od"; 
                                    goto MATCH_label_c670; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Ev.1od"; 
                                      goto MATCH_label_c672; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Ev.1od"; 
                                      goto MATCH_label_c671; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Ev.1od"; 
                                    goto MATCH_label_c673; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.1od"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 40483 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c671; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c672; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.1od"; 
                                goto MATCH_label_c673; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Ev.1od"; 
                              goto MATCH_label_c670; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Eb.CL"; 
                                    goto MATCH_label_c674; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Eb.CL"; 
                                      goto MATCH_label_c676; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Eb.CL"; 
                                      goto MATCH_label_c675; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Eb.CL"; 
                                    goto MATCH_label_c677; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40587 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c675; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c676; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Eb.CL"; 
                                goto MATCH_label_c677; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Eb.CL"; 
                              goto MATCH_label_c674; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Eb.CL"; 
                                    goto MATCH_label_c678; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Eb.CL"; 
                                      goto MATCH_label_c680; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Eb.CL"; 
                                      goto MATCH_label_c679; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Eb.CL"; 
                                    goto MATCH_label_c681; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40683 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c679; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c680; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Eb.CL"; 
                                goto MATCH_label_c681; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Eb.CL"; 
                              goto MATCH_label_c678; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Eb.CL"; 
                                    goto MATCH_label_c682; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Eb.CL"; 
                                      goto MATCH_label_c684; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Eb.CL"; 
                                      goto MATCH_label_c683; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Eb.CL"; 
                                    goto MATCH_label_c685; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40779 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c683; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c684; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Eb.CL"; 
                                goto MATCH_label_c685; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Eb.CL"; 
                              goto MATCH_label_c682; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Eb.CL"; 
                                    goto MATCH_label_c686; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Eb.CL"; 
                                      goto MATCH_label_c688; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Eb.CL"; 
                                      goto MATCH_label_c687; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Eb.CL"; 
                                    goto MATCH_label_c689; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40875 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c687; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c688; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Eb.CL"; 
                                goto MATCH_label_c689; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Eb.CL"; 
                              goto MATCH_label_c686; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Eb.CL"; 
                                    goto MATCH_label_c690; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Eb.CL"; 
                                      goto MATCH_label_c692; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Eb.CL"; 
                                      goto MATCH_label_c691; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Eb.CL"; 
                                    goto MATCH_label_c693; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 40971 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c691; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c692; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Eb.CL"; 
                                goto MATCH_label_c693; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Eb.CL"; 
                              goto MATCH_label_c690; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Eb.CL"; 
                                    goto MATCH_label_c694; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Eb.CL"; 
                                      goto MATCH_label_c696; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Eb.CL"; 
                                      goto MATCH_label_c695; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Eb.CL"; 
                                    goto MATCH_label_c697; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 41067 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c695; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c696; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Eb.CL"; 
                                goto MATCH_label_c697; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Eb.CL"; 
                              goto MATCH_label_c694; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Eb.CL"; 
                                    goto MATCH_label_c698; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Eb.CL"; 
                                      goto MATCH_label_c700; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Eb.CL"; 
                                      goto MATCH_label_c699; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Eb.CL"; 
                                    goto MATCH_label_c701; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.CL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41165 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c699; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c700; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Eb.CL"; 
                                goto MATCH_label_c701; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Eb.CL"; 
                              goto MATCH_label_c698; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "ROLB.Ev.CLod"; 
                                    goto MATCH_label_c702; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "ROLB.Ev.CLod"; 
                                      goto MATCH_label_c704; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "ROLB.Ev.CLod"; 
                                      goto MATCH_label_c703; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "ROLB.Ev.CLod"; 
                                    goto MATCH_label_c705; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41269 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c703; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c704; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "ROLB.Ev.CLod"; 
                                goto MATCH_label_c705; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "ROLB.Ev.CLod"; 
                              goto MATCH_label_c702; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RORB.Ev.CLod"; 
                                    goto MATCH_label_c706; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RORB.Ev.CLod"; 
                                      goto MATCH_label_c708; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RORB.Ev.CLod"; 
                                      goto MATCH_label_c707; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RORB.Ev.CLod"; 
                                    goto MATCH_label_c709; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41365 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c707; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c708; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RORB.Ev.CLod"; 
                                goto MATCH_label_c709; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RORB.Ev.CLod"; 
                              goto MATCH_label_c706; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCLB.Ev.CLod"; 
                                    goto MATCH_label_c710; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCLB.Ev.CLod"; 
                                      goto MATCH_label_c712; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCLB.Ev.CLod"; 
                                      goto MATCH_label_c711; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCLB.Ev.CLod"; 
                                    goto MATCH_label_c713; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41461 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c711; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c712; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCLB.Ev.CLod"; 
                                goto MATCH_label_c713; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCLB.Ev.CLod"; 
                              goto MATCH_label_c710; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "RCRB.Ev.CLod"; 
                                    goto MATCH_label_c714; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "RCRB.Ev.CLod"; 
                                      goto MATCH_label_c716; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "RCRB.Ev.CLod"; 
                                      goto MATCH_label_c715; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "RCRB.Ev.CLod"; 
                                    goto MATCH_label_c717; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41557 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c715; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c716; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "RCRB.Ev.CLod"; 
                                goto MATCH_label_c717; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "RCRB.Ev.CLod"; 
                              goto MATCH_label_c714; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHLSALB.Ev.CLod"; 
                                    goto MATCH_label_c718; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHLSALB.Ev.CLod"; 
                                      goto MATCH_label_c720; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHLSALB.Ev.CLod"; 
                                      goto MATCH_label_c719; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHLSALB.Ev.CLod"; 
                                    goto MATCH_label_c721; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41653 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c719; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c720; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHLSALB.Ev.CLod"; 
                                goto MATCH_label_c721; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHLSALB.Ev.CLod"; 
                              goto MATCH_label_c718; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SHRB.Ev.CLod"; 
                                    goto MATCH_label_c722; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SHRB.Ev.CLod"; 
                                      goto MATCH_label_c724; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SHRB.Ev.CLod"; 
                                      goto MATCH_label_c723; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SHRB.Ev.CLod"; 
                                    goto MATCH_label_c725; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41749 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c723; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c724; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SHRB.Ev.CLod"; 
                                goto MATCH_label_c725; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SHRB.Ev.CLod"; 
                              goto MATCH_label_c722; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "SARB.Ev.CLod"; 
                                    goto MATCH_label_c726; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "SARB.Ev.CLod"; 
                                      goto MATCH_label_c728; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "SARB.Ev.CLod"; 
                                      goto MATCH_label_c727; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "SARB.Ev.CLod"; 
                                    goto MATCH_label_c729; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 41847 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c727; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c728; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "SARB.Ev.CLod"; 
                                goto MATCH_label_c729; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "SARB.Ev.CLod"; 
                              goto MATCH_label_c726; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: 
                  goto MATCH_label_c64; break;
                case 7: 
                  MATCH_name = 
                    MATCH_name_col_342[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 291 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 41904 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41932 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_38[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41954 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_51[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 41976 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 4: 
                  goto MATCH_label_c64; break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_565[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42027 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_566[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42054 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_565[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42073 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_567[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42099 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_566[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42118 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_568[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42154 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_569[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42179 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_570[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42204 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_311[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42223 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_571[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42246 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_568[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 545 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42265 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_572[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 548 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42288 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_569[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42307 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_573[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42330 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_570[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42349 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_574[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42399 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.LODSvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 488 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42424 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_567[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 497 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42443 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.SCASvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42467 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_574[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 479 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42486 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_577[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42522 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_578[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42547 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_579[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 485 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42572 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_571[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 494 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42591 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_580[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 491 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42614 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_572[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42633 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_581[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42656 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_573[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 476 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42675 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_582[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42698 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_577[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42717 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_name = 
                    MATCH_name_col_583[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    nextPC = 1 + MATCH_p; 
                    
#line 1226 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 42744 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    MATCH_name = "TEST.Eb.Ib"; 
                                    goto MATCH_label_c730; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      MATCH_name = "TEST.Eb.Ib"; 
                                      goto MATCH_label_c732; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      MATCH_name = "TEST.Eb.Ib"; 
                                      goto MATCH_label_c731; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    MATCH_name = "TEST.Eb.Ib"; 
                                    goto MATCH_label_c733; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i8 = 
                                    (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
                                  nextPC = 5 + MATCH_p; 
                                  
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 42818 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c731; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c732; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                MATCH_name = "TEST.Eb.Ib"; 
                                goto MATCH_label_c733; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              MATCH_name = "TEST.Eb.Ib"; 
                              goto MATCH_label_c730; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NOTb"; 
                                    goto MATCH_label_c734; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NOTb"; 
                                      goto MATCH_label_c736; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NOTb"; 
                                      goto MATCH_label_c735; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NOTb"; 
                                    goto MATCH_label_c737; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 42920 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c735; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c736; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTb"; 
                                goto MATCH_label_c737; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NOTb"; 
                              goto MATCH_label_c734; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NEGb"; 
                                    goto MATCH_label_c738; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NEGb"; 
                                      goto MATCH_label_c740; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NEGb"; 
                                      goto MATCH_label_c739; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NEGb"; 
                                    goto MATCH_label_c741; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43016 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c739; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c740; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGb"; 
                                goto MATCH_label_c741; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NEGb"; 
                              goto MATCH_label_c738; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "MUL.AL"; 
                                    goto MATCH_label_c742; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "MUL.AL"; 
                                      goto MATCH_label_c744; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "MUL.AL"; 
                                      goto MATCH_label_c743; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "MUL.AL"; 
                                    goto MATCH_label_c745; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43112 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c743; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c744; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AL"; 
                                goto MATCH_label_c745; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "MUL.AL"; 
                              goto MATCH_label_c742; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IMULb"; 
                                    goto MATCH_label_c746; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IMULb"; 
                                      goto MATCH_label_c748; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IMULb"; 
                                      goto MATCH_label_c747; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IMULb"; 
                                    goto MATCH_label_c749; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULb"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43208 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c747; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c748; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULb"; 
                                goto MATCH_label_c749; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IMULb"; 
                              goto MATCH_label_c746; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "DIVAL"; 
                                    goto MATCH_label_c750; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DIVAL"; 
                                      goto MATCH_label_c752; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DIVAL"; 
                                      goto MATCH_label_c751; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "DIVAL"; 
                                    goto MATCH_label_c753; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVAL"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 43304 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c751; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c752; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVAL"; 
                                goto MATCH_label_c753; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "DIVAL"; 
                              goto MATCH_label_c750; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IDIV"; 
                                    goto MATCH_label_c754; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IDIV"; 
                                      goto MATCH_label_c756; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IDIV"; 
                                      goto MATCH_label_c755; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IDIV"; 
                                    goto MATCH_label_c757; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIV"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 43403 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c755; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c756; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIV"; 
                                goto MATCH_label_c757; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IDIV"; 
                              goto MATCH_label_c754; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    MATCH_name = "TEST.Ed.Id"; 
                                    goto MATCH_label_c758; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      MATCH_name = "TEST.Ed.Id"; 
                                      goto MATCH_label_c760; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      MATCH_name = "TEST.Ed.Id"; 
                                      goto MATCH_label_c759; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    MATCH_name = "TEST.Ed.Id"; 
                                    goto MATCH_label_c761; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 43514 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c759; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c760; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                MATCH_name = "TEST.Ed.Id"; 
                                goto MATCH_label_c761; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              MATCH_name = "TEST.Ed.Id"; 
                              goto MATCH_label_c758; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NOTod"; 
                                    goto MATCH_label_c762; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NOTod"; 
                                      goto MATCH_label_c764; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NOTod"; 
                                      goto MATCH_label_c763; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NOTod"; 
                                    goto MATCH_label_c765; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 880 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43616 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c763; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c764; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NOTod"; 
                                goto MATCH_label_c765; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NOTod"; 
                              goto MATCH_label_c762; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "NEGod"; 
                                    goto MATCH_label_c766; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "NEGod"; 
                                      goto MATCH_label_c768; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "NEGod"; 
                                      goto MATCH_label_c767; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "NEGod"; 
                                    goto MATCH_label_c769; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43712 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c767; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c768; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "NEGod"; 
                                goto MATCH_label_c769; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "NEGod"; 
                              goto MATCH_label_c766; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "MUL.AXod"; 
                                    goto MATCH_label_c770; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "MUL.AXod"; 
                                      goto MATCH_label_c772; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "MUL.AXod"; 
                                      goto MATCH_label_c771; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "MUL.AXod"; 
                                    goto MATCH_label_c773; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AXod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43808 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c771; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c772; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "MUL.AXod"; 
                                goto MATCH_label_c773; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "MUL.AXod"; 
                              goto MATCH_label_c770; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IMULod"; 
                                    goto MATCH_label_c774; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IMULod"; 
                                      goto MATCH_label_c776; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IMULod"; 
                                      goto MATCH_label_c775; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IMULod"; 
                                    goto MATCH_label_c777; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULod"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1142 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 43904 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c775; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c776; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IMULod"; 
                                goto MATCH_label_c777; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IMULod"; 
                              goto MATCH_label_c774; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "DIVeAX"; 
                                    goto MATCH_label_c778; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "DIVeAX"; 
                                      goto MATCH_label_c780; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "DIVeAX"; 
                                      goto MATCH_label_c779; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "DIVeAX"; 
                                    goto MATCH_label_c781; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVeAX"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 44000 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c779; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c780; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "DIVeAX"; 
                                goto MATCH_label_c781; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "DIVeAX"; 
                              goto MATCH_label_c778; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_name = "IDIVeAX"; 
                                    goto MATCH_label_c782; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_name = "IDIVeAX"; 
                                      goto MATCH_label_c784; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = "IDIVeAX"; 
                                      goto MATCH_label_c783; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_name = "IDIVeAX"; 
                                    goto MATCH_label_c785; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIVeAX"; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 44096 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c783; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c784; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = "IDIVeAX"; 
                                goto MATCH_label_c785; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_name = "IDIVeAX"; 
                              goto MATCH_label_c782; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    
  }goto MATCH_finished_c; 
  
  MATCH_label_c0: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44177 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c2: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44195 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c3: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44213 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c4: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44231 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c5: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44249 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c6: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44267 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c7: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44285 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c8: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44303 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c9: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c10: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44339 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c11: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44357 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c12: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44375 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c13: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44393 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c14: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44411 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c15: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44429 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c16: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44447 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c17: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44465 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c18: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44483 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c19: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44501 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c20: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44519 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c21: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44537 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c22: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44555 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c23: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c24: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44591 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c25: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c26: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c27: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44645 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c28: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c29: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c30: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44699 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c31: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44717 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c32: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44735 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c33: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c34: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c35: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 44789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c36: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44807 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c37: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44825 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c38: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c39: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 44861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c40: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44879 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c41: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c42: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c43: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 44933 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c44: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1382 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44951 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c45: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1382 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c46: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1382 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 44987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c47: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1382 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45005 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c48: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c49: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c50: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45059 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c51: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 45077 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c52: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c53: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c54: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c55: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 45149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c56: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c57: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c58: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45203 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c59: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 45221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c60: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1370 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45239 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c61: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1370 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45257 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c62: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1370 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c63: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1370 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 45293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c64: (void)0; /*placeholder for label*/ 
    { 
      nextPC = MATCH_p; 
      
#line 2078 "machine/pentium/decoder.m"

		result.valid = false;

#line 45307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c65: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45325 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c66: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45343 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c67: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c68: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45379 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c69: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45397 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c70: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45415 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c71: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45433 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c72: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45451 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c73: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45469 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c74: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45487 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c75: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c76: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c77: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45541 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c78: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c79: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c80: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c81: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45613 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c82: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45631 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c83: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c84: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45667 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c85: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45685 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c86: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45703 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c87: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45721 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c88: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 45739 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c89: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45757 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c90: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45775 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c91: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45793 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c92: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1311 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c93: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45829 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c94: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45847 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c95: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c96: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 45883 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c97: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45902 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c98: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c99: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45940 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c100: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45959 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c101: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45978 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c102: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 45997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c103: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 46016 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c104: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 46035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c105: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46053 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c106: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c107: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c108: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46107 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c109: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46125 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c110: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46143 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c111: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46161 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c112: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c113: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1139 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46197 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c114: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1139 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46215 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c115: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1139 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c116: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1139 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 46251 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c117: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c118: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46287 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c119: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46305 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c120: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c121: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46342 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c122: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c123: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46380 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c124: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46399 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c125: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46418 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c126: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c127: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46456 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c128: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR16);


#line 46475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c129: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1281 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46494 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c130: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1281 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c131: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1281 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46532 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c132: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1281 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46551 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c133: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46570 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c134: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46589 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c135: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46608 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c136: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 46627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c137: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46645 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c138: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c139: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c140: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46699 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c141: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46717 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c142: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46735 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c143: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c144: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 46771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1335 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);
		return;

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46814 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1335 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);
		return;

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1335 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);
		return;

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46900 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1335 "machine/pentium/decoder.m"

	//| BSFow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);
		return;

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) [name] =>
//		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAM() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAD() [name] =>
//		result.rtl = instantiate(pc, name);

//	| AAA() [name] =>
//		result.rtl = instantiate(pc, name);


#line 46943 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1323 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);
		return;


#line 46963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1323 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);
		return;


#line 46983 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1323 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);
		return;


#line 47003 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1323 "machine/pentium/decoder.m"

	//| BSRow(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);
		genBSFR(result, pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);
		return;


#line 47023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c153: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c154: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47059 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c155: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47077 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c156: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c157: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c158: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c159: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c160: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R16, DIS_EADDR8);


#line 47167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c161: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 333 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c162: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 333 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47203 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c163: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 333 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c164: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 333 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47239 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c165: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47257 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c166: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c167: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c168: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47311 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c169: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c170: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47347 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c171: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47365 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c172: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c173: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47401 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c174: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c175: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c176: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47455 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c177: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47473 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c178: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c179: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47509 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c180: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c181: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47545 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c182: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47563 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c183: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47581 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c184: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47599 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c185: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47617 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c186: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47635 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c187: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47653 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c188: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47671 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c189: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47689 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c190: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47707 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c191: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47725 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c192: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c193: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1379 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c194: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1379 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47779 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c195: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1379 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47797 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c196: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1379 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47815 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c197: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c198: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47851 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c199: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47869 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c200: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c201: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47905 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c202: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47923 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c203: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47941 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c204: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 47959 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c205: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1373 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47977 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c206: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1373 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 47995 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c207: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1373 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48013 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c208: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1373 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c209: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1367 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c210: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1367 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48067 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c211: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1367 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48085 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c212: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1367 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 48103 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c213: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c214: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48143 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c215: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 10 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48163 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c216: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I16);


#line 48183 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c217: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1133 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48203 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c218: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1133 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48223 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c219: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1133 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48243 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c220: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1133 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16, DIS_I8);


#line 48263 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c221: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48282 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c222: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c223: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c224: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48339 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c225: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48358 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c226: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c227: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48396 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c228: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48415 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c229: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48434 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c230: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48453 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c231: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c232: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c233: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48510 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c234: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48529 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c235: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48548 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c236: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c237: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48586 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c238: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48605 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c239: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c240: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c241: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48662 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c242: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c243: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48700 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c244: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48719 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c245: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c246: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48757 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c247: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48776 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c248: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c249: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48814 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c250: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c251: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48852 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c252: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 48871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c253: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c254: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48907 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c255: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48925 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c256: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 48943 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c257: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48962 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c258: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 48981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c259: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49000 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c260: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49019 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c261: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49038 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c262: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49057 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c263: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49076 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c264: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1550 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c265: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49114 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c266: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c267: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49152 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c268: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c269: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c270: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49209 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c271: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49228 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c272: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49247 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c273: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c274: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49285 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c275: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49304 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c276: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c277: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49342 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c278: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c279: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49380 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c280: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49399 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c281: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49418 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c282: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c283: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49456 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c284: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c285: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49494 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c286: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c287: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49532 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c288: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 49551 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c289: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49569 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c290: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c291: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49605 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c292: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_EADDR16);


#line 49623 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c293: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c294: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49659 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c295: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49677 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c296: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49695 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c297: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c298: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c299: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG16, DIS_MEM);


#line 49749 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c300: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 297 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c301: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 297 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49785 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c302: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 297 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49803 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c303: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 297 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_REG16);


#line 49821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c304: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c305: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49909 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c306: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c307: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| OUTSvod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSvow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUTSB() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.eAXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.DX.AL() [name] =>
//		result.rtl = instantiate(pc, name);

//	| OUT.Ib.eAXod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.eAXow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| OUT.Ib.AL(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 49997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c308: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50016 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c309: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c310: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50054 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c311: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50073 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c312: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50092 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c313: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c314: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50130 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c315: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c316: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50168 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c317: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50187 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c318: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50206 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c319: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c320: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c321: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50263 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c322: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50282 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c323: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c324: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c325: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50339 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c326: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50358 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c327: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c328: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50396 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c329: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50415 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c330: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50434 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c331: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50453 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c332: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c333: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c334: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50510 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c335: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I8);


#line 50529 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c336: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50548 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c337: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c338: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50586 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c339: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 953 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 50605 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c340: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50622 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c341: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c342: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50656 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c343: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50673 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c344: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50690 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c345: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50707 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c346: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50724 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c347: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50741 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c348: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50758 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c349: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50775 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c350: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50792 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c351: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50809 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c352: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50826 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c353: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c354: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50860 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c355: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50877 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c356: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50894 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c357: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50911 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c358: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50928 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c359: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50945 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c360: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50962 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c361: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50979 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c362: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 50996 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c363: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51013 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c364: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51030 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c365: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51047 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c366: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51064 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c367: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51081 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c368: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51098 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c369: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51115 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c370: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51132 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c371: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c372: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51166 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c373: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51183 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c374: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51200 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c375: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c376: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51234 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c377: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51251 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c378: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51268 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c379: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51285 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c380: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51302 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c381: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51319 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c382: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51336 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c383: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51353 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c384: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51370 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c385: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c386: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51404 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c387: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c388: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51438 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c389: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51455 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c390: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c391: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51489 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c392: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51506 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c393: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c394: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51540 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c395: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51557 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c396: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_24 & 0xffff) /* i16 at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51575 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c397: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_32 & 0xffff) /* i16 at 32 */;
      nextPC = 6 + MATCH_p; 
      
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c398: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_64 & 0xffff) /* i16 at 64 */;
      nextPC = 10 + MATCH_p; 
      
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51611 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c399: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_56 & 0xffff) /* i16 at 56 */;
      nextPC = 9 + MATCH_p; 
      
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16, DIS_I16);


#line 51629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c400: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51646 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c401: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c402: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51680 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c403: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 883 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c404: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51714 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c405: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c406: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51748 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c407: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 892 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51765 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c408: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51782 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c409: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c410: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51816 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c411: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 901 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c412: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1145 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51850 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c413: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1145 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51867 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c414: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1145 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51884 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c415: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1145 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51901 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c416: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51918 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c417: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51935 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c418: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51952 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c419: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c420: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 51986 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c421: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52003 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c422: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52020 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c423: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52037 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c424: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1100 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52054 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c425: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1100 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c426: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1100 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52088 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c427: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1100 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52105 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c428: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1184 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c429: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1184 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c430: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1184 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52156 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c431: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1184 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 52173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c432: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c433: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52231 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c434: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52260 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c435: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);

//	| POPFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| POPAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 52289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c436: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52308 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c437: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52327 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c438: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c439: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52365 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c440: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52384 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c441: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c442: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52422 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c443: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c444: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52460 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c445: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c446: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52498 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c447: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c448: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52536 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c449: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52555 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c450: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52574 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c451: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c452: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c453: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52631 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c454: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52650 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c455: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c456: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52688 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c457: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52707 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c458: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c459: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c460: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52764 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c461: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52783 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c462: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52802 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c463: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c464: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52840 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c465: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52859 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c466: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c467: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 52897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c468: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 52915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c469: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 52933 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c470: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 52951 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c471: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 52969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c472: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 52987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c473: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53005 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c474: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c475: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c476: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53059 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c477: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53077 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c478: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c479: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c480: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c481: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c482: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c483: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c484: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53203 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c485: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53221 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c486: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53239 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c487: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53257 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c488: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c489: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c490: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53311 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c491: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c492: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53347 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c493: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53365 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c494: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c495: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53401 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c496: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c497: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c498: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53455 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c499: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 53473 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c500: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53492 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c501: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c502: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53530 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c503: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53549 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c504: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53568 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c505: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c506: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53606 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c507: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c508: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53644 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c509: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53663 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c510: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53682 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c511: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53701 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c512: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53720 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c513: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53739 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c514: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53758 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c515: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c516: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c517: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c518: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c519: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		auto oper = DIS_EADDR32;
		if (!(i8 == -16 && oper->isRegN(28)))
			result.rtl = instantiate(pc, name, oper, DIS_I8);


#line 53865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c520: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53884 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c521: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c522: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53922 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c523: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53941 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c524: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53960 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c525: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53979 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c526: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 53998 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c527: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c528: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54036 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c529: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54055 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c530: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54074 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c531: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54093 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c532: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c533: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54129 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c534: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54147 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c535: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54165 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c536: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54183 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c537: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54201 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c538: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c539: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54237 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c540: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 300 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54255 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c541: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 300 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54273 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c542: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 300 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54291 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c543: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 300 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 54309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c544: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 294 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54327 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c545: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 294 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54345 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c546: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 294 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54363 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c547: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 294 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 54381 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c548: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54400 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c549: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c550: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54438 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c551: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c552: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54476 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c553: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54495 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c554: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54514 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c555: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c556: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54552 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c557: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54571 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c558: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c559: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c560: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54628 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c561: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54647 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c562: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c563: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54685 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c564: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54704 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c565: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c566: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54742 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c567: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c568: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54780 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c569: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c570: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54818 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c571: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54837 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c572: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54856 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c573: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54875 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c574: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54894 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c575: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 54913 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c576: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54932 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c577: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54951 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c578: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54970 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c579: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 54989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c580: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55008 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c581: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55027 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c582: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55046 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c583: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c584: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55084 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c585: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55103 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c586: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c587: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55141 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c588: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55160 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c589: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c590: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55198 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c591: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c592: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55236 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c593: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55255 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c594: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55274 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c595: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c596: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55312 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c597: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55331 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c598: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55350 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c599: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c600: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55388 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c601: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55407 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c602: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55426 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c603: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 55445 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c604: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c605: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55481 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c606: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c607: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c608: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c609: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 55553 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c610: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55572 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c611: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55591 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c612: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55610 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c613: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 956 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 55629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c614: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 55647 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c615: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 55665 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c616: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 55683 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c617: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 950 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 55701 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c618: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55732 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c619: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c620: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c621: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHFow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| PUSHAow() [name] =>
//		result.rtl = instantiate(pc, name);


#line 55825 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c622: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55842 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c623: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55859 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c624: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55876 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c625: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55893 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c626: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55910 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c627: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55927 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c628: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55944 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c629: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55961 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c630: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55978 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c631: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 55995 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c632: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56012 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c633: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56029 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c634: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56046 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c635: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c636: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56080 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c637: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56097 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c638: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56114 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c639: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c640: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56148 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c641: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56165 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c642: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56182 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c643: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56199 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c644: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56216 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c645: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR16);


#line 56233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c646: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56250 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c647: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56267 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c648: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56284 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c649: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c650: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c651: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56335 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c652: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c653: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c654: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56386 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c655: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c656: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56420 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c657: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c658: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56454 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c659: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56471 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c660: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56488 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c661: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c662: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56522 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c663: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c664: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56556 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c665: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c666: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c667: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c668: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c669: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c670: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56658 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c671: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c672: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56692 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c673: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 56709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c674: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c675: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c676: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56760 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c677: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c678: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c679: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c680: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56828 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c681: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56845 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c682: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56862 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c683: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56879 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c684: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56896 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c685: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56913 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c686: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c687: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56947 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c688: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56964 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c689: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c690: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 56998 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c691: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c692: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57032 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c693: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c694: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57066 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c695: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c696: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c697: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c698: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57134 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c699: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c700: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57168 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c701: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c702: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c703: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c704: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57236 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c705: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c706: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57270 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c707: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57287 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c708: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57304 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c709: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c710: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c711: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c712: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57372 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c713: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c714: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57406 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c715: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c716: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57440 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c717: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c718: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57474 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c719: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c720: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57508 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c721: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57525 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c722: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57542 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c723: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c724: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57576 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c725: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c726: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57610 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c727: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c728: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57644 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c729: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 57661 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c730: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57679 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c731: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c732: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      nextPC = 8 + MATCH_p; 
      
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57715 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c733: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_48 & 0xff) /* i8 at 48 */;
      nextPC = 7 + MATCH_p; 
      
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_I8);


#line 57733 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c734: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57750 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c735: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c736: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57784 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c737: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 886 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c738: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57818 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c739: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57835 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c740: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57852 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c741: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 895 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57869 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c742: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57886 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c743: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c744: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57920 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c745: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57937 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c746: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57954 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c747: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57971 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c748: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 57988 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c749: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58005 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c750: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58022 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c751: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58039 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c752: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58056 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c753: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 58073 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c754: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58093 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c755: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c756: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c757: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8); /* ?? */

//	| HLT() [name] =>
//		result.rtl = instantiate(pc, name);


#line 58153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c758: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 58171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c759: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 58189 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c760: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 58207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c761: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, addReloc(DIS_I32));


#line 58225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c762: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 880 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58242 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c763: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 880 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58259 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c764: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 880 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58276 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c765: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 880 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c766: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58310 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c767: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58327 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c768: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58344 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c769: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 889 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c770: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58378 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c771: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58395 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c772: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58412 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c773: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 898 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58429 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c774: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1142 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58446 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c775: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1142 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c776: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1142 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58480 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c777: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1142 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c778: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58514 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c779: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58531 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c780: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58548 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c781: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58565 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c782: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58582 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c783: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58599 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c784: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58616 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c785: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58633 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c786: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58651 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c787: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c788: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58687 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c789: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 58705 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c790: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c791: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58741 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c792: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58759 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c793: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 58777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c794: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c795: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58813 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c796: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58831 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c797: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 58849 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c798: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58867 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c799: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58885 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c800: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c801: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 58921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c802: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c803: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c804: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c805: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 58989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c806: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59006 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c807: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c808: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59040 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c809: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59057 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c810: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59074 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c811: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c812: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1010 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59108 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c813: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59125 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c814: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59142 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c815: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c816: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59176 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c817: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c818: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59210 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c819: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c820: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c821: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59262 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c822: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59280 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c823: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);

	// Sets are now in the high level instructions

#line 59298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c824: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c825: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59332 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c826: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c827: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59366 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c828: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c829: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59400 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c830: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 59417 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c831: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1065 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59434 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c832: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1065 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59451 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c833: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1065 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 59468 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c834: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59486 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c835: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59504 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c836: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59522 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c837: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59540 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c838: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c839: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59576 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c840: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59594 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c841: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 59612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c842: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 281 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59636 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c843: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 281 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59660 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c844: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 281 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59684 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c845: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 281 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);


#line 59708 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c846: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 278 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59725 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c847: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 278 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59742 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c848: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 278 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59759 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c849: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 278 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUGE);

#line 59776 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c850: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59793 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c851: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c852: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c853: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JE);

#line 59844 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c854: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c855: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c856: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c857: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JNE);

#line 59912 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c858: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c859: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59946 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c860: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c861: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JULE);

#line 59980 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c862: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 59997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c863: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 60014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c864: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 60031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c865: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JUG);

#line 60048 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c866: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 263 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c867: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 263 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c868: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 263 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c869: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 263 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JMI);

#line 60116 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c870: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 260 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c871: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 260 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60150 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c872: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 260 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c873: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 260 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JPOS);

#line 60184 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c874: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 251 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c875: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 251 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c876: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 251 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c877: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 251 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		//result.rtl = instantiate(pc, name, DIS_EADDR8);
//		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60276 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c878: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 248 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c879: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 248 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60310 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c880: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 248 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60327 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c881: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 248 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSGE);

#line 60344 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c882: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 245 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c883: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 245 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60378 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c884: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 245 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60395 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c885: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 245 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSLE);

#line 60412 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c886: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 242 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60429 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c887: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 242 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60446 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c888: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 242 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c889: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 242 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, name, DIS_EADDR8);
		result.rtl = SETS(pc, name, DIS_EADDR8, BRANCH_JSG);

#line 60480 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c890: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1308 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60498 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c891: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1308 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c892: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1308 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60534 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c893: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1308 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60552 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c894: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60570 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c895: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60588 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c896: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60606 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c897: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c898: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c899: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60662 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c900: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c901: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60700 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c902: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60719 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c903: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c904: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60757 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c905: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 60776 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c906: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c907: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60812 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c908: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60830 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c909: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60848 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c910: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60866 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c911: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60884 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c912: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60902 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c913: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 60920 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c914: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1136 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c915: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1136 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60956 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c916: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1136 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60974 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c917: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1136 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 60992 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c918: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61010 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c919: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61028 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c920: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61046 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c921: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 61064 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c922: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c923: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c924: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61118 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c925: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c926: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c927: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61172 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c928: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1013 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c929: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61208 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c930: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61226 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c931: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c932: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61262 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c933: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61280 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c934: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c935: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61316 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c936: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61334 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c937: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c938: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 61370 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c939: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61388 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c940: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61406 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c941: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61424 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c942: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 61442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c943: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61460 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c944: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61478 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c945: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61496 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c946: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 61514 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c947: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c948: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61552 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c949: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61571 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c950: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c951: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c952: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61628 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c953: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61647 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c954: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_I8, DIS_EADDR32);


#line 61666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c955: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1278 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61685 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c956: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1278 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61704 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c957: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1278 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c958: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1278 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61742 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c959: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c960: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61780 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c961: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61799 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c962: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_I8);


#line 61818 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c963: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61836 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c964: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61854 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c965: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61872 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c966: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 61890 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c967: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1329 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);
		return;


#line 61910 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c968: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1329 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);
		return;


#line 61930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c969: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1329 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);
		return;


#line 61950 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c970: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1329 "machine/pentium/decoder.m"

	//| BSFod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);
		return;


#line 61970 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c971: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1317 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);
		return;


#line 61990 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c972: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1317 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);
		return;


#line 62010 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c973: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1317 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);
		return;


#line 62030 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c974: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1317 "machine/pentium/decoder.m"

	//| BSRod(reg, Eaddr) [name] =>
		//result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);
		genBSFR(result, pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);
		return;


#line 62050 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c975: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62068 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c976: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62086 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c977: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62104 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c978: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR8);


#line 62122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c979: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62140 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c980: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62158 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c981: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62176 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c982: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R32, DIS_EADDR16);


#line 62194 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c983: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 336 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62212 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c984: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 336 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c985: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 336 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62248 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c986: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 336 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 62266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c987: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 330 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62284 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c988: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 330 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62302 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c989: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 330 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c990: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 330 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c991: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c992: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62372 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c993: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 62389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c994: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62407 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c995: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c996: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c997: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62461 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c998: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c999: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1000: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62515 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1001: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1002: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62551 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1003: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62569 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1004: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1005: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62605 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1006: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62623 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1007: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1008: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62659 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1009: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62677 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1010: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62695 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1011: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1012: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1013: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62749 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1014: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62767 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1015: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62785 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1016: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62803 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1017: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 62821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1018: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62839 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1019: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1020: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62875 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1021: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 62893 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1022: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1376 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62911 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1023: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1376 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1024: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1376 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62947 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1025: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1376 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 62965 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1026: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 62983 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1027: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 63001 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1028: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 63019 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1029: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_R8);


#line 63037 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1030: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63055 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1031: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63073 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1032: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1033: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63109 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1034: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63127 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1035: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63145 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1036: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63163 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1037: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_R8, DIS_EADDR8);


#line 63181 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1038: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1364 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63199 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1039: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1364 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1040: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1364 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63235 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1041: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1364 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1042: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, addReloc(DIS_I32));


#line 63272 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1043: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, addReloc(DIS_I32));


#line 63291 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1044: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 11 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, addReloc(DIS_I32));


#line 63310 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1045: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 10 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, addReloc(DIS_I32));


#line 63329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1046: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1130 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1047: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 4 + MATCH_p; 
      
#line 1130 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1048: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 8 + MATCH_p; 
      
#line 1130 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1049: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1130 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32, DIS_I8);


#line 63409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1050: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63427 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1051: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63445 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1052: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1053: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8, DIS_REG8);


#line 63481 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1054: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1055: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1056: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1057: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32, DIS_REG32);


#line 63553 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1058: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63571 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1059: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63589 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1060: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1061: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG8, DIS_EADDR8);


#line 63625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1062: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1063: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63661 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1064: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63679 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1065: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_EADDR32);


#line 63697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1066: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63715 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1067: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63733 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1068: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_REG32, DIS_MEM);


#line 63751 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1069: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 847 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63768 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1070: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 847 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63785 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1071: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 847 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63802 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1072: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 847 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 63819 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1073: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63836 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1074: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63853 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1075: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63870 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1076: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1077: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63904 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1078: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1079: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1080: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1081: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1082: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 63989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1083: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64006 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1084: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1085: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64040 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1086: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64057 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1087: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64074 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1088: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1089: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64108 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1090: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64125 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1091: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64142 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1092: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1093: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64176 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1094: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1095: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64210 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1096: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1097: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1098: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1099: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64278 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1100: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1101: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64312 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1102: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1103: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1104: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64363 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1105: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64380 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1106: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64397 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1107: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64414 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1108: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64431 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1109: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64448 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1110: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64465 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1111: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64482 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1112: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1113: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64516 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1114: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1115: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64550 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1116: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64567 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1117: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64584 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1118: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 64601 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1119: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64618 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1120: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64635 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1121: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64652 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1122: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 64669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1123: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64686 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1124: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64703 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1125: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64720 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1126: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64737 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1127: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64754 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1128: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1129: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64788 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1130: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64805 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1131: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64822 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1132: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64839 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1133: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64856 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1134: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1135: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64890 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1136: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64907 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1137: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64924 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1138: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64941 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1139: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64958 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1140: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64975 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1141: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 64992 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1142: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65009 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1143: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65026 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1144: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65043 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1145: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65060 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1146: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65077 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1147: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65094 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1148: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1149: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65128 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1150: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65145 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1151: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65162 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1152: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1153: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65196 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1154: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65213 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1155: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65230 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1156: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65247 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1157: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65264 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1158: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1159: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1160: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1161: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65332 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1162: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65349 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1163: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65366 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1164: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1165: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65400 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1166: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM32);


#line 65417 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1167: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65439 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1168: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65461 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1169: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65483 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1170: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 65505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1171: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65522 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1172: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1173: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65556 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1174: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 65573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1175: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1176: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1177: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1178: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1179: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65658 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1180: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1181: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65692 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1182: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1183: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1184: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1185: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65760 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1186: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1187: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1188: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1189: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65828 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1190: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65845 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1191: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65862 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1192: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65879 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1193: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65896 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1194: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65913 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1195: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1196: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65947 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1197: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65964 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1198: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1199: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 65998 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1200: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1201: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66032 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1202: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1203: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66066 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1204: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1205: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1206: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1207: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66134 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1208: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1209: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66168 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1210: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1211: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1212: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1213: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66236 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1214: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1215: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66270 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1216: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66287 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1217: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66304 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1218: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 66321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1219: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1220: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1221: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66372 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1222: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1223: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66406 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1224: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66423 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1225: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66440 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1226: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM);


#line 66457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1227: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66474 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1228: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1229: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66508 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1230: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66525 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1231: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66542 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1232: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1233: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66576 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1234: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1235: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66610 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1236: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1237: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66644 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1238: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66661 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1239: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66678 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1240: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66695 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1241: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66712 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1242: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1243: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66746 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1244: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1245: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66780 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1246: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66797 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1247: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66814 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1248: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66831 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1249: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66848 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1250: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1251: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66882 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1252: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66899 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1253: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66916 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1254: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66933 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1255: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66950 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1256: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66967 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1257: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 66984 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1258: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67001 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1259: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67018 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1260: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1261: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67052 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1262: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67069 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1263: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67086 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1264: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67103 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1265: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67120 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1266: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67137 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1267: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1268: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1269: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67188 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1270: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67205 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1271: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67222 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1272: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67239 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1273: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67256 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1274: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM16);


#line 67273 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1275: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67290 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1276: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1277: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67324 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1278: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67341 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1279: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67358 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1280: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67375 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1281: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67392 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1282: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1283: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67426 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1284: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1285: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67460 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1286: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM80);


#line 67477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1287: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67494 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1288: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1289: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67528 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1290: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_MEM64);


#line 67545 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1291: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1103 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67580 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1292: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1103 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1293: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1103 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67650 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1294: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1103 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);

//	| IN.eAX.DXod() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.DXow() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.AL.DX() [name] =>
//		result.rtl = instantiate(pc, name);

//	| IN.eAX.Ibod(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.eAX.Ibow(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);

//	| IN.AL.Ib(i8) [name] =>
//		result.rtl = instantiate(pc, name, DIS_I8);


#line 67685 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1295: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67702 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1296: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67719 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1297: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67736 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1298: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);


#line 67753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1299: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1097 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67770 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1300: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1097 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67787 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1301: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1097 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67804 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1302: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1097 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1303: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67838 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1304: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67855 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1305: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67872 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1306: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 67889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1307: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 104 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67914 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1308: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 104 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67939 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1309: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 104 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67964 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1310: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 104 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, name, DIS_EADDR32);
		auto newCall = new CallStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		result.rtl->appendStmt(newCall);


#line 67989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1311: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 115 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1312: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 115 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68039 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1313: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 115 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68064 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1314: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 115 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement(DIS_EADDR32);
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 68089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1315: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68106 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1316: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1317: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68140 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1318: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR32);


#line 68157 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_finished_c: (void)0; /*placeholder for label*/
  
}
#line 68166 "pentiumdecoder.cpp"

#line 2081 "machine/pentium/decoder.m"

	if (result.valid && !result.rtl)
		result.rtl = new RTL(pc);  // FIXME:  Why return an empty RTL?
	result.numBytes = nextPC - pc;
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. %ecx --> r[ 25 ]
 *
 * \param pc    The instruction stream address of the dynamic address.
 * \param size  Size of the operand (important if a register).
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Eaddr(ADDRESS pc, const BinaryFile *bf, int size) const
{
	/*
	 * pc is currently at the Mod R/M byte.
	 * Encoding quick-reference:
	 * mod  r_m     ss  index    base    imm    constructor                   exp
	 * -----------  -------------------  -----  ----------------------------  -----------------------------------
	 * 0    4       ?   4        5       i32=d  IndirMem [d]                  m[                             i32]
	 * 0    4       ss  index!4  5       i32=d  ShortIndex d[index * ss]      m[          (r[index] << ss) + i32]
	 * 0    4       ?   4        base!5         Base [base]                   m[r[base]                         ]
	 * 0    4       ss  index!4  base!5         Index [base][index * ss]      m[r[base] + (r[index] << ss)      ]
	 * 0    5                            i32=a  Abs32 [a]                     m[                             i32]
	 * 0    reg!45                              Indir [reg]                   m[r[reg]                          ]
	 * 1    4       ?   4        base    i8     Base8 i8![base]               m[r[base]                    + i8 ]
	 * 1    4       ss  index!4  base    i8     Index8 i8![base][index * ss]  m[r[base] + (r[index] << ss) + i8 ]
	 * 1    reg!4                        i8     Disp8 i8![reg]                m[r[reg]                     + i8 ]
	 * 2    4       ?   4        base    i32=d  Base32 d[base]                m[r[base]                    + i32]
	 * 2    4       ss  index!4  base    i32=d  Index32 d[base][index * ss]   m[r[base] + (r[index] << ss) + i32]
	 * 2    reg!4                        i32=d  Disp32 d[reg]                 m[r[reg]                     + i32]
	 * 3    reg                                 Reg reg                         r[reg]
	 *
	 * All but the last row refer to a memory location and are handed off
	 * to dis_Mem().
	 *
	 * Most special characters in the constructor are just decoration
	 * (with the exception of ! for sign-extend); the parameters are
	 * passed to constructors in the order they appear.
	 */


#line 68215 "pentiumdecoder.cpp"

#line 2126 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2126 "machine/pentium/decoder.m"
pc
#line 68223 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */ == 3) { 
      unsigned reg = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
      
#line 2129 "machine/pentium/decoder.m"

		switch (size) {
		case  8: return DIS_REG8;
		case 16: return DIS_REG16;
		default:
		case 32: return DIS_REG32;
		}

#line 68241 "pentiumdecoder.cpp"

      
    } /*opt-block*//*opt-block+*/
    else 
      goto MATCH_label_b0;  /*opt-block+*/
    
  }goto MATCH_finished_b; 
  
  MATCH_label_b0: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = addressToPC(MATCH_p);
      
#line 2127 "machine/pentium/decoder.m"

		return DIS_MEM;

#line 68258 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_b; 
    
  MATCH_finished_b: (void)0; /*placeholder for label*/
  
}
#line 68267 "pentiumdecoder.cpp"

#line 2137 "machine/pentium/decoder.m"
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. [1000] --> m[, 1000
 *
 * \param pc  The address of the Eaddr part of the instr.
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Mem(ADDRESS pc, const BinaryFile *bf) const
{
	ADDRESS lastDwordLc = NO_ADDRESS;


#line 68286 "pentiumdecoder.cpp"

#line 2152 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2152 "machine/pentium/decoder.m"
pc
#line 68294 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned MATCH_w_32_16;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    
      switch((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */) {
        case 0: 
          
            switch((MATCH_w_8_0 & 0x7) /* r_m at 0 */) {
              case 0: case 1: case 2: case 3: case 6: case 7: 
                { 
                  unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
                  
#line 2198 "machine/pentium/decoder.m"

		// m[r[base]]
		return Location::memOf(DIS_BASE);

#line 68317 "pentiumdecoder.cpp"

                  
                }
                
                break;
              case 4: 
                MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                if ((MATCH_w_8_8 & 0x7) /* base at 8 */ == 5) 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
                      
#line 2206 "machine/pentium/decoder.m"

		// m[i32] (Same as Abs32 using SIB)
		return Location::memOf(addReloc(DIS_I32));

#line 68336 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/
                  else { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
                      unsigned index = 
                        (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                      unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                      
#line 2201 "machine/pentium/decoder.m"

		// m[(r[index] << ss) + i32]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_INDEX,
		                                  addReloc(DIS_I32)));

#line 68357 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/ /*opt-block+*/
                else 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    
#line 2171 "machine/pentium/decoder.m"

		// m[r[base]]
		return Location::memOf(DIS_BASE);

#line 68372 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/
                  else { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    unsigned index = 
                      (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                    unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                    
#line 2166 "machine/pentium/decoder.m"

		// m[r[base] + (r[index] << ss)]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  DIS_INDEX));

#line 68389 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/ /*opt-block+*/
                
                break;
              case 5: 
                MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                { 
                  unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                  
#line 2153 "machine/pentium/decoder.m"

		// m[i32]
		return Location::memOf(addReloc(DIS_I32));

#line 68405 "pentiumdecoder.cpp"

                  
                }
                
                break;
              default: assert(0);
            } /* (MATCH_w_8_0 & 0x7) -- r_m at 0 --*/ 
          break;
        case 1: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                int /* [~128..127] */ i8 = 
                  sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
                
#line 2193 "machine/pentium/decoder.m"

		// m[r[base] + i8]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  DIS_I8));

#line 68431 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                int /* [~128..127] */ i8 = 
                  sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2186 "machine/pentium/decoder.m"

		// m[r[base] + (r[index] << ss) + i8]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  new Binary(opPlus,
		                                             DIS_INDEX,
		                                             DIS_I8)));

#line 68455 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            { 
              int /* [~128..127] */ i8 = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned reg = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              
#line 2161 "machine/pentium/decoder.m"

		// m[r[reg] + i8]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_REG32,
		                                  DIS_I8));

#line 68477 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 2: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
                
#line 2181 "machine/pentium/decoder.m"

		// m[r[base] + i32]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  addReloc(DIS_I32)));

#line 68500 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2174 "machine/pentium/decoder.m"

		// m[r[base] + (r[index] << ss) + i32]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  new Binary(opPlus,
		                                             DIS_INDEX,
		                                             addReloc(DIS_I32))));

#line 68523 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            { 
              unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
              
#line 2156 "machine/pentium/decoder.m"

		// m[r[base] + i32]
		return Location::memOf(new Binary(opPlus,
		                                  DIS_BASE,
		                                  addReloc(DIS_I32)));

#line 68544 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 3: 
          assert(0);  /* no match */break;
        default: assert(0);
      } /* (MATCH_w_8_0 >> 6 & 0x3) -- mod at 0 --*/ 
    
  }goto MATCH_finished_a; 
  
  MATCH_finished_a: (void)0; /*placeholder for label*/
  
}
#line 68561 "pentiumdecoder.cpp"

#line 2210 "machine/pentium/decoder.m"
}

#if 0 // Cruft?
/**
 * Check to see if the instructions at the given offset match any callee
 * prologue, i.e. does it look like this offset is a pointer to a function?
 *
 * \param hostPC  Pointer to the code in question (native address).
 * \returns       True if a match found.
 */
bool
PentiumDecoder::isFuncPrologue(ADDRESS hostPC)
{
#if 0
	int locals, regs;
	if (InstructionPatterns::frameless_pro(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::struct_ptr(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::std_entry(prog.csrSrc, hostPC, locals, regs))
		return true;
#endif
	return false;
}
#endif

/**
 * Generates statements for the BSF and BSR series (Bit Scan Forward/Reverse).
 *
 * \param[in,out] result  Contains all the information gathered during
 *                        decoding.
 * \param[in] pc          Native PC address (start of the BSF/BSR
 *                        instruction).
 * \param[in] dest        An expression for the destination register.
 * \param[in] modrm       An expression for the operand being scanned.
 * \param[in] init        Initial value for the dest register.
 * \param[in] size        sizeof(modrm) (in bits).
 * \param[in] incdec      Either opPlus for Forward scans,
 *                        or opMinus for Reverse scans.
 * \param[in] numBytes    Number of bytes this instruction.
 */
void
PentiumDecoder::genBSFR(DecodeResult &result, ADDRESS pc, Exp *dest, Exp *modrm, int init, int size, OPER incdec, int numBytes)
{
	// Note the horrible hack needed here. We need initialisation code, and an extra branch, so the %SKIP/%RPT won't
	// work. We need to emit 6 statements, but these need to be in 3 RTLs, since the destination of a branch has to be
	// to the start of an RTL.  So we use a state machine, and set numBytes to 0 for the first two times. That way, this
	// instruction ends up emitting three RTLs, each with the semantics we need.
	// Note: we don't use pentium.SSL for these.
	// BSFR1:
	//  pc+0: *1* %ZF := 1
	//  pc+0: branch exit condition modrm = 0
	// BSFR2:
	//  pc+1: *1* %ZF := 0
	//  pc+1: dest := init
	// BSFR3:
	//  pc+2: dest := dest op 1
	//  pc+2: branch pc+2 condition modrm@[dest:dest] = 0
	// exit:

	auto stmts = std::list<Statement *>();
	Statement *s;
	BranchStatement *b;
	switch (result.reDecode) {
	case 0:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(1));
		stmts.push_back(s);
		b = new BranchStatement(pc + numBytes);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEqual,
		                          modrm->clone(),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	case 1:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(0));
		stmts.push_back(s);
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Const(init));
		stmts.push_back(s);
		break;
	case 2:
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Binary(incdec,
		                          dest->clone(),
		                          new Const(1)));
		stmts.push_back(s);
		b = new BranchStatement(pc + 2);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEqual,
		                          new Ternary(opAt,
		                                      modrm->clone(),
		                                      dest->clone(),
		                                      dest->clone()),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	default:
		// Should never happen
		assert(result.reDecode - result.reDecode);
	}
	result.rtl = new RTL(pc + result.reDecode);
	result.rtl->splice(stmts);
	if (DEBUG_DECODER)
		std::cout << std::hex << pc + result.reDecode << std::dec << ": "
		          << "BS" << (init == -1 ? "F" : "R") << (size == 32 ? ".od" : ".ow")
		          << result.reDecode + 1 << "\n";
	// Keep numBytes == 0 until the last state, so we re-decode this instruction 3 times
	if (result.reDecode < 2) {
		// Let the number of bytes be 1. This is important at least for setting the fallthrough address for the branch
		// (in the first RTL), which should point to the next RTL
		result.numBytes = 1;
		result.reDecode += 1;
	} else {
		result.numBytes = numBytes;
		result.reDecode = 0;
	}
}

#line 68689 "pentiumdecoder.cpp"

