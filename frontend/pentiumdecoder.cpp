#define sign_extend(N,SIZE) (((int)((N) << (sizeof(unsigned)*8-(SIZE)))) >> (sizeof(unsigned)*8-(SIZE)))
#include <assert.h>

#line 1 "machine/pentium/decoder.m"
/**
 * \file
 * \brief Contains the high level decoding functionality, for example matching
 *        logues, calls, branches, etc.  Ordinary instructions are processed
 *        in decoder_low.m
 *
 * \authors
 * Copyright (C) 1998-2001, The University of Queensland
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "pentiumdecoder.h"

#include "boomerang.h"
#include "exp.h"
#include "prog.h"
#include "rtl.h"
#include "statement.h"

#include <cassert>

class Proc;

#define DIS_R8    (dis_Reg(r8  +  8))
#define DIS_R16   (dis_Reg(r16 +  0))
#define DIS_R32   (dis_Reg(r32 + 24))
#define DIS_REG8  (dis_Reg(reg +  8))
#define DIS_REG16 (dis_Reg(reg +  0))
#define DIS_REG32 (dis_Reg(reg + 24))
#define DIS_SR16  (dis_Reg(sr16 + 16))
#define DIS_IDX   (dis_Reg(idx + 32))
#define DIS_IDXP1 (dis_Reg((idx + 1) % 7 + 32))

#define DIS_EADDR32 (dis_Eaddr(Eaddr, bf, 32))
#define DIS_EADDR16 (dis_Eaddr(Eaddr, bf, 16))
#define DIS_EADDR8  (dis_Eaddr(Eaddr, bf,  8))
#define DIS_MEM     (dis_Mem(Mem, bf))
#define DIS_MEM16   (dis_Mem(Mem16, bf))    // Probably needs changing
#define DIS_MEM32   (dis_Mem(Mem32, bf))    // Probably needs changing
#define DIS_MEM64   (dis_Mem(Mem64, bf))    // Probably needs changing
#define DIS_MEM80   (dis_Mem(Mem80, bf))    // Probably needs changing

#define DIS_I32     (addReloc(new Const(i32)))
#define DIS_I16     (new Const(i16))
#define DIS_I8      (new Const(i8))
#define DIS_COUNT   (new Const(count))
#define DIS_OFF     (addReloc(new Const(off)))

#define addressToPC(pc) (pc)
#define fetch8(pc)  bf->readNative1(pc)
#define fetch16(pc) bf->readNative2(pc)
#define fetch32(pc) (lastDwordLc = pc, bf->readNative4(pc))

/**
 * \todo Don't use macros like this inside matcher arms,
 * since multiple copies may be made.
 */
#define SETS(name, dest, cond) \
	auto bs = new BoolAssign(8); \
	bs->setLeftFromList(result.rtl->getList()); \
	result.rtl->getList().front() = bs; \
	bs->setCondType(cond); \
	SHOW_ASM(name << " " << *dest)

static DecodeResult &genBSFR(ADDRESS pc, Exp *reg, Exp *modrm, int init, int size, OPER incdec, int numBytes);

/**
 * Constructor.  The code won't work without this (not sure why the default
 * constructor won't do...)
 */
PentiumDecoder::PentiumDecoder(Prog *prog) :
	NJMCDecoder(prog)
{
	std::string file = Boomerang::get()->getProgPath() + "frontend/machine/pentium/pentium.ssl";
	RTLDict.readSSLFile(file);
}

#if 0 // Cruft?
// For now...
int
PentiumDecoder::decodeAssemblyInstruction(ADDRESS, ptrdiff_t)
{
	return 0;
}
#endif

static DecodeResult result;

/**
 * Decodes a machine instruction and returns an RTL instance.  In most cases a
 * single instruction is decoded.  However, if a higher level construct that
 * may consist of multiple instructions is matched, then there may be a need
 * to return more than one RTL.  The caller_prologue2 is an example of such a
 * construct which encloses an abritary instruction that must be decoded into
 * its own RTL.
 *
 * \param pc       The native address of the pc.
 * \param delta    The difference between the above address and the host
 *                 address of the pc (i.e. the address that the pc is at in
 *                 the loaded object file).
 * \param RTLDict  The dictionary of RTL templates used to instantiate the RTL
 *                 for the instruction being decoded.
 * \param proc     The enclosing procedure.
 *
 * \returns  A DecodeResult structure containing all the information gathered
 *           during decoding.
 */
DecodeResult &
PentiumDecoder::decodeInstruction(ADDRESS pc, const BinaryFile *bf)
{
	// Clear the result structure;
	result.reset();

	ADDRESS nextPC = NO_ADDRESS;

#line 128 "pentiumdecoder.cpp"

#line 122 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 122 "machine/pentium/decoder.m"
pc
#line 136 "pentiumdecoder.cpp"
;
  const char *MATCH_name;
  static const char *MATCH_name_col_0[] = {
    "Jv.Oow", "Jv.NOow", "Jv.Bow", "Jv.NBow", "Jv.Zow", "Jv.NZow", "Jv.BEow", 
    "Jv.NBEow", 
  };
  static const char *MATCH_name_col_1[] = {
    "Jv.Sow", "Jv.NSow", "Jv.Pow", "Jv.NPow", "Jv.Low", "Jv.NLow", "Jv.LEow", 
    "Jv.NLEow", 
  };
  static const char *MATCH_name_page_2[] = {"REPNE.MOVSB", "JMP.Jvow", };
  static const char *MATCH_name_col_3[] = {
    "Jb.O", "Jb.NO", "Jb.B", "Jb.NB", "Jb.Z", "Jb.NZ", "Jb.BE", "Jb.NBE", 
  };
  static const char *MATCH_name_page_4[] = {
    "REPNE.MOVSvow", "REPNE.STOSvow", 
  };
  static const char *MATCH_name_page_5[] = {
    "REPNE.CMPSvow", "REPNE.LODSvow", 
  };
  static const char *MATCH_name_page_6[] = {"REP.MOVSvow", "REPNE.SCASvow", };
  static const char *MATCH_name_page_7[] = {"REPNE.MOVSvod", "REPNE.STOSB", };
  static const char *MATCH_name_page_8[] = {"REPNE.CMPSB", "REPNE.STOSvod", };
  static const char *MATCH_name_page_9[] = {"REPNE.CMPSvod", "REPNE.LODSB", };
  static const char *MATCH_name_page_10[] = {"REP.MOVSB", "REPNE.LODSvod", };
  static const char *MATCH_name_page_11[] = {"REP.MOVSvod", "REPNE.SCASB", };
  static const char *MATCH_name_page_12[] = {"REP.CMPSB", "REPNE.SCASvod", };
  static const char *MATCH_name_page_13[] = {"REP.CMPSvow", "REP.STOSvow", };
  static const char *MATCH_name_page_16[] = {"REP.CMPSvod", "REP.STOSB", };
  static const char *MATCH_name_col_22[] = {
    "Jv.Ood", "Jv.NOod", "Jv.Bod", "Jv.NBod", "Jv.Zod", "Jv.NZod", "Jv.BEod", 
    "Jv.NBEod", 
  };
  static const char *MATCH_name_col_23[] = {
    "Jv.Sod", "Jv.NSod", "Jv.Pod", "Jv.NPod", "Jv.Lod", "Jv.NLod", "Jv.LEod", 
    "Jv.NLEod", 
  };
  static const char *MATCH_name_col_60[] = {
    "Jb.S", "Jb.NS", "Jb.P", "Jb.NP", "Jb.L", "Jb.NL", "Jb.LE", "Jb.NLE", 
  };
  static const char *MATCH_name_col_65[] = {
    NULL, "JMP.Jvod", NULL, "JMP.Jb", 
  };
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned /* [0..65535] */ MATCH_w_16_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned /* [0..65535] */ MATCH_w_16_16;
  unsigned MATCH_w_32_16;
  unsigned /* [0..255] */ MATCH_w_8_24;
  unsigned /* [0..65535] */ MATCH_w_16_24;
  unsigned MATCH_w_32_24;
  unsigned /* [0..255] */ MATCH_w_8_32;
  unsigned /* [0..65535] */ MATCH_w_16_32;
  unsigned MATCH_w_32_32;
  unsigned /* [0..255] */ MATCH_w_8_40;
  unsigned /* [0..65535] */ MATCH_w_16_40;
  unsigned /* [0..255] */ MATCH_w_8_48;
  unsigned MATCH_w_32_48;
  unsigned /* [0..255] */ MATCH_w_8_56;
  unsigned /* [0..65535] */ MATCH_w_16_56;
  unsigned MATCH_w_32_56;
  unsigned /* [0..255] */ MATCH_w_8_64;
  unsigned /* [0..65535] */ MATCH_w_16_64;
  unsigned /* [0..255] */ MATCH_w_8_72;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 3 & 0x1) /* page at 0 */ == 1) 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c786; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c788;  /*opt-block+*/
                              else 
                                goto MATCH_label_c787;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c789; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrb", DIS_EADDR8, DIS_R8);


#line 254 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c787;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c788;  /*opt-block+*/
                        else 
                          goto MATCH_label_c789;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c786; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c790; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c792;  /*opt-block+*/
                              else 
                                goto MATCH_label_c791;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c793; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrod", DIS_EADDR32, DIS_REG32);


#line 322 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c791;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c792;  /*opt-block+*/
                        else 
                          goto MATCH_label_c793;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c790; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c794; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c796;  /*opt-block+*/
                              else 
                                goto MATCH_label_c795;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c797; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmb", DIS_R8, DIS_EADDR8);


#line 390 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c795;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c796;  /*opt-block+*/
                        else 
                          goto MATCH_label_c797;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c794; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c798; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c800;  /*opt-block+*/
                              else 
                                goto MATCH_label_c799;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c801; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmod", DIS_REG32, DIS_EADDR32);


#line 458 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c799;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c800;  /*opt-block+*/
                        else 
                          goto MATCH_label_c801;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c798; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1718 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiAL", DIS_I8);


#line 495 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1670 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiEAX", DIS_I32);


#line 512 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 811 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.CS");


#line 526 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1092 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVD");


#line 548 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c802; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c804;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c803;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c805; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SLDT", DIS_EADDR32);


#line 610 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c803;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c804;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c805;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c802; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STR", DIS_MEM);


#line 659 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c807;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c806;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c808; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STR", DIS_MEM);


#line 705 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c806;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c807;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c808;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 6: case 7: 
                                      goto MATCH_label_c64; break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c809; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c811;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c810;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c812; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LTR", DIS_EADDR32);


#line 788 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c810;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c811;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c812;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c809; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c813; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c815;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c814;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c816; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERR", DIS_EADDR32);


#line 869 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c814;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c815;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c816;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c813; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c817; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c819;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c818;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c820; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERW", DIS_EADDR32);


#line 950 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c818;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c819;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c820;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c817; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 366 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "WBINVD");


#line 994 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SGDT", DIS_MEM);

	// Sets are now in the high level instructions

#line 1025 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c822;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c821;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c823; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SGDT", DIS_MEM);

	// Sets are now in the high level instructions

#line 1072 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c821;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c822;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c823;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 456 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SIDT", DIS_MEM);


#line 1121 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c825;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c824;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c826; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 456 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SIDT", DIS_MEM);


#line 1167 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c824;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c825;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c826;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 3: case 5: case 6: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c827; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c829;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c828;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c830; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SMSW", DIS_EADDR32);


#line 1250 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c828;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c829;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c830;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c827; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 1089 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVLPG", DIS_MEM);


#line 1299 "pentiumdecoder.cpp"

                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c832;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c831;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c833; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 1089 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVLPG", DIS_MEM);


#line 1345 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c831;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c832;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c833;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c64; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c834; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c836;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c835;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c837; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.od", DIS_REG32, DIS_EADDR32);


#line 1435 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c835;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c836;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c837;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c834; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c838; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c840;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c839;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c841; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLod", DIS_REG32, DIS_EADDR32);


#line 1520 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c839;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c840;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c841;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c838; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: case 5: case 7: 
                              goto MATCH_label_c64; break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1253 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CLTS");


#line 1561 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: case 2: case 4: case 5: case 6: case 7: 
                      case 13: case 14: case 15: 
                        goto MATCH_label_c64; break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 363 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "WRMSR");


#line 1588 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 1: case 3: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 590 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RDMSR");


#line 1608 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 8: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 247 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 1639 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 245 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 1661 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 243 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 1683 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 241 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 1705 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 239 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 1727 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 237 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 1749 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 235 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 1771 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_23[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 233 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 1793 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 263 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);


#line 1821 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 261 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 1843 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 259 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 1865 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 257 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 1887 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 255 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 1909 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 253 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 1931 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 251 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 1953 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                MATCH_name = 
                                  MATCH_name_col_22[(MATCH_w_8_8 & 0x7) 
                                      /* col at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 249 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 1975 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c866; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c868; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c867; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c869; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JMI);

#line 2052 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c867; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c868; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c869; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.S"; 
                                      goto MATCH_label_c866; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c870; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c872; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c871; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c873; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JPOS);

#line 2158 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c871; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c872; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c873; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NS"; 
                                      goto MATCH_label_c870; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: 
                                goto MATCH_label_c64; break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c874; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c876; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c875; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c877; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 2272 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c875; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c876; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c877; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.L"; 
                                      goto MATCH_label_c874; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c878; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c880; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c879; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c881; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSGE);

#line 2378 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c879; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c880; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c881; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NL"; 
                                      goto MATCH_label_c878; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c882; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c884; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c883; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c885; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSLE);

#line 2484 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c883; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c884; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c885; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.LE"; 
                                      goto MATCH_label_c882; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c886; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c888; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c887; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c889; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 2590 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c887; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c888; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c889; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NLE"; 
                                      goto MATCH_label_c886; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c842; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c844; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c843; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c845; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);


#line 2710 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c843; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c844; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c845; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.B"; 
                                      goto MATCH_label_c842; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c846; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c848; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c847; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c849; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUGE);

#line 2816 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c847; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c848; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c849; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NB"; 
                                      goto MATCH_label_c846; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c850; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c852; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c851; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c853; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JE);

#line 2922 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c851; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c852; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c853; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.Z"; 
                                      goto MATCH_label_c850; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c854; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c856; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c855; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c857; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JNE);

#line 3028 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c855; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c856; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c857; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NZ"; 
                                      goto MATCH_label_c854; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c858; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c860; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c859; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c861; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JULE);

#line 3134 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c859; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c860; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c861; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.BE"; 
                                      goto MATCH_label_c858; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c862; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c864; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c863; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c865; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        { 
                                          const char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUG);

#line 3240 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c863; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c864; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c865; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NBE"; 
                                      goto MATCH_label_c862; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 796 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.GS");


#line 3298 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 799 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.FS");


#line 3310 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 850 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.GS");


#line 3326 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 853 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.FS");


#line 3338 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RSM");


#line 3354 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1226 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CPUID");


#line 3366 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c894; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c896;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c895;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c897; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSod", DIS_EADDR32, DIS_REG32);


#line 3426 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c895;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c896;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c897;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c894; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c890; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c892;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c891;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c893; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTod", DIS_EADDR32, DIS_REG32);


#line 3506 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c891;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c892;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c893;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c890; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c902; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c904; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c903; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            goto MATCH_label_c905; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 450 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 3610 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        goto MATCH_label_c903; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        goto MATCH_label_c904; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        goto MATCH_label_c905; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c902; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c898; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c900; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c899; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            goto MATCH_label_c901; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 444 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 3725 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        goto MATCH_label_c899; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        goto MATCH_label_c900; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        goto MATCH_label_c901; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c898; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c910; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c912;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c911;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c913; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 438 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLod", DIS_EADDR32, DIS_REG32);


#line 3822 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c911;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c912;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c913;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c910; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c906; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c908;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c907;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c909; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLod", DIS_EADDR32, DIS_REG32);


#line 3902 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c907;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c908;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c909;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c906; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 6: 
                              goto MATCH_label_c64; break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c914; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c916;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c915;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c917; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1160 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmod", DIS_REG32, DIS_EADDR32);


#line 3987 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c915;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c916;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c917;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c914; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c64; break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: case 1: case 2: case 3: 
                                      goto MATCH_label_c64; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c947; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c949; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c948; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c950; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiod", DIS_EADDR32, DIS_I8);


#line 4107 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c948; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c949; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c950; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c947; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c951; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c953; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c952; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c954; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiod", DIS_I8, DIS_EADDR32);


#line 4226 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c952; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c953; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c954; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c951; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c955; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c957; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c956; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c958; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiod", DIS_EADDR32, DIS_I8);


#line 4345 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c956; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c957; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c958; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c955; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c959; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c961; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c960; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c962; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiod", DIS_EADDR32, DIS_I8);


#line 4464 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c960; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c961; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c962; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c959; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c963; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c965;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c964;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c966; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCod", DIS_EADDR32, DIS_REG32);


#line 4567 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c964;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c965;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c966;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c963; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c967; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c969;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c968;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c970; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1354 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 4648 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c968;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c969;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c970;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c967; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c971; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c973;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c972;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c974; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1346 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 4729 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c972;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c973;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c974;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c971; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c975; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c977;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c976;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c978; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 4809 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c976;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c977;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c978;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c975; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c979; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c981;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c980;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c982; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 4889 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c980;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c981;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c982;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c979; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c918; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c920;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c919;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c921; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 4974 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c919;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c920;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c921;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c918; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c922; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c924;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c923;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c925; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 5054 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c923;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c924;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c925;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c922; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSS", DIS_REG32, DIS_MEM);


#line 5106 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c927;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c926;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c928; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSS", DIS_REG32, DIS_MEM);


#line 5152 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c926;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c927;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c928;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c929; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c931;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c930;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c932; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRod", DIS_EADDR32, DIS_REG32);


#line 5232 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c930;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c931;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c932;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c929; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LFS", DIS_REG32, DIS_MEM);


#line 5284 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c934;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c933;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c935; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LFS", DIS_REG32, DIS_MEM);


#line 5330 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c933;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c934;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c935;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LGS", DIS_REG32, DIS_MEM);


#line 5382 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c937;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c936;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c938; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LGS", DIS_REG32, DIS_MEM);


#line 5428 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c936;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c937;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c938;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c939; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c941;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c940;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c942; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 5508 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c940;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c941;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c942;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c939; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c943; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c945;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c944;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c946; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 5588 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c944;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c945;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c946;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c943; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 12: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1343 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BSWAP", DIS_R32);


#line 5629 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c983; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c985;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c984;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c986; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 5688 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c984;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c985;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c986;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c983; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c987; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c989;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c988;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c990; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 5768 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c988;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c989;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c990;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c987; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: 
                                goto MATCH_label_c64; break;
                              case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 1) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              { 
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 3 + MATCH_p; 
                                                
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG8B", DIS_MEM);


#line 5821 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c992;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c991;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c993; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG8B", DIS_MEM);


#line 5864 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c991;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c992;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c993;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c64; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c994; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c996;  /*opt-block+*/
                              else 
                                goto MATCH_label_c995;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c997; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrb", DIS_EADDR8, DIS_R8);


#line 5950 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c995;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c996;  /*opt-block+*/
                        else 
                          goto MATCH_label_c997;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c994; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c998; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1000;  /*opt-block+*/
                              else 
                                goto MATCH_label_c999;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1001; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrod", DIS_EADDR32, DIS_REG32);


#line 6018 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c999;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1000;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1001;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c998; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1002; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1004;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1003;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1005; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmb", DIS_R8, DIS_EADDR8);


#line 6086 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1003;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1004;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1005;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1002; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1006; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1008;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1007;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1009; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmod", DIS_REG32, DIS_EADDR32);


#line 6154 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1007;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1008;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1009;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1006; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1712 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiAL", DIS_I8);


#line 6191 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1664 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiEAX", DIS_I32);


#line 6208 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 805 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.DS");


#line 6222 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 856 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.DS");


#line 6235 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1010; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1012;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1011;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1013; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrb", DIS_EADDR8, DIS_R8);


#line 6289 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1011;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1012;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1013;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1010; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1014; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1016;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1015;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1017; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrod", DIS_EADDR32, DIS_REG32);


#line 6357 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1015;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1016;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1017;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1014; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1018; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1020;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1019;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1021; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmb", DIS_R8, DIS_EADDR8);


#line 6425 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1019;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1020;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1021;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1018; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1022; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1024;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1023;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1025; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmod", DIS_REG32, DIS_EADDR32);


#line 6493 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1023;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1024;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1025;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1022; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1706 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiAL", DIS_I8);


#line 6530 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1658 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiEAX", DIS_I32);


#line 6547 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 330 "machine/pentium/decoder.m"
  // For now, treat seg.cs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 6561 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1214 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DAS");


#line 6574 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1026; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1028;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1027;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1029; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrb", DIS_EADDR8, DIS_R8);


#line 6628 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1027;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1028;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1029;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1026; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1030; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1032;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1031;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1033; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrod", DIS_EADDR32, DIS_REG32);


#line 6696 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1031;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1032;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1033;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1030; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1034; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1036;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1035;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1037; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmb", DIS_R8, DIS_EADDR8);


#line 6764 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1035;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1036;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1037;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1034; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1038; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1040;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1039;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1041; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmod", DIS_REG32, DIS_EADDR32);


#line 6832 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1039;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1040;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1041;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1038; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1700 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiAL", DIS_I8);


#line 6869 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1652 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiEAX", DIS_I32);


#line 6886 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 333 "machine/pentium/decoder.m"
  // For now, treat seg.ds as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 6900 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1199 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DECod", DIS_R32);


#line 6920 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 865 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POPod", DIS_R32);


#line 6936 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 814 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Ivod", DIS_I32);


#line 6956 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c1042; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c1044; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c1043; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                              goto MATCH_label_c1045; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                          { 
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 8 + MATCH_p; 
                            
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);


#line 7020 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                          goto MATCH_label_c1043; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                          goto MATCH_label_c1044; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                          goto MATCH_label_c1045; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                        goto MATCH_label_c1042; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 820 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Ixob", DIS_I8);


#line 7071 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c1046; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c1048; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c1047; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                              goto MATCH_label_c1049; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                          { 
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            int /* [~128..127] */ i8 = 
                              sign_extend(
                                          (MATCH_w_8_32 & 0xff) 
                                                /* i8 at 32 */, 8);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 5 + MATCH_p; 
                            
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);


#line 7138 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                          goto MATCH_label_c1047; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                          goto MATCH_label_c1048; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                          goto MATCH_label_c1049; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        goto MATCH_label_c1046; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 175 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 7200 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 173 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 7221 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 171 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 7242 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 169 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 7263 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 167 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 7284 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 165 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 7305 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 163 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 7326 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_60[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 161 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 7347 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1050; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1052;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1051;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1053; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrb", DIS_EADDR8, DIS_REG8);


#line 7402 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1051;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1052;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1053;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1050; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1054; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1056;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1055;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1057; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrod", DIS_EADDR32, DIS_REG32);


#line 7470 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1055;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1056;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1057;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1054; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1058; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1060;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1059;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1061; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmb", DIS_REG8, DIS_EADDR8);


#line 7538 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1059;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1060;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1061;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1058; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1062; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1064;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1063;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1065; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmod", DIS_REG32, DIS_EADDR32);


#line 7606 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1063;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1064;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1065;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1062; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 6: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.od", DIS_REG32, DIS_MEM);


#line 7653 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1067;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1066;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1068; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.od", DIS_REG32, DIS_MEM);


#line 7693 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1066;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1067;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1068;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                goto MATCH_label_c1069; break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) 
                                  goto MATCH_label_c1071;  /*opt-block+*/
                                else 
                                  goto MATCH_label_c1070;  /*opt-block+*/
                                
                                break;
                              case 5: 
                                goto MATCH_label_c1072; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 871 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evod", DIS_EADDR32);


#line 7761 "pentiumdecoder.cpp"

                            
                          } /*opt-block*//*opt-block+*/
                          else 
                            goto MATCH_label_c1070;  /*opt-block+*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                            goto MATCH_label_c1071;  /*opt-block+*/
                          else 
                            goto MATCH_label_c1072;  /*opt-block+*/
                          
                          break;
                        case 3: 
                          goto MATCH_label_c1069; break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1265 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CWDE");


#line 7802 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1220 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CDQ");


#line 7815 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 2: 
                  nextPC = 7 + MATCH_p; 
                  
#line 1273 "machine/pentium/decoder.m"

	//| CALL.aPod(seg, off) =>
		result.rtl = instantiate(pc, "NOP");


#line 7829 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 369 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "WAIT");


#line 7842 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 4: case 5: 
                  goto MATCH_label_c64; break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SAHF");


#line 7857 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1082 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAHF");

	/* Branches have been handled in decodeInstruction() now */

#line 7871 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    unsigned i8 = (MATCH_w_8_8 & 0xff) /* i8 at 8 */;
                    nextPC = 2 + MATCH_p; 
                    
#line 402 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.AL.Ib", DIS_I8);


#line 7893 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 396 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.eAX.Ivod", DIS_I32);


#line 7910 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  nextPC = 1 + MATCH_p; 
                  
#line 414 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STOSB");


#line 7924 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 408 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STOSvod");


#line 7937 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1730 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LODSB");

	/* Floating point instructions */

#line 7951 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1724 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LODSvod");


#line 7964 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SCASB");


#line 7977 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SCASvod");


#line 7990 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            { 
              unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 5 + MATCH_p; 
              
#line 983 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVid", DIS_R32, DIS_I32);


#line 8010 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
                    nextPC = 4 + MATCH_p; 
                    
#line 1187 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ENTER", DIS_I16, DIS_I8);


#line 8033 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1064 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEAVE");


#line 8047 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RET.far.Iw", DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 8064 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 486 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RET.far");
		result.rtl->appendStmt(new ReturnStatement);


#line 8079 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 4: 
                  goto MATCH_label_c64; break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1098 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INT.Ib", DIS_I8);

// Removing because an invalid instruction is better than trying to
// instantiate this. -trent
//	| INT3() =>
//		result.rtl = instantiate(pc, "INT3");

//	| INSvod() =>
//		result.rtl = instantiate(pc, "INSvod");

//	| INSvow() =>
//		result.rtl = instantiate(pc, "INSvow");

//	| INSB() =>
//		result.rtl = instantiate(pc, "INSB");


#line 8112 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1095 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INTO");


#line 8126 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1086 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IRET");


#line 8139 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R32", DIS_MEM32);


#line 8172 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1074;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1073;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1075; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R32", DIS_MEM32);


#line 8211 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1073;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1074;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1075;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.St.STi", DIS_IDX);


#line 8242 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R32", DIS_MEM32);


#line 8269 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1077;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1076;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1078; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R32", DIS_MEM32);


#line 8308 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1076;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1077;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1078;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.ST.STi", DIS_IDX);


#line 8339 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R32", DIS_MEM32);


#line 8366 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1080;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1079;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1081; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R32", DIS_MEM32);


#line 8405 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1079;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1080;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1081;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1791 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.ST.STi", DIS_IDX);


#line 8436 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R32", DIS_MEM32);


#line 8463 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1083;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1082;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1084; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R32", DIS_MEM32);


#line 8502 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1082;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1083;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1084;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1794 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.ST.STi", DIS_IDX);


#line 8533 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R32", DIS_MEM32);


#line 8560 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1086;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1085;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1087; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R32", DIS_MEM32);


#line 8599 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1085;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1086;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1087;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2030 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.ST.STi", DIS_IDX);


#line 8630 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R32", DIS_MEM32);


#line 8657 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1089;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1088;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1090; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R32", DIS_MEM32);


#line 8696 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1088;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1089;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1090;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2051 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.ST.STi", DIS_IDX);


#line 8727 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R32", DIS_MEM32);


#line 8754 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1092;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1091;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1093; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R32", DIS_MEM32);


#line 8793 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1091;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1092;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1093;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1824 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.ST.STi", DIS_IDX);


#line 8824 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R32", DIS_MEM32);


#line 8851 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1095;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1094;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1096; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R32", DIS_MEM32);


#line 8890 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1094;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1095;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1096;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1845 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.ST.STi", DIS_IDX);


#line 8921 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1890 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR32", DIS_MEM32);


#line 8956 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1098;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1097;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1099; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1890 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR32", DIS_MEM32);


#line 8995 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1097;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1098;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1099;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.STi", DIS_IDXP1);


#line 9026 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 2087 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FXCH", DIS_IDX);


#line 9045 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR32", DIS_MEM32);


#line 9071 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1101;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1100;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1102; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR32", DIS_MEM32);


#line 9110 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1100;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1101;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1102;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNOP");


#line 9139 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR32", DIS_MEM32);


#line 9168 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1104;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1103;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1105; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR32", DIS_MEM32);


#line 9207 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1103;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1104;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1105;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDENV", DIS_MEM);


#line 9249 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1107;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1106;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1108; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDENV", DIS_MEM);


#line 9288 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1106;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1107;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1108;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCHS");


#line 9319 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FABS");


#line 9332 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 2: case 3: case 6: case 7: 
                                    goto MATCH_label_c64; break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2066 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FTST");


#line 9347 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2084 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FXAM");


#line 9360 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDCW", DIS_MEM16);


#line 9389 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1110;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1109;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1111; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDCW", DIS_MEM16);


#line 9428 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1109;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1110;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1111;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD1");


#line 9459 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDL2T");


#line 9472 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDL2E");


#line 9485 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDPI");


#line 9498 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDLG2");


#line 9511 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDLN2");


#line 9524 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDZ");


#line 9537 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTENV", DIS_MEM);


#line 9567 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1113;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1112;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1114; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTENV", DIS_MEM);


#line 9606 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1112;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1113;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1114;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "F2XM1");


#line 9637 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2093 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FYL2X");


#line 9650 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1967 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FPTAN");


#line 9663 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1958 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FPATAN");


#line 9676 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2090 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FXTRACT");


#line 9689 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1964 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FPREM1");


#line 9702 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1815 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDECSTP");


#line 9715 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c64; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTCW", DIS_MEM16);


#line 9746 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1116;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1115;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1117; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTCW", DIS_MEM16);


#line 9785 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1115;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1116;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1117;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1961 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FPREM");


#line 9816 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2096 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FYL2XP1");


#line 9829 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1988 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSQRT");


#line 9842 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1985 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSINCOS");


#line 9855 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1970 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRNDINT");


#line 9868 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1979 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSCALE");


#line 9881 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1982 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSIN");


#line 9894 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  case 7: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1812 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOS");


#line 9907 "pentiumdecoder.cpp"

                                    
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I32", DIS_MEM32);


#line 9944 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1119;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1118;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1120; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I32", DIS_MEM32);


#line 9983 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1118;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1119;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1120;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I32", DIS_MEM32);


#line 10026 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1122;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1121;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1123; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I32", DIS_MEM32);


#line 10065 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1121;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1122;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1123;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I32", DIS_MEM32);


#line 10108 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1125;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1124;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1126; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I32", DIS_MEM32);


#line 10147 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1124;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1125;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1126;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I32", DIS_MEM32);


#line 10190 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1128;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1127;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1129; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I32", DIS_MEM32);


#line 10229 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1127;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1128;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1129;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I32", DIS_MEM32);


#line 10272 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1131;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1130;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1132; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I32", DIS_MEM32);


#line 10311 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1130;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1131;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1132;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I32", DIS_MEM32);


#line 10354 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1134;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1133;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1135; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I32", DIS_MEM32);


#line 10393 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1133;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1134;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1135;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 2075 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FUCOMPP");


#line 10422 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I32", DIS_MEM32);


#line 10451 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1137;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1136;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1138; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I32", DIS_MEM32);


#line 10490 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1136;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1137;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1138;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I32", DIS_MEM32);


#line 10533 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1140;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1139;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1141; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I32", DIS_MEM32);


#line 10572 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1139;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1140;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1141;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI32", DIS_MEM32);


#line 10623 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1143;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1142;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1144; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI32", DIS_MEM32);


#line 10662 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1142;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1143;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1144;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1878 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI32", DIS_MEM32);


#line 10707 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1146;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1145;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1147; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1878 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI32", DIS_MEM32);


#line 10746 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1145;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1146;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1147;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1884 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI32", DIS_MEM32);


#line 10789 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1149;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1148;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1150; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1884 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI32", DIS_MEM32);


#line 10828 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1148;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1149;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1150;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNCLEX");


#line 10868 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1872 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FINIT");


#line 10886 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1896 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD80", DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 10920 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1152;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1151;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1153; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1896 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD80", DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 10964 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1151;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1152;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1153;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FUCOMI.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2078 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 10997 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FCOMI.ST.STi"; 
                          { 
                            const char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1806 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 11019 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP80", DIS_MEM80);


#line 11047 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1155;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1154;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1156; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP80", DIS_MEM80);


#line 11086 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1154;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1155;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1156;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R64", DIS_MEM64);


#line 11137 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1158;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1157;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1159; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R64", DIS_MEM64);


#line 11176 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1157;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1158;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1159;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.STi.ST", DIS_IDX);


#line 11207 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R64", DIS_MEM64);


#line 11234 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1161;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1160;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1162; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R64", DIS_MEM64);


#line 11273 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1160;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1161;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1162;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.STi.ST", DIS_IDX);


#line 11304 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R64", DIS_MEM64);


#line 11331 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1164;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1163;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1165; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R64", DIS_MEM64);


#line 11370 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1163;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1164;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1165;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R64", DIS_MEM64);


#line 11413 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1167;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1166;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1168; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R64", DIS_MEM64);


#line 11452 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1166;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1167;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1168;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R64", DIS_MEM64);


#line 11495 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1170;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1169;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1171; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R64", DIS_MEM64);


#line 11534 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1169;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1170;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1171;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2054 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.STi.ST", DIS_IDX);


#line 11565 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R64", DIS_MEM64);


#line 11592 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1173;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1172;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1174; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R64", DIS_MEM64);


#line 11631 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1172;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1173;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1174;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2033 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.STi.ST", DIS_IDX);


#line 11662 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R64", DIS_MEM64);


#line 11689 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1176;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1175;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1177; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R64", DIS_MEM64);


#line 11728 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1175;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1176;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1177;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1848 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.STi.ST", DIS_IDX);


#line 11759 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R64", DIS_MEM64);


#line 11786 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1179;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1178;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1180; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R64", DIS_MEM64);


#line 11825 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1178;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1179;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1180;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1827 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.STi.ST", DIS_IDX);


#line 11856 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1893 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR64", DIS_MEM64);


#line 11891 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1182;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1181;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1183; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1893 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR64", DIS_MEM64);


#line 11930 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1181;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1182;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1183;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1860 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FFREE", DIS_IDX);


#line 11961 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR64", DIS_MEM64);


#line 11990 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1185;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1184;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1186; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR64", DIS_MEM64);


#line 12029 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1184;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1185;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1186;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2006 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.st.STi", DIS_IDX);


#line 12060 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR64", DIS_MEM64);


#line 12087 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1188;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1187;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1189; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR64", DIS_MEM64);


#line 12126 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1187;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1188;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1189;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2009 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.st.STi", DIS_IDX);


#line 12157 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRSTOR", DIS_MEM);


#line 12183 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1191;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1190;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1192; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRSTOR", DIS_MEM);


#line 12222 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1190;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1191;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1192;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2069 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FUCOM", DIS_IDX);


#line 12253 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 2072 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FUCOMP", DIS_IDX);


#line 12272 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNSAVE", DIS_MEM);


#line 12297 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1194;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1193;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1195; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNSAVE", DIS_MEM);


#line 12336 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1193;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1194;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1195;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW", DIS_MEM16);


#line 12379 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1197;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1196;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1198; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW", DIS_MEM16);


#line 12418 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1196;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1197;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1198;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I16", DIS_MEM16);


#line 12469 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1200;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1199;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1201; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I16", DIS_MEM16);


#line 12508 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1199;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1200;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1201;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADDP.STi.ST", DIS_IDX);


#line 12539 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I16", DIS_MEM16);


#line 12566 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1203;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1202;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1204; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I16", DIS_MEM16);


#line 12605 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1202;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1203;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1204;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMULP.STi.ST", DIS_IDX);


#line 12636 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I16", DIS_MEM16);


#line 12663 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1206;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1205;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1207; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I16", DIS_MEM16);


#line 12702 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1205;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1206;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1207;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I16", DIS_MEM16);


#line 12745 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1209;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1208;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1210; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I16", DIS_MEM16);


#line 12784 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1208;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1209;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1210;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1803 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMPP");


#line 12813 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I16", DIS_MEM16);


#line 12842 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1212;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1211;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1213; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I16", DIS_MEM16);


#line 12881 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1211;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1212;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1213;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2063 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBRP.STi.ST", DIS_IDX);


#line 12912 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I16", DIS_MEM16);


#line 12939 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1215;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1214;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1216; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I16", DIS_MEM16);


#line 12978 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1214;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1215;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1216;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2042 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBP.STi.ST", DIS_IDX);


#line 13009 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I16", DIS_MEM16);


#line 13036 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1218;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1217;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1219; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I16", DIS_MEM16);


#line 13075 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1217;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1218;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1219;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1857 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVRP.STi.ST", DIS_IDX);


#line 13106 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I16", DIS_MEM16);


#line 13133 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1221;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1220;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1222; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I16", DIS_MEM16);


#line 13172 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1220;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1221;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1222;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1830 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVP.STi.ST", DIS_IDX);


#line 13203 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI16", DIS_MEM16);


#line 13238 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1224;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1223;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1225; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI16", DIS_MEM16);


#line 13277 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1223;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1224;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1225;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI16", DIS_MEM16);


#line 13322 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1227;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1226;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1228; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI16", DIS_MEM16);


#line 13361 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1226;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1227;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1228;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1881 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI16", DIS_MEM16);


#line 13404 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1230;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1229;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1231; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1881 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI16", DIS_MEM16);


#line 13443 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1229;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1230;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1231;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBLD", DIS_MEM80);


#line 13486 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1233;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1232;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1234; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBLD", DIS_MEM80);


#line 13525 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1232;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1233;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1234;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 2021 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW.AX");


#line 13554 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI64", DIS_MEM64);


#line 13583 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1236;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1235;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1237; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI64", DIS_MEM64);


#line 13622 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1235;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1236;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1237;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FUCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2081 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 13655 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBSTP", DIS_MEM80);


#line 13682 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1239;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1238;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1240; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBSTP", DIS_MEM80);


#line 13721 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1238;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1239;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1240;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOMIP.ST.STi"; 
                              { 
                                const char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1809 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_IDX);


#line 13754 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1887 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP64", DIS_MEM64);


#line 13781 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1242;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1241;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1243; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1887 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP64", DIS_MEM64);


#line 13820 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1241;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1242;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1243;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 1277 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CALL.Jvod", dis_Num(relocd));
		if (relocd == nextPC) {
			// This is a call $+5
			// Use the standard semantics, except for the last statement
			// (just updates %pc)
			result.rtl->getList().pop_back();
			// And don't make it a call statement
		} else {
			auto call = new CallStatement;
			// Set the destination
			call->setDest(relocd);
			result.rtl->getList().push_back(call);
			Proc *destProc = prog->setNewProc(relocd);
			if (destProc == (Proc *)-1) destProc = nullptr;  // In case a deleted Proc
			call->setDestProc(destProc);
		}


#line 13882 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_65[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 151 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 13902 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_65[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 155 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

	/*
	 * Conditional branches, 8 bit offset: 7X XX
	 */

#line 13929 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1262 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CLC");


#line 13949 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 423 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STC");


#line 13962 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 2: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1256 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CLI");


#line 13975 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 417 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STI");


#line 13988 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1259 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CLD");


#line 14001 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 420 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STD");


#line 14014 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1244; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1246;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1245;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1247; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Eb", DIS_EADDR8);

//	| IN.eAX.DXod() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXod");

//	| IN.eAX.DXow() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXow");

//	| IN.AL.DX() =>
//		result.rtl = instantiate(pc, "IN.AL.DX");

//	| IN.eAX.Ibod(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibod", DIS_I8);

//	| IN.eAX.Ibow(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibow", DIS_I8);

//	| IN.AL.Ib(i8) =>
//		result.rtl = instantiate(pc, "IN.AL.Ib", DIS_I8);


#line 14083 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1245;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1246;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1247;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1244; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1248; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1250;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1249;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1251; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Eb", DIS_EADDR8);


#line 14150 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1249;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1250;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1251;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1248; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: case 3: case 4: case 5: case 6: case 7: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1252; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1254;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1253;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1255; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1121 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evod", DIS_EADDR32);


#line 14227 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1253;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1254;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1255;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1252; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1256; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1258;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1257;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1259; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evod", DIS_EADDR32);


#line 14294 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1257;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1258;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1259;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1256; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1260; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1262;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1261;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1263; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, "CALL.Evod", DIS_EADDR32);
		auto newCall = new CallStatement;
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		// Set the destination expression
		newCall->setDest(DIS_EADDR32);
		result.rtl->appendStmt(newCall);


#line 14371 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1261;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1262;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1263;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1260; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: case 5: case 7: 
                        goto MATCH_label_c64; break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1264; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1266;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1265;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1267; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 137 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement;
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		// Set the destination expression
		newJump->setDest(DIS_EADDR32);
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 14451 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1265;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1266;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1267;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1264; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1268; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1270;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1269;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1271; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evod", DIS_EADDR32);


#line 14518 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1269;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1270;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1271;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1268; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    else 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c0; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c2;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c3; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrb", DIS_EADDR8, DIS_R8);


#line 14601 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c2;  /*opt-block+*/
                        else 
                          goto MATCH_label_c3;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c0; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c4; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c6;  /*opt-block+*/
                              else 
                                goto MATCH_label_c5;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c7; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrod", DIS_EADDR32, DIS_REG32);


#line 14669 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c5;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c6;  /*opt-block+*/
                        else 
                          goto MATCH_label_c7;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c4; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c8; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c10;  /*opt-block+*/
                              else 
                                goto MATCH_label_c9;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c11; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmb", DIS_R8, DIS_EADDR8);


#line 14737 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c9;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c10;  /*opt-block+*/
                        else 
                          goto MATCH_label_c11;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c8; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c12; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c14;  /*opt-block+*/
                              else 
                                goto MATCH_label_c13;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c15; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmod", DIS_REG32, DIS_EADDR32);


#line 14805 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c13;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c14;  /*opt-block+*/
                        else 
                          goto MATCH_label_c15;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c12; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1721 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiAL", DIS_I8);


#line 14842 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1673 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiEAX", DIS_I32);


#line 14859 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 802 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.ES");


#line 14873 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 862 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.ES");


#line 14886 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c16; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c18;  /*opt-block+*/
                              else 
                                goto MATCH_label_c17;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c19; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrb", DIS_EADDR8, DIS_R8);


#line 14940 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c17;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c18;  /*opt-block+*/
                        else 
                          goto MATCH_label_c19;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c16; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c20; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c22;  /*opt-block+*/
                              else 
                                goto MATCH_label_c21;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c23; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrod", DIS_EADDR32, DIS_REG32);


#line 15008 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c21;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c22;  /*opt-block+*/
                        else 
                          goto MATCH_label_c23;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c20; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c24; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c26;  /*opt-block+*/
                              else 
                                goto MATCH_label_c25;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c27; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmb", DIS_R8, DIS_EADDR8);


#line 15076 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c25;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c26;  /*opt-block+*/
                        else 
                          goto MATCH_label_c27;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c24; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c28; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c30;  /*opt-block+*/
                              else 
                                goto MATCH_label_c29;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c31; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmod", DIS_REG32, DIS_EADDR32);


#line 15144 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c29;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c30;  /*opt-block+*/
                        else 
                          goto MATCH_label_c31;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c28; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1715 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiAL", DIS_I8);


#line 15181 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1667 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiEAX", DIS_I32);


#line 15198 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 808 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.SS");


#line 15212 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 859 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.SS");


#line 15225 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c32; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c34;  /*opt-block+*/
                              else 
                                goto MATCH_label_c33;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c35; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrb", DIS_EADDR8, DIS_R8);


#line 15279 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c33;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c34;  /*opt-block+*/
                        else 
                          goto MATCH_label_c35;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c32; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c36; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c38;  /*opt-block+*/
                              else 
                                goto MATCH_label_c37;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c39; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrod", DIS_EADDR32, DIS_REG32);


#line 15347 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c37;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c38;  /*opt-block+*/
                        else 
                          goto MATCH_label_c39;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c36; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c40; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c42;  /*opt-block+*/
                              else 
                                goto MATCH_label_c41;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c43; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmb", DIS_R8, DIS_EADDR8);


#line 15415 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c41;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c42;  /*opt-block+*/
                        else 
                          goto MATCH_label_c43;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c40; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c44; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c46;  /*opt-block+*/
                              else 
                                goto MATCH_label_c45;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c47; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmod", DIS_REG32, DIS_EADDR32);


#line 15483 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c45;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c46;  /*opt-block+*/
                        else 
                          goto MATCH_label_c47;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c44; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1709 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiAL", DIS_I8);


#line 15520 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1661 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiEAX", DIS_I32);


#line 15537 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 336 "machine/pentium/decoder.m"
  // For now, treat seg.es as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 15551 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1217 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DAA");


#line 15564 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c50;  /*opt-block+*/
                              else 
                                goto MATCH_label_c49;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c51; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrb", DIS_EADDR8, DIS_R8);


#line 15618 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c49;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c50;  /*opt-block+*/
                        else 
                          goto MATCH_label_c51;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c52; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c54;  /*opt-block+*/
                              else 
                                goto MATCH_label_c53;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c55; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrod", DIS_EADDR32, DIS_REG32);


#line 15686 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c53;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c54;  /*opt-block+*/
                        else 
                          goto MATCH_label_c55;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c52; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c56; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c58;  /*opt-block+*/
                              else 
                                goto MATCH_label_c57;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c59; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmb", DIS_R8, DIS_EADDR8);


#line 15754 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c57;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c58;  /*opt-block+*/
                        else 
                          goto MATCH_label_c59;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c56; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c60; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c62;  /*opt-block+*/
                              else 
                                goto MATCH_label_c61;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c63; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmod", DIS_REG32, DIS_EADDR32);


#line 15822 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c61;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c62;  /*opt-block+*/
                        else 
                          goto MATCH_label_c63;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c60; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1703 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiAL", DIS_I8);


#line 15859 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1655 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiEAX", DIS_I32);


#line 15876 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 345 "machine/pentium/decoder.m"
  // For now, treat seg.ss as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 15890 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1115 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INCod", DIS_R32);


#line 15910 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 5: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 826 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSHod", DIS_R32);


#line 15926 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 2: case 3: case 7: 
                  goto MATCH_label_c64; break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 339 "machine/pentium/decoder.m"
  // For now, treat seg.fs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 15945 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 342 "machine/pentium/decoder.m"
  // For now, treat seg.gs as a 1 byte NOP
		result.rtl = instantiate(pc, "NOP");


#line 15958 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c69; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c71;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c70;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c72; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrow", DIS_EADDR16, DIS_REG16);


#line 16026 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c70;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c71;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c72;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c69; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c65; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c67;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c66;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c68; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrow", DIS_EADDR16, DIS_REG16);


#line 16106 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c66;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c67;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c68;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c65; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c77; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c79;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c78;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c80; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmow", DIS_REG16, DIS_EADDR16);


#line 16189 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c78;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c79;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c80;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c77; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c73; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c75;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c74;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c76; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmow", DIS_REG16, DIS_EADDR16);


#line 16269 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c74;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c75;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c76;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c73; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1694 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiAX", DIS_I16);


#line 16314 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1697 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiAX", DIS_I16);


#line 16334 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 4 & 0xf) 
                                        /* row at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 4: case 5: 
                                          case 6: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c81; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c83;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c82;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c84; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.ow", DIS_REG16, DIS_EADDR16);


#line 16422 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c82;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c83;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c84;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c81; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c85; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c87;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c86;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c88; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLow", DIS_REG16, DIS_EADDR16);


#line 16520 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c86;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c87;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c88;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c85; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 1: case 2: case 3: case 4: case 5: 
                                    case 6: case 7: case 9: case 13: case 14: 
                                    case 15: 
                                      goto MATCH_label_c64; break;
                                    case 8: 
                                      if ((MATCH_w_8_16 >> 3 & 0x1) 
                                              /* page at 16 */ == 1) 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 211 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JMI);

#line 16586 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 209 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPOS);

#line 16612 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 207 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JPAR);

#line 16638 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 205 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 16664 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 203 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSL);

#line 16690 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 201 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSGE);

#line 16716 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 199 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSLE);

#line 16742 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_1[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 197 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JSG);

#line 16768 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      else 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 227 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 32 bit offset: 0F 8X XX XX XX XX
	 */

#line 16805 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 225 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 16831 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 223 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 16857 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 221 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 16883 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 219 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 16909 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 217 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 16935 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 215 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 16961 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              MATCH_name = 
                                                MATCH_name_col_0[(MATCH_w_8_16 & 0x7) 
                                                    /* col at 16 */]; 
                                              { 
                                                const char *name = MATCH_name;
                                                unsigned relocd = 
                                                  5 + sign_extend(
                                                              (MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 213 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 16987 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      break;
                                    case 10: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 2: case 6: 
                                            goto MATCH_label_c64; break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c93; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c95;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c94;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c96; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSow", DIS_EADDR16, DIS_REG16);


#line 17067 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c94;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c95;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c96;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c93; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c89; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c91;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c90;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c92; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1340 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTow", DIS_EADDR16, DIS_REG16);


#line 17160 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c90;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c91;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c92;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c89; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c101; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c103; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c102; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c104; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      { 
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 453 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 17282 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      goto MATCH_label_c102; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      goto MATCH_label_c103; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      goto MATCH_label_c104; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c101; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c97; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c99; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c98; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            fetch8(
                                                                 8 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c100; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        fetch8(6 + MATCH_p); 
                                                      { 
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 447 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 17417 "pentiumdecoder.cpp"

                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        fetch8(5 + MATCH_p); 
                                                      goto MATCH_label_c98; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        fetch8(9 + MATCH_p); 
                                                      goto MATCH_label_c99; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        fetch8(8 + MATCH_p); 
                                                      goto MATCH_label_c100; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c97; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c109; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c111;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c110;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c112; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 441 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLow", DIS_EADDR16, DIS_REG16);


#line 17529 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c110;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c111;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c112;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c109; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c105; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c107;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c106;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c108; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLow", DIS_EADDR16, DIS_REG16);


#line 17622 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c106;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c107;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c108;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c105; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 7: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c113; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c115;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c114;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c116; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmow", DIS_REG16, DIS_EADDR16);


#line 17718 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c114;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c115;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c116;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c113; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 11: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 7: 
                                            goto MATCH_label_c64; break;
                                          case 1: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c117; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c119;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c118;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c120; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 17828 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c118;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c119;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c120;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c117; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* reg_opcode at 24 */) {
                                                  case 0: case 1: case 2: 
                                                  case 3: 
                                                    goto MATCH_label_c64; 
                                                    
                                                    break;
                                                  case 4: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c121; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c123; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c122; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c124; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiow", DIS_EADDR16, DIS_I8);


#line 17964 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c122; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c123; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c124; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c121; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 5: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c125; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c127; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c126; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c128; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiow", DIS_I8, DIS_EADDR16);


#line 18111 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c126; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c127; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c128; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c125; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 6: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c129; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c131; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c130; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c132; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiow", DIS_EADDR16, DIS_I8);


#line 18258 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c130; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c131; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c132; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c129; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 7: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c133; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  fetch8(
                                                                       4 + 
                                                                       MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    fetch8(
                                                                         9 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c135; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    fetch8(
                                                                         5 + 
                                                                         MATCH_p); 
                                                                  goto MATCH_label_c134; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  fetch8(
                                                                       8 + 
                                                                       MATCH_p); 
                                                                goto MATCH_label_c136; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              fetch8(
                                                                   6 + 
                                                                   MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(
                                                                            MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend(
                                                                            (MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiow", DIS_EADDR16, DIS_I8);


#line 18405 "pentiumdecoder.cpp"

                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              fetch8(
                                                                   5 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c134; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              fetch8(
                                                                   9 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c135; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              fetch8(
                                                                   8 + 
                                                                   MATCH_p); 
                                                            goto MATCH_label_c136; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          goto MATCH_label_c133; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 3 & 0x7) 
                                                      -- reg_opcode at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c141; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c143;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c142;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c144; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCow", DIS_EADDR16, DIS_REG16);


#line 18533 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c142;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c143;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c144;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c141; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c137; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c139;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c138;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c140; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRow", DIS_EADDR16, DIS_REG16);


#line 18626 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c138;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c139;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c140;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c137; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c145; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c147;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c146;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c148; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1358 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDod", DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDow", DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() =>
//		result.rtl = instantiate(pc, "AAS");

//	| AAM() =>
//		result.rtl = instantiate(pc, "AAM");

//	| AAD() =>
//		result.rtl = instantiate(pc, "AAD");

//	| AAA() =>
//		result.rtl = instantiate(pc, "AAA");


#line 18746 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c146;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c147;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c148;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c145; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c149; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c151;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c150;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c152; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1350 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 18845 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c150;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c151;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c152;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c149; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c64;  /*opt-block+*/
                                            break;
                                          case 6: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c157; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c159;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c158;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c160; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned r16 = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 18943 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c158;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c159;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c160;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c157; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c153; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            fetch8(
                                                                 4 + 
                                                                 MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c155;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c154;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c156; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned r16 = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 19036 "pentiumdecoder.cpp"

                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c154;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c155;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c156;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c153; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 12: 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */ == 1) 
                                        if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                /* page at 16 */ == 1) 
                                          goto MATCH_label_c64;  /*opt-block+*/
                                        else { 
                                          MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                          
                                            switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                  /* mod at 24 */) {
                                              case 0: 
                                                
                                                  switch((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */) {
                                                    case 0: case 1: case 2: 
                                                    case 3: case 6: case 7: 
                                                      goto MATCH_label_c161; 
                                                      
                                                      break;
                                                    case 4: 
                                                      MATCH_w_8_32 = 
                                                        fetch8(4 + MATCH_p); 
                                                      if ((MATCH_w_8_32 & 0x7) 
                                                              /* base at 32 */ == 5 && 
                                                        (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ && 
                                                        (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ < 8)) 
                                                        goto MATCH_label_c163;  /*opt-block+*/
                                                      else 
                                                        goto MATCH_label_c162;  /*opt-block+*/
                                                      
                                                      break;
                                                    case 5: 
                                                      goto MATCH_label_c164; 
                                                      
                                                      break;
                                                    default: assert(0);
                                                  } /* (MATCH_w_8_24 & 0x7) 
                                                        -- r_m at 24 --*/ 
                                                break;
                                              case 1: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  unsigned Eaddr = 
                                                    3 + addressToPC(MATCH_p);
                                                  unsigned reg = 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* reg_opcode at 24 */;
                                                  nextPC = 6 + MATCH_p; 
                                                  
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 19135 "pentiumdecoder.cpp"

                                                  
                                                } /*opt-block*//*opt-block+*/
                                                else 
                                                  goto MATCH_label_c162;  /*opt-block+*/
                                                
                                                break;
                                              case 2: 
                                                MATCH_w_8_32 = 
                                                  fetch8(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) 
                                                  goto MATCH_label_c163;  /*opt-block+*/
                                                else 
                                                  goto MATCH_label_c164;  /*opt-block+*/
                                                
                                                break;
                                              case 3: 
                                                goto MATCH_label_c161; break;
                                              default: assert(0);
                                            } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                  -- mod at 24 --*/ 
                                          
                                        } /*opt-block*/ 
                                      else 
                                        goto MATCH_label_c64;  /*opt-block+*/
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 4 & 0xf) 
                                        -- row at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c169; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c171;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c170;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c172; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrow", DIS_EADDR16, DIS_REG16);


#line 19237 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c170;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c171;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c172;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c169; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c165; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c167;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c166;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c168; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrow", DIS_EADDR16, DIS_REG16);


#line 19317 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c166;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c167;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c168;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c165; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c177; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c179;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c178;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c180; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmow", DIS_REG16, DIS_EADDR16);


#line 19400 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c178;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c179;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c180;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c177; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c173; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c175;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c174;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c176; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmow", DIS_REG16, DIS_EADDR16);


#line 19480 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c174;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c175;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c176;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c173; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1688 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiAX", DIS_I16);


#line 19525 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1691 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiAX", DIS_I16);


#line 19545 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c185; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c187;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c186;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c188; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrow", DIS_EADDR16, DIS_REG16);


#line 19615 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c186;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c187;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c188;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c185; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c181; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c183;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c182;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c184; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrow", DIS_EADDR16, DIS_REG16);


#line 19695 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c182;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c183;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c184;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c181; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c193; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c195;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c194;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c196; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmow", DIS_REG16, DIS_EADDR16);


#line 19778 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c194;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c195;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c196;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c193; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c189; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c191;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c190;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c192; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmow", DIS_REG16, DIS_EADDR16);


#line 19858 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c190;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c191;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c192;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c189; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1682 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiAX", DIS_I16);


#line 19903 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1685 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiAX", DIS_I16);


#line 19923 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c201; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c203;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c202;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c204; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrow", DIS_EADDR16, DIS_REG16);


#line 19993 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c202;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c203;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c204;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c201; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c197; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c199;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c198;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c200; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrow", DIS_EADDR16, DIS_REG16);


#line 20073 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c198;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c199;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c200;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c197; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c209; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c211;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c210;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c212; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmow", DIS_REG16, DIS_EADDR16);


#line 20156 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c210;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c211;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c212;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c209; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c205; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c207;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c206;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c208; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmow", DIS_REG16, DIS_EADDR16);


#line 20236 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c206;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c207;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c208;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c205; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1676 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiAX", DIS_I16);


#line 20281 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1679 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiAX", DIS_I16);


#line 20301 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 4: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1202 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DECow", DIS_R32);


#line 20322 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1118 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INCow", DIS_R32);


#line 20335 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 868 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POPow", DIS_R32);  // Check!


#line 20351 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 829 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSHow", DIS_R32);  // Check!


#line 20364 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend(
                                                (MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 817 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Ivow", DIS_I16);


#line 20388 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c213; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c215; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c214; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_16_56 = 
                                              fetch16(7 + MATCH_p); 
                                            goto MATCH_label_c216; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_40 = fetch16(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~32768..32767] */ i16 = 
                                            sign_extend(
                                                        (MATCH_w_16_40 & 0xffff) 
                                                              /* i16 at 40 */, 
                                                        16);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 7 + MATCH_p; 
                                          
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);


#line 20469 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_32 = fetch16(4 + MATCH_p); 
                                        goto MATCH_label_c214; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_64 = fetch16(8 + MATCH_p); 
                                        goto MATCH_label_c215; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_56 = fetch16(7 + MATCH_p); 
                                        goto MATCH_label_c216; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                      goto MATCH_label_c213; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                { 
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_16 & 0xff) 
                                                      /* i8 at 16 */, 8);
                                  nextPC = 3 + MATCH_p; 
                                  
#line 823 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Ixow", DIS_I8);


#line 20525 "pentiumdecoder.cpp"

                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c217; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c219; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c218; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              fetch8(7 + MATCH_p); 
                                            goto MATCH_label_c220; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = fetch8(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~128..127] */ i8 = 
                                            sign_extend(
                                                        (MATCH_w_8_40 & 0xff) 
                                                              /* i8 at 40 */, 
                                                        8);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);


#line 20606 "pentiumdecoder.cpp"

                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                        goto MATCH_label_c218; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = fetch8(8 + MATCH_p); 
                                        goto MATCH_label_c219; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                        goto MATCH_label_c220; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c217; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 7: 
                        goto MATCH_label_c64; break;
                      case 8: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c253; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c255;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c254;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c256; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrow", DIS_EADDR16, DIS_REG16);


#line 20716 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c254;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c255;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c256;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c253; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c221; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c223; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c222; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c224; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiw", DIS_EADDR16, DIS_I16);


#line 20822 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c222; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c223; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c224; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c221; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c225; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c227; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c226; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c228; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiw", DIS_EADDR16, DIS_I16);


#line 20941 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c226; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c227; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c228; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c225; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c229; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c231; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c230; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c232; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiw", DIS_EADDR16, DIS_I16);


#line 21060 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c230; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c231; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c232; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c229; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c233; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c235; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c234; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c236; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiw", DIS_EADDR16, DIS_I16);


#line 21179 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c234; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c235; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c236; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c233; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c237; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c239; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c238; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c240; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiw", DIS_EADDR16, DIS_I16);


#line 21298 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c238; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c239; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c240; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c237; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c241; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c243; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c242; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c244; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiw", DIS_EADDR16, DIS_I16);


#line 21417 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c242; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c243; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c244; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c241; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c245; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c247; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c246; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c248; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiw", DIS_EADDR16, DIS_I16);


#line 21536 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c246; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c247; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c248; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c245; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    fetch16(3 + MATCH_p); 
                                                  goto MATCH_label_c249; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      fetch16(8 + MATCH_p); 
                                                    goto MATCH_label_c251; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      fetch16(4 + MATCH_p); 
                                                    goto MATCH_label_c250; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    fetch16(7 + MATCH_p); 
                                                  goto MATCH_label_c252; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                fetch16(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend(
                                                              (MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiw", DIS_EADDR16, DIS_I16);


#line 21655 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                fetch16(4 + MATCH_p); 
                                              goto MATCH_label_c250; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                fetch16(8 + MATCH_p); 
                                              goto MATCH_label_c251; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c252; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              fetch16(3 + MATCH_p); 
                                            goto MATCH_label_c249; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c289; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c291;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c290;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c292; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmow", DIS_REG16, DIS_EADDR16);


#line 21761 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c290;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c291;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c292;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c289; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c257; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c259; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c258; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c260; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiowb", DIS_EADDR16, DIS_I8);


#line 21867 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c258; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c259; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c260; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c257; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c261; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c263; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c262; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c264; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiowb", DIS_EADDR16, DIS_I8);


#line 21986 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c262; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c263; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c264; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c261; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c265; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c267; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c266; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c268; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiowb", DIS_EADDR16, DIS_I8);


#line 22105 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c266; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c267; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c268; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c265; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c269; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c271; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c270; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c272; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiowb", DIS_EADDR16, DIS_I8);


#line 22224 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c270; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c271; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c272; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c269; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c273; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c275; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c274; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c276; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiowb", DIS_EADDR16, DIS_I8);


#line 22343 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c274; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c275; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c276; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c273; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c277; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c279; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c278; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c280; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiowb", DIS_EADDR16, DIS_I8);


#line 22462 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c278; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c279; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c280; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c277; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c281; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c283; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c282; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c284; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiowb", DIS_EADDR16, DIS_I8);


#line 22581 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c282; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c283; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c284; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c281; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c285; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c287; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c286; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c288; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiowb", DIS_EADDR16, DIS_I8);


#line 22700 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c286; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c287; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c288; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c285; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.ow", DIS_REG16, DIS_MEM);


#line 22778 "pentiumdecoder.cpp"

                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c298;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c297;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c299; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.ow", DIS_REG16, DIS_MEM);


#line 22824 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c297;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c298;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c299;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c64; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c293; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c295;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c294;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c296; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 22904 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c294;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c295;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c296;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c293; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c304; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c306;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c305;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c307; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 874 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evow", DIS_EADDR16);

//	| OUTSvod() =>
//		result.rtl = instantiate(pc, "OUTSvod");

//	| OUTSvow() =>
//		result.rtl = instantiate(pc, "OUTSvow");

//	| OUTSB() =>
//		result.rtl = instantiate(pc, "OUTSB");

//	| OUT.DX.eAXod() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXod");

//	| OUT.DX.eAXow() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXow");

//	| OUT.DX.AL() =>
//		result.rtl = instantiate(pc, "OUT.DX.AL");

//	| OUT.Ib.eAXod(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXod", DIS_I8);

//	| OUT.Ib.eAXow(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXow", DIS_I8);

//	| OUT.Ib.AL(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.AL", DIS_I8);


#line 23013 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c305;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c306;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c307;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c304; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c300; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c302;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c301;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c303; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 23095 "pentiumdecoder.cpp"

                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c301;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c302;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c303;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c300; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                nextPC = 2 + MATCH_p; 
                                
#line 1268 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CBW");

	/* Decode the following as a NOP. We see these in startup code, and anywhere
	 * that calls the OS (as lcall 7, 0) */

#line 23141 "pentiumdecoder.cpp"

                                
                                
                                break;
                              case 1: 
                                nextPC = 2 + MATCH_p; 
                                
#line 1223 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CWD");


#line 23154 "pentiumdecoder.cpp"

                                
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c64; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 351 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHGeAXow", DIS_R32);


#line 23172 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                                { 
                                  unsigned i16 = 
                                    (MATCH_w_16_16 & 0xffff) /* i16 at 16 */;
                                  nextPC = 4 + MATCH_p; 
                                  
#line 399 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.eAX.Ivow", DIS_I16);


#line 23196 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                { 
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 1004 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.eAX.Ovow", DIS_OFF);


#line 23214 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 411 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STOSvow");


#line 23232 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                { 
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 995 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ov.eAXow", DIS_OFF);


#line 23248 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1727 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LODSvow");


#line 23266 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSvow");


#line 23278 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SCASvow");


#line 23294 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1244 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPSvow");


#line 23306 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          { 
                            int /* [~32768..32767] */ i16 = 
                              sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16);
                            unsigned r16 = (MATCH_w_8_8 & 0x7) /* r16 at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 986 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOViw", DIS_R16, DIS_I16);  // Check!


#line 23331 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 12: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 3: case 4: case 5: case 6: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c308; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c310; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c309; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c311; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 23428 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c309; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c310; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c311; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c308; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c312; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c314; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c313; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c315; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 23547 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c313; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c314; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c315; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c312; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c316; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c318; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c317; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c319; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 23666 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c317; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c318; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c319; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c316; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c320; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c322; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c321; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c323; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 23785 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c321; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c322; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c323; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c320; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c324; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c326; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c325; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c327; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 23904 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c325; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c326; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c327; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c324; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c328; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c330; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c329; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c331; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 24023 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c329; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c330; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c331; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c328; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  goto MATCH_label_c332; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      fetch8(8 + MATCH_p); 
                                                    goto MATCH_label_c334; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      fetch8(4 + MATCH_p); 
                                                    goto MATCH_label_c333; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    fetch8(7 + MATCH_p); 
                                                  goto MATCH_label_c335; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                fetch8(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend(
                                                              (MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 24144 "pentiumdecoder.cpp"

                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                fetch8(4 + MATCH_p); 
                                              goto MATCH_label_c333; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                fetch8(8 + MATCH_p); 
                                              goto MATCH_label_c334; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                fetch8(7 + MATCH_p); 
                                              goto MATCH_label_c335; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            goto MATCH_label_c332; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              goto MATCH_label_c336; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                goto MATCH_label_c338; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                goto MATCH_label_c337; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c339; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          { 
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            int /* [~32768..32767] */ i16 = 
                                              sign_extend(
                                                          (MATCH_w_16_40 & 0xffff) 
                                                                /* i16 at 40 */, 
                                                          16);
                                            nextPC = 7 + MATCH_p; 
                                            
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);


#line 24275 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          goto MATCH_label_c337; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          goto MATCH_label_c338; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          goto MATCH_label_c339; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        goto MATCH_label_c336; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c64;  /*opt-block+*/
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 13: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c64; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c340; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c342;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c341;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c343; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1ow", DIS_EADDR16);


#line 24393 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c341;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c342;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c343;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c340; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c344; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c346;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c345;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c347; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORB.Ev.1owR", DIS_EADDR16);


#line 24474 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c345;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c346;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c347;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c344; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c348; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c350;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c349;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c351; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1ow", DIS_EADDR16);


#line 24555 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c349;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c350;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c351;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c348; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c352; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c354;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c353;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c355; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1ow", DIS_EADDR16);


#line 24636 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c353;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c354;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c355;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c352; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c356; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c358;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c357;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c359; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1ow", DIS_EADDR16);


#line 24717 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c357;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c358;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c359;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c356; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c360; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c362;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c361;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c363; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1ow", DIS_EADDR16);


#line 24798 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c361;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c362;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c363;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c360; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c364; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c366;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c365;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c367; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1ow", DIS_EADDR16);


#line 24881 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c365;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c366;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c367;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c364; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c64;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c368; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c370;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c369;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c371; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLow", DIS_EADDR16);


#line 24977 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c369;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c370;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c371;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c368; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c372; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c374;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c373;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c375; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLow", DIS_EADDR16);


#line 25058 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c373;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c374;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c375;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c372; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c376; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c378;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c377;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c379; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLow", DIS_EADDR16);


#line 25139 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c377;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c378;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c379;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c376; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c380; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c382;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c381;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c383; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLow", DIS_EADDR16);


#line 25220 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c381;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c382;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c383;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c380; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c384; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c386;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c385;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c387; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLow", DIS_EADDR16);


#line 25301 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c385;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c386;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c387;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c384; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c388; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c390;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c389;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c391; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLow", DIS_EADDR16);


#line 25382 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c389;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c390;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c391;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c388; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c64; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c392; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    fetch8(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c394;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c393;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c395; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLow", DIS_EADDR16);


#line 25465 "pentiumdecoder.cpp"

                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c393;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              fetch8(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c394;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c395;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c392; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 14: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 1 && 
                          (MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = fetch16(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_2[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            const char *name = MATCH_name;
                            unsigned relocd = 
                              4 + sign_extend(
                                          (MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16) + 
                              addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 153 "machine/pentium/decoder.m"

		result.rtl = unconditionalJump(pc, name, relocd);

#line 25522 "pentiumdecoder.cpp"

                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 15: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 7) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) 
                                  /* page at 8 */ == 1) { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c424; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c426;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c425;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c427; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evow", DIS_EADDR16);


#line 25588 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c425;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c426;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c427;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c424; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c428; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c430;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c429;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c431; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evow", DIS_EADDR16);


#line 25663 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c429;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c430;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c431;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c428; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 2: case 3: case 4: case 5: case 7: 
                                  goto MATCH_label_c64; break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c432; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c434;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c433;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c435; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evow", DIS_EADDR16);

//	| POPFod() =>
//		result.rtl = instantiate(pc, "POPFod");

//	| POPFow() =>
//		result.rtl = instantiate(pc, "POPFow");

//	| POPAod() =>
//		result.rtl = instantiate(pc, "POPAod");

//	| POPAow() =>
//		result.rtl = instantiate(pc, "POPAow");


#line 25752 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c433;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c434;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c435;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c432; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                fetch16(3 + MATCH_p); 
                                              goto MATCH_label_c396; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  fetch16(8 + MATCH_p); 
                                                goto MATCH_label_c398; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  fetch16(4 + MATCH_p); 
                                                goto MATCH_label_c397; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                fetch16(7 + MATCH_p); 
                                              goto MATCH_label_c399; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            fetch16(5 + MATCH_p); 
                                          { 
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            unsigned i16 = 
                                              (MATCH_w_16_40 & 0xffff) 
                                                    /* i16 at 40 */;
                                            nextPC = 7 + MATCH_p; 
                                            
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);


#line 25859 "pentiumdecoder.cpp"

                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            fetch16(4 + MATCH_p); 
                                          goto MATCH_label_c397; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            fetch16(8 + MATCH_p); 
                                          goto MATCH_label_c398; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            fetch16(7 + MATCH_p); 
                                          goto MATCH_label_c399; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = fetch16(3 + MATCH_p); 
                                        goto MATCH_label_c396; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  goto MATCH_label_c64; break;
                                case 2: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c400; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c402;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c401;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c403; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTow", DIS_EADDR16);


#line 25953 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c401;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c402;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c403;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c400; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 3: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c404; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c406;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c405;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c407; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGow", DIS_EADDR16);


#line 26028 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c405;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c406;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c407;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c404; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 4: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c408; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c410;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c409;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c411; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXow", DIS_EADDR16);


#line 26103 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c409;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c410;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c411;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c408; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 5: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c412; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c414;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c413;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c415; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULow", DIS_EADDR16);


#line 26178 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c413;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c414;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c415;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c412; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c416; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c418;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c417;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c419; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAX", DIS_EADDR16);


#line 26253 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c417;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c418;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c419;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c416; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 7: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c420; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                fetch8(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c422;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c421;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c423; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVAX", DIS_EADDR16);


#line 26328 "pentiumdecoder.cpp"

                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c421;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c422;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c423;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c420; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 191 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

	/*
	 * Conditional branches, 16 bit offset: 66 0F 8X XX XX
	 */

#line 26392 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 189 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, (BRANCH_TYPE)0);

#line 26413 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 187 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUL);

#line 26434 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 185 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUGE);

#line 26455 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 183 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JE);

#line 26476 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 181 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JNE);

#line 26497 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 179 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JULE);

#line 26518 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_3[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    const char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 177 "machine/pentium/decoder.m"

		result.rtl = conditionalJump(pc, name, relocd, BRANCH_JUG);

#line 26539 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c436; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c438; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c437; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c439; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDib", DIS_EADDR8, DIS_I8);


#line 26615 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c437; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c438; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c439; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c436; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c440; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c442; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c441; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c443; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORib", DIS_EADDR8, DIS_I8);


#line 26714 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c441; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c442; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c443; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c440; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c444; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c446; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c445; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c447; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCib", DIS_EADDR8, DIS_I8);


#line 26813 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c445; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c446; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c447; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c444; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c448; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c450; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c449; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c451; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBib", DIS_EADDR8, DIS_I8);


#line 26912 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c449; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c450; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c451; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c448; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c452; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c454; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c453; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c455; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDib", DIS_EADDR8, DIS_I8);


#line 27011 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c453; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c454; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c455; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c452; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c456; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c458; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c457; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c459; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBib", DIS_EADDR8, DIS_I8);


#line 27110 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c457; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c458; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c459; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c456; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c460; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c462; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c461; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c463; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORib", DIS_EADDR8, DIS_I8);


#line 27209 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c461; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c462; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c463; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c460; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c464; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c466; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c465; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c467; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPib", DIS_EADDR8, DIS_I8);


#line 27308 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c465; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c466; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c467; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c464; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c468; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c470; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c469; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c471; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDid", DIS_EADDR32, DIS_I32);


#line 27413 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c469; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c470; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c471; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c468; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c472; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c474; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c473; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c475; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORid", DIS_EADDR32, DIS_I32);


#line 27510 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c473; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c474; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c475; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c472; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c476; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c478; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c477; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c479; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCid", DIS_EADDR32, DIS_I32);


#line 27607 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c477; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c478; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c479; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c476; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c480; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c482; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c481; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c483; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBid", DIS_EADDR32, DIS_I32);


#line 27704 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c481; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c482; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c483; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c480; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c484; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c486; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c485; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c487; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDid", DIS_EADDR32, DIS_I32);


#line 27801 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c485; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c486; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c487; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c484; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c488; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c490; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c489; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c491; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBid", DIS_EADDR32, DIS_I32);


#line 27898 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c489; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c490; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c491; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c488; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c492; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c494; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c493; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c495; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORid", DIS_EADDR32, DIS_I32);


#line 27995 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c493; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c494; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c495; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c492; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c496; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c498; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c497; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c499; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPid", DIS_EADDR32, DIS_I32);


#line 28092 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c497; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c498; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c499; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c496; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  goto MATCH_label_c64; break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c500; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c502; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c501; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c503; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiodb", DIS_EADDR32, DIS_I8);


#line 28201 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c501; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c502; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c503; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c500; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c504; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c506; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c505; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c507; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiodb", DIS_EADDR32, DIS_I8);


#line 28300 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c505; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c506; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c507; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c504; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c508; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c510; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c509; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c511; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiodb", DIS_EADDR32, DIS_I8);


#line 28399 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c509; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c510; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c511; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c508; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c512; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c514; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c513; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c515; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiodb", DIS_EADDR32, DIS_I8);


#line 28498 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c513; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c514; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c515; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c512; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c516; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c518; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c517; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c519; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1547 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		Exp *oper = DIS_EADDR32;
		if (i8 != -16 || !(*oper == *Location::regOf(28)))
			result.rtl = instantiate(pc, "ANDiodb", DIS_EADDR32, DIS_I8);


#line 28600 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c517; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c518; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c519; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c516; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c520; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c522; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c521; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c523; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiodb", DIS_EADDR32, DIS_I8);


#line 28699 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c521; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c522; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c523; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c520; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c524; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c526; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c525; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c527; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiodb", DIS_EADDR32, DIS_I8);


#line 28798 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c525; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c526; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c527; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c524; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c528; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c530; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c529; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c531; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiodb", DIS_EADDR32, DIS_I8);


#line 28897 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c529; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c530; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c531; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c528; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c532; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c534;  /*opt-block+*/
                              else 
                                goto MATCH_label_c533;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c535; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 28983 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c533;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c534;  /*opt-block+*/
                        else 
                          goto MATCH_label_c535;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c532; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c536; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c538;  /*opt-block+*/
                              else 
                                goto MATCH_label_c537;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c539; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 29051 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c537;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c538;  /*opt-block+*/
                        else 
                          goto MATCH_label_c539;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c536; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c540; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c542;  /*opt-block+*/
                              else 
                                goto MATCH_label_c541;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c543; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 29119 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c541;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c542;  /*opt-block+*/
                        else 
                          goto MATCH_label_c543;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c540; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c544; break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c546;  /*opt-block+*/
                              else 
                                goto MATCH_label_c545;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c547; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 29187 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c545;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c546;  /*opt-block+*/
                        else 
                          goto MATCH_label_c547;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c544; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            if ((MATCH_w_8_0 & 0x7) /* col at 0 */ == 0) { 
              nextPC = 1 + MATCH_p; 
              
#line 327 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOP");


#line 29224 "pentiumdecoder.cpp"

              
            } /*opt-block*//*opt-block+*/
            else { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 348 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHGeAXod", DIS_R32);


#line 29237 "pentiumdecoder.cpp"

              
            } /*opt-block*//*opt-block+*/
            
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1007 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.AL.Ob", DIS_OFF);

//	| MOV.Sw.Ew(Mem, sr16) =>
//		result.rtl = instantiate(pc, "MOV.Sw.Ew", DIS_MEM, DIS_SR16);

//	| MOV.Ew.Sw(Mem, sr16) =>
//		result.rtl = instantiate(pc, "MOV.Ew.Sw", DIS_MEM, DIS_SR16);


#line 29263 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1001 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.eAX.Ovod", DIS_OFF);


#line 29280 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 998 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ob.AL", DIS_OFF);


#line 29297 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 992 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ov.eAXod", DIS_OFF);


#line 29314 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 955 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSB");

//	| MOV.Rd.Dd(_, _) =>
//	//| MOV.Rd.Dd(reg, dr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Dd.Rd(_, _) =>
//	//| MOV.Dd.Rd(dr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Rd.Cd(_, _) =>
//	//| MOV.Rd.Cd(reg, cr) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| MOV.Cd.Rd(_, _) =>
//	//| MOV.Cd.Rd(cr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");


#line 29344 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSvod");


#line 29357 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1247 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPSB");


#line 29370 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1241 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPSvod");


#line 29383 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            { 
              int /* [~128..127] */ i8 = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r8 = (MATCH_w_8_0 & 0x7) /* r8 at 0 */;
              nextPC = 2 + MATCH_p; 
              
#line 989 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVib", DIS_R8, DIS_I8);


#line 29404 "pentiumdecoder.cpp"

              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c548; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c550; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c549; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c551; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29477 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c549; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c550; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c551; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c548; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c552; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c554; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c553; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c555; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29576 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c553; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c554; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c555; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c552; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c556; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c558; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c557; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c559; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29675 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c557; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c558; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c559; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c556; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c560; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c562; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c561; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c563; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29774 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c561; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c562; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c563; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c560; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c564; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c566; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c565; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c567; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29873 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c565; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c566; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c567; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c564; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c568; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c570; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c569; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c571; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 29972 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c569; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c570; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c571; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c568; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c572; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c574; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c573; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c575; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 30073 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c573; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c574; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c575; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c572; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c576; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c578; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c577; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c579; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30180 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c577; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c578; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c579; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c576; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c580; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c582; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c581; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c583; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30279 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c581; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c582; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c583; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c580; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c584; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c586; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c585; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c587; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30378 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c585; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c586; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c587; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c584; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c588; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c590; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c589; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c591; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30477 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c589; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c590; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c591; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c588; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c592; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c594; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c593; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c595; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30576 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c593; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c594; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c595; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c592; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c596; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c598; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c597; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c599; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30675 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c597; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c598; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c599; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c596; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c600; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c602; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c601; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c603; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend(
                                                (MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 30776 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c601; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c602; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c603; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c600; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = fetch16(1 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 482 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RET.Iw", DIS_I16);
		result.rtl->appendStmt(new ReturnStatement);


#line 30831 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RET");
		result.rtl->appendStmt(new ReturnStatement);

//	| REPNE() =>
//		result.rtl = instantiate(pc, "REPNE");

//	| REP() =>
//		result.rtl = instantiate(pc, "REP");


#line 30852 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LES", DIS_REG32, DIS_MEM);


#line 30877 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c605;  /*opt-block+*/
                              else 
                                goto MATCH_label_c604;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c606; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LES", DIS_REG32, DIS_MEM);


#line 30917 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c604;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c605;  /*opt-block+*/
                        else 
                          goto MATCH_label_c606;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LDS", DIS_REG32, DIS_MEM);


#line 30962 "pentiumdecoder.cpp"

                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c608;  /*opt-block+*/
                              else 
                                goto MATCH_label_c607;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c609; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LDS", DIS_REG32, DIS_MEM);


#line 31002 "pentiumdecoder.cpp"

                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c607;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c608;  /*opt-block+*/
                        else 
                          goto MATCH_label_c609;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c64; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                goto MATCH_label_c610; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                  goto MATCH_label_c612; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                  goto MATCH_label_c611; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c613; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                            { 
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              int /* [~128..127] */ i8 = 
                                sign_extend(
                                            (MATCH_w_8_32 & 0xff) 
                                                  /* i8 at 32 */, 8);
                              nextPC = 5 + MATCH_p; 
                              
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 31088 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                            goto MATCH_label_c611; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                            goto MATCH_label_c612; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                            goto MATCH_label_c613; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          goto MATCH_label_c610; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                goto MATCH_label_c614; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                  goto MATCH_label_c616; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                  goto MATCH_label_c615; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c617; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                            { 
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                              nextPC = 8 + MATCH_p; 
                              
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);


#line 31188 "pentiumdecoder.cpp"

                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                            goto MATCH_label_c615; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                            goto MATCH_label_c616; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                            goto MATCH_label_c617; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                          goto MATCH_label_c614; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c64;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c618; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c620;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c619;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c621; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.1", DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() =>
//		result.rtl = instantiate(pc, "PUSHFod");

//	| PUSHFow() =>
//		result.rtl = instantiate(pc, "PUSHFow");

//	| PUSHAod() =>
//		result.rtl = instantiate(pc, "PUSHAod");

//	| PUSHAow() =>
//		result.rtl = instantiate(pc, "PUSHAow");


#line 31296 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c619;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c620;  /*opt-block+*/
                              else 
                                goto MATCH_label_c621;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c618; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c622; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c624;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c623;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c625; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.1", DIS_EADDR8);


#line 31363 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c623;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c624;  /*opt-block+*/
                              else 
                                goto MATCH_label_c625;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c622; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c626; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c628;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c627;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c629; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.1", DIS_EADDR8);


#line 31430 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c627;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c628;  /*opt-block+*/
                              else 
                                goto MATCH_label_c629;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c626; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c630; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c632;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c631;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c633; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.1", DIS_EADDR8);


#line 31497 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c631;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c632;  /*opt-block+*/
                              else 
                                goto MATCH_label_c633;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c630; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c634; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c636;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c635;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c637; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.1", DIS_EADDR8);


#line 31564 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c635;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c636;  /*opt-block+*/
                              else 
                                goto MATCH_label_c637;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c634; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c638; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c640;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c639;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c641; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.1", DIS_EADDR8);


#line 31631 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c639;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c640;  /*opt-block+*/
                              else 
                                goto MATCH_label_c641;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c638; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c642; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c644;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c643;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c645; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.1", DIS_EADDR16);


#line 31700 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c643;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c644;  /*opt-block+*/
                              else 
                                goto MATCH_label_c645;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c642; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c646; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c648;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c647;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c649; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1od", DIS_EADDR32);


#line 31775 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c647;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c648;  /*opt-block+*/
                              else 
                                goto MATCH_label_c649;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c646; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c650; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c652;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c651;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c653; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.1od", DIS_EADDR32);


#line 31842 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c651;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c652;  /*opt-block+*/
                              else 
                                goto MATCH_label_c653;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c650; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c654; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c656;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c655;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c657; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1od", DIS_EADDR32);


#line 31909 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c655;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c656;  /*opt-block+*/
                              else 
                                goto MATCH_label_c657;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c654; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c658; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c660;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c659;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c661; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1od", DIS_EADDR32);


#line 31976 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c659;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c660;  /*opt-block+*/
                              else 
                                goto MATCH_label_c661;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c658; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c662; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c664;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c663;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c665; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1od", DIS_EADDR32);


#line 32043 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c663;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c664;  /*opt-block+*/
                              else 
                                goto MATCH_label_c665;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c662; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c666; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c668;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c667;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c669; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1od", DIS_EADDR32);


#line 32110 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c667;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c668;  /*opt-block+*/
                              else 
                                goto MATCH_label_c669;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c666; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c670; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c672;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c671;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c673; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1od", DIS_EADDR32);


#line 32179 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c671;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c672;  /*opt-block+*/
                              else 
                                goto MATCH_label_c673;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c670; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c674; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c676;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c675;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c677; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.CL", DIS_EADDR8);


#line 32254 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c675;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c676;  /*opt-block+*/
                              else 
                                goto MATCH_label_c677;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c674; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c678; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c680;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c679;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c681; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.CL", DIS_EADDR8);


#line 32321 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c679;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c680;  /*opt-block+*/
                              else 
                                goto MATCH_label_c681;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c678; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c682; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c684;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c683;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c685; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.CL", DIS_EADDR8);


#line 32388 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c683;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c684;  /*opt-block+*/
                              else 
                                goto MATCH_label_c685;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c682; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c686; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c688;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c687;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c689; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.CL", DIS_EADDR8);


#line 32455 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c687;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c688;  /*opt-block+*/
                              else 
                                goto MATCH_label_c689;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c686; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c690; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c692;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c691;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c693; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.CL", DIS_EADDR8);


#line 32522 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c691;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c692;  /*opt-block+*/
                              else 
                                goto MATCH_label_c693;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c690; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c694; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c696;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c695;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c697; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.CL", DIS_EADDR8);


#line 32589 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c695;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c696;  /*opt-block+*/
                              else 
                                goto MATCH_label_c697;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c694; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c698; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c700;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c699;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c701; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.CL", DIS_EADDR32);


#line 32658 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c699;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c700;  /*opt-block+*/
                              else 
                                goto MATCH_label_c701;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c698; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c702; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c704;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c703;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c705; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLod", DIS_EADDR32);


#line 32733 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c703;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c704;  /*opt-block+*/
                              else 
                                goto MATCH_label_c705;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c702; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c706; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c708;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c707;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c709; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLod", DIS_EADDR32);


#line 32800 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c707;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c708;  /*opt-block+*/
                              else 
                                goto MATCH_label_c709;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c706; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c710; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c712;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c711;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c713; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLod", DIS_EADDR32);


#line 32867 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c711;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c712;  /*opt-block+*/
                              else 
                                goto MATCH_label_c713;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c710; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c714; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c716;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c715;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c717; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLod", DIS_EADDR32);


#line 32934 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c715;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c716;  /*opt-block+*/
                              else 
                                goto MATCH_label_c717;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c714; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c718; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c720;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c719;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c721; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLod", DIS_EADDR32);


#line 33001 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c719;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c720;  /*opt-block+*/
                              else 
                                goto MATCH_label_c721;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c718; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c722; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c724;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c723;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c725; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLod", DIS_EADDR32);


#line 33068 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c723;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c724;  /*opt-block+*/
                              else 
                                goto MATCH_label_c725;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c722; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c64; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c726; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c728;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c727;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c729; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLod", DIS_EADDR32);


#line 33137 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c727;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c728;  /*opt-block+*/
                              else 
                                goto MATCH_label_c729;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c726; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: 
                  goto MATCH_label_c64; break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 315 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XLATB");


#line 33176 "pentiumdecoder.cpp"

                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1046 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LOOPNE", dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 33200 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1049 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LOOPE", dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 33219 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1052 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LOOP", dis_Num(relocd));  // FIXME:  Replace with a conditional jump


#line 33238 "pentiumdecoder.cpp"

                    
                  }
                  
                  break;
                case 3: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c64; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 4: 
                  goto MATCH_label_c64; break;
                case 2: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_4[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 584 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33289 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_5[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 557 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33316 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_4[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 566 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33335 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_6[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 575 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33361 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_5[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 548 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33380 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_7[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 581 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33416 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_8[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 587 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33441 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_9[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 554 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33466 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_2[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 563 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33485 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_10[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 560 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33508 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_7[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 569 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33527 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_11[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 572 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33550 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_8[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 545 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33569 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_12[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 578 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33592 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_9[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 551 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33611 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c64; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c64;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c64; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_13[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      const char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 539 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33661 "pentiumdecoder.cpp"

                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.LODSvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 512 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33686 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_6[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 521 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33705 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.SCASvow"; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 530 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33729 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_13[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        const char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 503 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33748 "pentiumdecoder.cpp"

                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c64;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c64; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_16[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 536 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33784 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.STOSvod"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 542 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33807 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c64;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.LODSB"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 509 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33830 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_10[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 518 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33849 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.LODSvod"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 515 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33870 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_11[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 524 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33889 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.SCASB"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 527 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33910 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_12[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 500 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33929 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.SCASvod"; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 533 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33950 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_16[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  const char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 506 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name);


#line 33969 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1250 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMC");


#line 33992 "pentiumdecoder.cpp"

                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    goto MATCH_label_c730; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                      goto MATCH_label_c732; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                      goto MATCH_label_c731; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                    goto MATCH_label_c733; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = fetch8(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i8 = 
                                    (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
                                  nextPC = 5 + MATCH_p; 
                                  
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 34059 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = fetch8(3 + MATCH_p); 
                                goto MATCH_label_c731; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = fetch8(7 + MATCH_p); 
                                goto MATCH_label_c732; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = fetch8(6 + MATCH_p); 
                                goto MATCH_label_c733; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              goto MATCH_label_c730; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c734; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c736;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c735;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c737; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTb", DIS_EADDR8);


#line 34142 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c735;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c736;  /*opt-block+*/
                              else 
                                goto MATCH_label_c737;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c734; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c738; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c740;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c739;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c741; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGb", DIS_EADDR8);


#line 34209 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c739;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c740;  /*opt-block+*/
                              else 
                                goto MATCH_label_c741;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c738; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c742; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c744;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c743;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c745; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AL", DIS_EADDR8);


#line 34276 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c743;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c744;  /*opt-block+*/
                              else 
                                goto MATCH_label_c745;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c742; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c746; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c748;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c747;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c749; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULb", DIS_EADDR8);


#line 34343 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c747;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c748;  /*opt-block+*/
                              else 
                                goto MATCH_label_c749;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c746; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c750; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c752;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c751;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c753; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAL", DIS_EADDR8);


#line 34410 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c751;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c752;  /*opt-block+*/
                              else 
                                goto MATCH_label_c753;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c750; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c754; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c756;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c755;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c757; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIV", DIS_EADDR8); /* ?? */

//	| HLT() =>
//		result.rtl = instantiate(pc, "HLT");


#line 34480 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c755;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c756;  /*opt-block+*/
                              else 
                                goto MATCH_label_c757;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c754; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                                    goto MATCH_label_c758; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                      goto MATCH_label_c760; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                      goto MATCH_label_c759; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                    goto MATCH_label_c761; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = fetch32(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ed.Id", DIS_EADDR32, DIS_I32);


#line 34571 "pentiumdecoder.cpp"

                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = fetch32(3 + MATCH_p); 
                                goto MATCH_label_c759; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = fetch32(7 + MATCH_p); 
                                goto MATCH_label_c760; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = fetch32(6 + MATCH_p); 
                                goto MATCH_label_c761; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                              goto MATCH_label_c758; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c64; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c762; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c764;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c763;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c765; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTod", DIS_EADDR32);


#line 34654 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c763;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c764;  /*opt-block+*/
                              else 
                                goto MATCH_label_c765;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c762; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c766; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c768;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c767;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c769; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGod", DIS_EADDR32);


#line 34721 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c767;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c768;  /*opt-block+*/
                              else 
                                goto MATCH_label_c769;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c766; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c770; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c772;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c771;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c773; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXod", DIS_EADDR32);


#line 34788 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c771;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c772;  /*opt-block+*/
                              else 
                                goto MATCH_label_c773;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c770; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c774; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c776;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c775;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c777; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULod", DIS_EADDR32);


#line 34855 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c775;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c776;  /*opt-block+*/
                              else 
                                goto MATCH_label_c777;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c774; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c778; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c780;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c779;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c781; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVeAX", DIS_EADDR32);


#line 34922 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c779;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c780;  /*opt-block+*/
                              else 
                                goto MATCH_label_c781;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c778; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c782; break;
                                  case 4: 
                                    MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c784;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c783;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c785; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVeAX", DIS_EADDR32);


#line 34989 "pentiumdecoder.cpp"

                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c783;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c784;  /*opt-block+*/
                              else 
                                goto MATCH_label_c785;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c782; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    
  }goto MATCH_finished_c; 
  
  MATCH_label_c0: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrb", DIS_EADDR8, DIS_R8);


#line 35037 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrb", DIS_EADDR8, DIS_R8);


#line 35054 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c2: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrb", DIS_EADDR8, DIS_R8);


#line 35071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c3: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1526 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrb", DIS_EADDR8, DIS_R8);


#line 35088 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c4: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrod", DIS_EADDR32, DIS_REG32);


#line 35105 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c5: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrod", DIS_EADDR32, DIS_REG32);


#line 35122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c6: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrod", DIS_EADDR32, DIS_REG32);


#line 35139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c7: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1499 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrod", DIS_EADDR32, DIS_REG32);


#line 35156 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c8: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmb", DIS_R8, DIS_EADDR8);


#line 35173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c9: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmb", DIS_R8, DIS_EADDR8);


#line 35190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c10: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmb", DIS_R8, DIS_EADDR8);


#line 35207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c11: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1454 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmb", DIS_R8, DIS_EADDR8);


#line 35224 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c12: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmod", DIS_REG32, DIS_EADDR32);


#line 35241 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c13: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmod", DIS_REG32, DIS_EADDR32);


#line 35258 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c14: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmod", DIS_REG32, DIS_EADDR32);


#line 35275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c15: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1427 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmod", DIS_REG32, DIS_EADDR32);


#line 35292 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c16: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrb", DIS_EADDR8, DIS_R8);


#line 35309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c17: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrb", DIS_EADDR8, DIS_R8);


#line 35326 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c18: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrb", DIS_EADDR8, DIS_R8);


#line 35343 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c19: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1520 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrb", DIS_EADDR8, DIS_R8);


#line 35360 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c20: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrod", DIS_EADDR32, DIS_REG32);


#line 35377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c21: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrod", DIS_EADDR32, DIS_REG32);


#line 35394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c22: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrod", DIS_EADDR32, DIS_REG32);


#line 35411 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c23: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1487 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrod", DIS_EADDR32, DIS_REG32);


#line 35428 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c24: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmb", DIS_R8, DIS_EADDR8);


#line 35445 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c25: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmb", DIS_R8, DIS_EADDR8);


#line 35462 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c26: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmb", DIS_R8, DIS_EADDR8);


#line 35479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c27: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1448 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmb", DIS_R8, DIS_EADDR8);


#line 35496 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c28: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmod", DIS_REG32, DIS_EADDR32);


#line 35513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c29: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmod", DIS_REG32, DIS_EADDR32);


#line 35530 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c30: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmod", DIS_REG32, DIS_EADDR32);


#line 35547 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c31: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1415 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmod", DIS_REG32, DIS_EADDR32);


#line 35564 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c32: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrb", DIS_EADDR8, DIS_R8);


#line 35581 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c33: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrb", DIS_EADDR8, DIS_R8);


#line 35598 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c34: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrb", DIS_EADDR8, DIS_R8);


#line 35615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c35: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1514 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrb", DIS_EADDR8, DIS_R8);


#line 35632 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c36: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrod", DIS_EADDR32, DIS_REG32);


#line 35649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c37: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrod", DIS_EADDR32, DIS_REG32);


#line 35666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c38: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrod", DIS_EADDR32, DIS_REG32);


#line 35683 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c39: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1475 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrod", DIS_EADDR32, DIS_REG32);


#line 35700 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c40: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmb", DIS_R8, DIS_EADDR8);


#line 35717 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c41: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmb", DIS_R8, DIS_EADDR8);


#line 35734 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c42: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmb", DIS_R8, DIS_EADDR8);


#line 35751 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c43: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1442 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmb", DIS_R8, DIS_EADDR8);


#line 35768 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c44: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmod", DIS_REG32, DIS_EADDR32);


#line 35785 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c45: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmod", DIS_REG32, DIS_EADDR32);


#line 35802 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c46: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmod", DIS_REG32, DIS_EADDR32);


#line 35819 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c47: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1403 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmod", DIS_REG32, DIS_EADDR32);


#line 35836 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c48: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrb", DIS_EADDR8, DIS_R8);


#line 35853 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c49: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrb", DIS_EADDR8, DIS_R8);


#line 35870 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c50: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrb", DIS_EADDR8, DIS_R8);


#line 35887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c51: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1508 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrb", DIS_EADDR8, DIS_R8);


#line 35904 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c52: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrod", DIS_EADDR32, DIS_REG32);


#line 35921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c53: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrod", DIS_EADDR32, DIS_REG32);


#line 35938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c54: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrod", DIS_EADDR32, DIS_REG32);


#line 35955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c55: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1463 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrod", DIS_EADDR32, DIS_REG32);


#line 35972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c56: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmb", DIS_R8, DIS_EADDR8);


#line 35989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c57: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmb", DIS_R8, DIS_EADDR8);


#line 36006 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c58: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmb", DIS_R8, DIS_EADDR8);


#line 36023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c59: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1436 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmb", DIS_R8, DIS_EADDR8);


#line 36040 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c60: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmod", DIS_REG32, DIS_EADDR32);


#line 36057 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c61: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmod", DIS_REG32, DIS_EADDR32);


#line 36074 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c62: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmod", DIS_REG32, DIS_EADDR32);


#line 36091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c63: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1391 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmod", DIS_REG32, DIS_EADDR32);


#line 36108 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c64: (void)0; /*placeholder for label*/ 
    { 
      nextPC = MATCH_p; 
      
#line 2099 "machine/pentium/decoder.m"

		result.valid = false;

#line 36122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c65: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrow", DIS_EADDR16, DIS_REG16);


#line 36139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c66: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrow", DIS_EADDR16, DIS_REG16);


#line 36156 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c67: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrow", DIS_EADDR16, DIS_REG16);


#line 36173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c68: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1502 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDmrow", DIS_EADDR16, DIS_REG16);


#line 36190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c69: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrow", DIS_EADDR16, DIS_REG16);


#line 36207 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c70: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrow", DIS_EADDR16, DIS_REG16);


#line 36224 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c71: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrow", DIS_EADDR16, DIS_REG16);


#line 36241 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c72: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1496 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrow", DIS_EADDR16, DIS_REG16);


#line 36258 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c73: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmow", DIS_REG16, DIS_EADDR16);


#line 36275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c74: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmow", DIS_REG16, DIS_EADDR16);


#line 36292 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c75: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmow", DIS_REG16, DIS_EADDR16);


#line 36309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c76: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1430 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDrmow", DIS_REG16, DIS_EADDR16);


#line 36326 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c77: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmow", DIS_REG16, DIS_EADDR16);


#line 36343 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c78: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmow", DIS_REG16, DIS_EADDR16);


#line 36360 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c79: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmow", DIS_REG16, DIS_EADDR16);


#line 36377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c80: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1424 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmow", DIS_REG16, DIS_EADDR16);


#line 36394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c81: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.ow", DIS_REG16, DIS_EADDR16);


#line 36411 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c82: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.ow", DIS_REG16, DIS_EADDR16);


#line 36428 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c83: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.ow", DIS_REG16, DIS_EADDR16);


#line 36445 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c84: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1079 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.ow", DIS_REG16, DIS_EADDR16);


#line 36462 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c85: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLow", DIS_REG16, DIS_EADDR16);


#line 36479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c86: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLow", DIS_REG16, DIS_EADDR16);


#line 36496 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c87: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLow", DIS_REG16, DIS_EADDR16);


#line 36513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c88: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1043 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLow", DIS_REG16, DIS_EADDR16);


#line 36530 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c89: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTow", DIS_EADDR16, DIS_REG16);


#line 36547 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c90: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTow", DIS_EADDR16, DIS_REG16);


#line 36564 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c91: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTow", DIS_EADDR16, DIS_REG16);


#line 36581 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c92: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1340 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTow", DIS_EADDR16, DIS_REG16);


#line 36598 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c93: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSow", DIS_EADDR16, DIS_REG16);


#line 36615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c94: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSow", DIS_EADDR16, DIS_REG16);


#line 36632 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c95: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSow", DIS_EADDR16, DIS_REG16);


#line 36649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c96: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1304 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSow", DIS_EADDR16, DIS_REG16);


#line 36666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c97: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 447 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36684 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c98: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 447 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36702 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c99: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 447 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36720 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c100: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 447 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c101: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 453 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36756 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c102: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 453 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36774 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c103: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 453 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36792 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c104: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 453 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);


#line 36810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c105: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLow", DIS_EADDR16, DIS_REG16);


#line 36827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c106: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLow", DIS_EADDR16, DIS_REG16);


#line 36844 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c107: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLow", DIS_EADDR16, DIS_REG16);


#line 36861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c108: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 435 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLow", DIS_EADDR16, DIS_REG16);


#line 36878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c109: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 441 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLow", DIS_EADDR16, DIS_REG16);


#line 36895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c110: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 441 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLow", DIS_EADDR16, DIS_REG16);


#line 36912 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c111: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 441 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLow", DIS_EADDR16, DIS_REG16);


#line 36929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c112: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 441 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLow", DIS_EADDR16, DIS_REG16);


#line 36946 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c113: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmow", DIS_REG16, DIS_EADDR16);


#line 36963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c114: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmow", DIS_REG16, DIS_EADDR16);


#line 36980 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c115: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmow", DIS_REG16, DIS_EADDR16);


#line 36997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c116: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1163 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmow", DIS_REG16, DIS_EADDR16);


#line 37014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c117: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c118: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37048 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c119: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c120: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1235 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c121: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiow", DIS_EADDR16, DIS_I8);


#line 37100 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c122: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiow", DIS_EADDR16, DIS_I8);


#line 37118 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c123: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiow", DIS_EADDR16, DIS_I8);


#line 37136 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c124: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1334 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiow", DIS_EADDR16, DIS_I8);


#line 37154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c125: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiow", DIS_I8, DIS_EADDR16);


#line 37172 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c126: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiow", DIS_I8, DIS_EADDR16);


#line 37190 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c127: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiow", DIS_I8, DIS_EADDR16);


#line 37208 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c128: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1298 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiow", DIS_I8, DIS_EADDR16);


#line 37226 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c129: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiow", DIS_EADDR16, DIS_I8);


#line 37244 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c130: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiow", DIS_EADDR16, DIS_I8);


#line 37262 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c131: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiow", DIS_EADDR16, DIS_I8);


#line 37280 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c132: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1310 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiow", DIS_EADDR16, DIS_I8);


#line 37298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c133: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiow", DIS_EADDR16, DIS_I8);


#line 37316 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c134: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiow", DIS_EADDR16, DIS_I8);


#line 37334 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c135: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiow", DIS_EADDR16, DIS_I8);


#line 37352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c136: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1322 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiow", DIS_EADDR16, DIS_I8);


#line 37370 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c137: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRow", DIS_EADDR16, DIS_REG16);


#line 37387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c138: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRow", DIS_EADDR16, DIS_REG16);


#line 37404 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c139: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRow", DIS_EADDR16, DIS_REG16);


#line 37421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c140: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1316 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRow", DIS_EADDR16, DIS_REG16);


#line 37438 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c141: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCow", DIS_EADDR16, DIS_REG16);


#line 37455 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c142: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCow", DIS_EADDR16, DIS_REG16);


#line 37472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c143: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCow", DIS_EADDR16, DIS_REG16);


#line 37489 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c144: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1328 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCow", DIS_EADDR16, DIS_REG16);


#line 37506 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1358 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDod", DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDow", DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() =>
//		result.rtl = instantiate(pc, "AAS");

//	| AAM() =>
//		result.rtl = instantiate(pc, "AAM");

//	| AAD() =>
//		result.rtl = instantiate(pc, "AAD");

//	| AAA() =>
//		result.rtl = instantiate(pc, "AAA");


#line 37547 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1358 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDod", DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDow", DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() =>
//		result.rtl = instantiate(pc, "AAS");

//	| AAM() =>
//		result.rtl = instantiate(pc, "AAM");

//	| AAD() =>
//		result.rtl = instantiate(pc, "AAD");

//	| AAA() =>
//		result.rtl = instantiate(pc, "AAA");


#line 37588 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1358 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDod", DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDow", DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() =>
//		result.rtl = instantiate(pc, "AAS");

//	| AAM() =>
//		result.rtl = instantiate(pc, "AAM");

//	| AAD() =>
//		result.rtl = instantiate(pc, "AAD");

//	| AAA() =>
//		result.rtl = instantiate(pc, "AAA");


#line 37629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1358 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC - pc);

	// Not "user" instructions:
//	| BOUNDod(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDod", DIS_REG32, DIS_MEM);

//	| BOUNDow(reg, Mem) =>
//		result.rtl = instantiate(pc, "BOUNDow", DIS_REG16, DIS_MEM);

//	| ARPL(_, _) =>
//	//| ARPL(Eaddr, reg) =>
//		result.rtl = instantiate(pc, "UNIMP");

//	| AAS() =>
//		result.rtl = instantiate(pc, "AAS");

//	| AAM() =>
//		result.rtl = instantiate(pc, "AAM");

//	| AAD() =>
//		result.rtl = instantiate(pc, "AAD");

//	| AAA() =>
//		result.rtl = instantiate(pc, "AAA");


#line 37670 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 37688 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 37706 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 37724 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1350 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRow", DIS_REG16, DIS_EADDR16);
		return genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC - pc);


#line 37742 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c153: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37759 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c154: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37776 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c155: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37793 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c156: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c157: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c158: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37844 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c159: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c160: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 946 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);


#line 37878 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c161: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c162: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37912 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c163: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c164: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 357 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 37946 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c165: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrow", DIS_EADDR16, DIS_REG16);


#line 37963 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c166: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrow", DIS_EADDR16, DIS_REG16);


#line 37980 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c167: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrow", DIS_EADDR16, DIS_REG16);


#line 37997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c168: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1490 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCmrow", DIS_EADDR16, DIS_REG16);


#line 38014 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c169: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrow", DIS_EADDR16, DIS_REG16);


#line 38031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c170: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrow", DIS_EADDR16, DIS_REG16);


#line 38048 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c171: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrow", DIS_EADDR16, DIS_REG16);


#line 38065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c172: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1484 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrow", DIS_EADDR16, DIS_REG16);


#line 38082 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c173: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmow", DIS_REG16, DIS_EADDR16);


#line 38099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c174: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmow", DIS_REG16, DIS_EADDR16);


#line 38116 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c175: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmow", DIS_REG16, DIS_EADDR16);


#line 38133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c176: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1418 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCrmow", DIS_REG16, DIS_EADDR16);


#line 38150 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c177: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmow", DIS_REG16, DIS_EADDR16);


#line 38167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c178: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmow", DIS_REG16, DIS_EADDR16);


#line 38184 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c179: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmow", DIS_REG16, DIS_EADDR16);


#line 38201 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c180: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1412 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmow", DIS_REG16, DIS_EADDR16);


#line 38218 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c181: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrow", DIS_EADDR16, DIS_REG16);


#line 38235 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c182: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrow", DIS_EADDR16, DIS_REG16);


#line 38252 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c183: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrow", DIS_EADDR16, DIS_REG16);


#line 38269 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c184: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1478 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDmrow", DIS_EADDR16, DIS_REG16);


#line 38286 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c185: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrow", DIS_EADDR16, DIS_REG16);


#line 38303 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c186: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrow", DIS_EADDR16, DIS_REG16);


#line 38320 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c187: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrow", DIS_EADDR16, DIS_REG16);


#line 38337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c188: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1472 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrow", DIS_EADDR16, DIS_REG16);


#line 38354 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c189: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmow", DIS_REG16, DIS_EADDR16);


#line 38371 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c190: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmow", DIS_REG16, DIS_EADDR16);


#line 38388 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c191: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmow", DIS_REG16, DIS_EADDR16);


#line 38405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c192: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1406 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDrmow", DIS_REG16, DIS_EADDR16);


#line 38422 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c193: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmow", DIS_REG16, DIS_EADDR16);


#line 38439 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c194: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmow", DIS_REG16, DIS_EADDR16);


#line 38456 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c195: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmow", DIS_REG16, DIS_EADDR16);


#line 38473 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c196: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1400 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmow", DIS_REG16, DIS_EADDR16);


#line 38490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c197: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrow", DIS_EADDR16, DIS_REG16);


#line 38507 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c198: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrow", DIS_EADDR16, DIS_REG16);


#line 38524 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c199: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrow", DIS_EADDR16, DIS_REG16);


#line 38541 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c200: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1466 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORmrow", DIS_EADDR16, DIS_REG16);


#line 38558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c201: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrow", DIS_EADDR16, DIS_REG16);


#line 38575 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c202: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrow", DIS_EADDR16, DIS_REG16);


#line 38592 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c203: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrow", DIS_EADDR16, DIS_REG16);


#line 38609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c204: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1460 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrow", DIS_EADDR16, DIS_REG16);


#line 38626 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c205: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmow", DIS_REG16, DIS_EADDR16);


#line 38643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c206: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmow", DIS_REG16, DIS_EADDR16);


#line 38660 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c207: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmow", DIS_REG16, DIS_EADDR16);


#line 38677 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c208: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1394 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORrmow", DIS_REG16, DIS_EADDR16);


#line 38694 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c209: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmow", DIS_REG16, DIS_EADDR16);


#line 38711 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c210: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmow", DIS_REG16, DIS_EADDR16);


#line 38728 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c211: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmow", DIS_REG16, DIS_EADDR16);


#line 38745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c212: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1388 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmow", DIS_REG16, DIS_EADDR16);


#line 38762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c213: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);


#line 38781 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c214: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);


#line 38800 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c215: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 10 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);


#line 38819 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c216: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1151 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);


#line 38838 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c217: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);


#line 38857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c218: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);


#line 38876 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c219: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);


#line 38895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c220: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1157 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);


#line 38914 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c221: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiw", DIS_EADDR16, DIS_I16);


#line 38932 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c222: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiw", DIS_EADDR16, DIS_I16);


#line 38950 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c223: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiw", DIS_EADDR16, DIS_I16);


#line 38968 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c224: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1625 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiw", DIS_EADDR16, DIS_I16);


#line 38986 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c225: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiw", DIS_EADDR16, DIS_I16);


#line 39004 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c226: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiw", DIS_EADDR16, DIS_I16);


#line 39022 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c227: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiw", DIS_EADDR16, DIS_I16);


#line 39040 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c228: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1622 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiw", DIS_EADDR16, DIS_I16);


#line 39058 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c229: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiw", DIS_EADDR16, DIS_I16);


#line 39076 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c230: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiw", DIS_EADDR16, DIS_I16);


#line 39094 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c231: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiw", DIS_EADDR16, DIS_I16);


#line 39112 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c232: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1619 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiw", DIS_EADDR16, DIS_I16);


#line 39130 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c233: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiw", DIS_EADDR16, DIS_I16);


#line 39148 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c234: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiw", DIS_EADDR16, DIS_I16);


#line 39166 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c235: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiw", DIS_EADDR16, DIS_I16);


#line 39184 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c236: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1616 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiw", DIS_EADDR16, DIS_I16);


#line 39202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c237: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiw", DIS_EADDR16, DIS_I16);


#line 39220 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c238: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiw", DIS_EADDR16, DIS_I16);


#line 39238 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c239: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiw", DIS_EADDR16, DIS_I16);


#line 39256 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c240: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1613 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiw", DIS_EADDR16, DIS_I16);


#line 39274 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c241: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiw", DIS_EADDR16, DIS_I16);


#line 39292 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c242: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiw", DIS_EADDR16, DIS_I16);


#line 39310 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c243: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiw", DIS_EADDR16, DIS_I16);


#line 39328 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c244: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1610 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiw", DIS_EADDR16, DIS_I16);


#line 39346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c245: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiw", DIS_EADDR16, DIS_I16);


#line 39364 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c246: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiw", DIS_EADDR16, DIS_I16);


#line 39382 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c247: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiw", DIS_EADDR16, DIS_I16);


#line 39400 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c248: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1607 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiw", DIS_EADDR16, DIS_I16);


#line 39418 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c249: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiw", DIS_EADDR16, DIS_I16);


#line 39436 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c250: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiw", DIS_EADDR16, DIS_I16);


#line 39454 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c251: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiw", DIS_EADDR16, DIS_I16);


#line 39472 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c252: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1604 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiw", DIS_EADDR16, DIS_I16);


#line 39490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c253: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrow", DIS_EADDR16, DIS_REG16);


#line 39507 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c254: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrow", DIS_EADDR16, DIS_REG16);


#line 39524 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c255: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrow", DIS_EADDR16, DIS_REG16);


#line 39541 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c256: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1028 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrow", DIS_EADDR16, DIS_REG16);


#line 39558 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c257: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiowb", DIS_EADDR16, DIS_I8);


#line 39576 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c258: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiowb", DIS_EADDR16, DIS_I8);


#line 39594 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c259: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiowb", DIS_EADDR16, DIS_I8);


#line 39612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c260: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1577 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiowb", DIS_EADDR16, DIS_I8);


#line 39630 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c261: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiowb", DIS_EADDR16, DIS_I8);


#line 39648 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c262: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiowb", DIS_EADDR16, DIS_I8);


#line 39666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c263: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiowb", DIS_EADDR16, DIS_I8);


#line 39684 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c264: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1571 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiowb", DIS_EADDR16, DIS_I8);


#line 39702 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c265: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiowb", DIS_EADDR16, DIS_I8);


#line 39720 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c266: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiowb", DIS_EADDR16, DIS_I8);


#line 39738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c267: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiowb", DIS_EADDR16, DIS_I8);


#line 39756 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c268: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1565 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiowb", DIS_EADDR16, DIS_I8);


#line 39774 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c269: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiowb", DIS_EADDR16, DIS_I8);


#line 39792 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c270: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiowb", DIS_EADDR16, DIS_I8);


#line 39810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c271: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiowb", DIS_EADDR16, DIS_I8);


#line 39828 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c272: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1559 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiowb", DIS_EADDR16, DIS_I8);


#line 39846 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c273: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiowb", DIS_EADDR16, DIS_I8);


#line 39864 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c274: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiowb", DIS_EADDR16, DIS_I8);


#line 39882 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c275: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiowb", DIS_EADDR16, DIS_I8);


#line 39900 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c276: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1553 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDiowb", DIS_EADDR16, DIS_I8);


#line 39918 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c277: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiowb", DIS_EADDR16, DIS_I8);


#line 39936 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c278: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiowb", DIS_EADDR16, DIS_I8);


#line 39954 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c279: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiowb", DIS_EADDR16, DIS_I8);


#line 39972 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c280: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1544 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiowb", DIS_EADDR16, DIS_I8);


#line 39990 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c281: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiowb", DIS_EADDR16, DIS_I8);


#line 40008 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c282: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiowb", DIS_EADDR16, DIS_I8);


#line 40026 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c283: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiowb", DIS_EADDR16, DIS_I8);


#line 40044 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c284: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1538 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiowb", DIS_EADDR16, DIS_I8);


#line 40062 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c285: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiowb", DIS_EADDR16, DIS_I8);


#line 40080 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c286: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiowb", DIS_EADDR16, DIS_I8);


#line 40098 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c287: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiowb", DIS_EADDR16, DIS_I8);


#line 40116 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c288: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1532 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiowb", DIS_EADDR16, DIS_I8);


#line 40134 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c289: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmow", DIS_REG16, DIS_EADDR16);


#line 40151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c290: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmow", DIS_REG16, DIS_EADDR16);


#line 40168 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c291: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmow", DIS_REG16, DIS_EADDR16);


#line 40185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c292: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1019 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmow", DIS_REG16, DIS_EADDR16);


#line 40202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c293: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c294: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40236 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c295: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c296: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 381 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40270 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c297: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.ow", DIS_REG16, DIS_MEM);


#line 40287 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c298: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.ow", DIS_REG16, DIS_MEM);


#line 40304 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c299: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1070 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.ow", DIS_REG16, DIS_MEM);


#line 40321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c300: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40338 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c301: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c302: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40372 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c303: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 321 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);


#line 40389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c304: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 874 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evow", DIS_EADDR16);

//	| OUTSvod() =>
//		result.rtl = instantiate(pc, "OUTSvod");

//	| OUTSvow() =>
//		result.rtl = instantiate(pc, "OUTSvow");

//	| OUTSB() =>
//		result.rtl = instantiate(pc, "OUTSB");

//	| OUT.DX.eAXod() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXod");

//	| OUT.DX.eAXow() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXow");

//	| OUT.DX.AL() =>
//		result.rtl = instantiate(pc, "OUT.DX.AL");

//	| OUT.Ib.eAXod(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXod", DIS_I8);

//	| OUT.Ib.eAXow(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXow", DIS_I8);

//	| OUT.Ib.AL(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.AL", DIS_I8);


#line 40432 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c305: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 874 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evow", DIS_EADDR16);

//	| OUTSvod() =>
//		result.rtl = instantiate(pc, "OUTSvod");

//	| OUTSvow() =>
//		result.rtl = instantiate(pc, "OUTSvow");

//	| OUTSB() =>
//		result.rtl = instantiate(pc, "OUTSB");

//	| OUT.DX.eAXod() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXod");

//	| OUT.DX.eAXow() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXow");

//	| OUT.DX.AL() =>
//		result.rtl = instantiate(pc, "OUT.DX.AL");

//	| OUT.Ib.eAXod(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXod", DIS_I8);

//	| OUT.Ib.eAXow(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXow", DIS_I8);

//	| OUT.Ib.AL(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.AL", DIS_I8);


#line 40475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c306: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 874 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evow", DIS_EADDR16);

//	| OUTSvod() =>
//		result.rtl = instantiate(pc, "OUTSvod");

//	| OUTSvow() =>
//		result.rtl = instantiate(pc, "OUTSvow");

//	| OUTSB() =>
//		result.rtl = instantiate(pc, "OUTSB");

//	| OUT.DX.eAXod() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXod");

//	| OUT.DX.eAXow() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXow");

//	| OUT.DX.AL() =>
//		result.rtl = instantiate(pc, "OUT.DX.AL");

//	| OUT.Ib.eAXod(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXod", DIS_I8);

//	| OUT.Ib.eAXow(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXow", DIS_I8);

//	| OUT.Ib.AL(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.AL", DIS_I8);


#line 40518 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c307: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 874 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evow", DIS_EADDR16);

//	| OUTSvod() =>
//		result.rtl = instantiate(pc, "OUTSvod");

//	| OUTSvow() =>
//		result.rtl = instantiate(pc, "OUTSvow");

//	| OUTSB() =>
//		result.rtl = instantiate(pc, "OUTSB");

//	| OUT.DX.eAXod() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXod");

//	| OUT.DX.eAXow() =>
//		result.rtl = instantiate(pc, "OUT.DX.eAXow");

//	| OUT.DX.AL() =>
//		result.rtl = instantiate(pc, "OUT.DX.AL");

//	| OUT.Ib.eAXod(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXod", DIS_I8);

//	| OUT.Ib.eAXow(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.eAXow", DIS_I8);

//	| OUT.Ib.AL(i8) =>
//		result.rtl = instantiate(pc, "OUT.Ib.AL", DIS_I8);


#line 40561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c308: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40579 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c309: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40597 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c310: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40615 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c311: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 632 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40633 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c312: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40651 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c313: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c314: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40687 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c315: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 626 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40705 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c316: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c317: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40741 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c318: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40759 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c319: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 620 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c320: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c321: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40813 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c322: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40831 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c323: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 614 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40849 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c324: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40867 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c325: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40885 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c326: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c327: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 608 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c328: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40939 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c329: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40957 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c330: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40975 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c331: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 602 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 40993 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c332: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 41011 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c333: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 41029 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c334: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 41047 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c335: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 596 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);


#line 41065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c336: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);


#line 41083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c337: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);


#line 41101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c338: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);


#line 41119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c339: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 977 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);


#line 41137 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c340: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1ow", DIS_EADDR16);


#line 41153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c341: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1ow", DIS_EADDR16);


#line 41169 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c342: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1ow", DIS_EADDR16);


#line 41185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c343: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 737 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1ow", DIS_EADDR16);


#line 41201 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c344: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORB.Ev.1owR", DIS_EADDR16);


#line 41217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c345: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORB.Ev.1owR", DIS_EADDR16);


#line 41233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c346: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORB.Ev.1owR", DIS_EADDR16);


#line 41249 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c347: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 725 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORB.Ev.1owR", DIS_EADDR16);


#line 41265 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c348: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1ow", DIS_EADDR16);


#line 41281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c349: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1ow", DIS_EADDR16);


#line 41297 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c350: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1ow", DIS_EADDR16);


#line 41313 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c351: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 713 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1ow", DIS_EADDR16);


#line 41329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c352: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1ow", DIS_EADDR16);


#line 41345 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c353: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1ow", DIS_EADDR16);


#line 41361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c354: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1ow", DIS_EADDR16);


#line 41377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c355: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 701 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1ow", DIS_EADDR16);


#line 41393 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c356: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1ow", DIS_EADDR16);


#line 41409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c357: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1ow", DIS_EADDR16);


#line 41425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c358: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1ow", DIS_EADDR16);


#line 41441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c359: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 689 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1ow", DIS_EADDR16);


#line 41457 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c360: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1ow", DIS_EADDR16);


#line 41473 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c361: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1ow", DIS_EADDR16);


#line 41489 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c362: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1ow", DIS_EADDR16);


#line 41505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c363: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 677 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1ow", DIS_EADDR16);


#line 41521 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c364: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1ow", DIS_EADDR16);


#line 41537 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c365: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1ow", DIS_EADDR16);


#line 41553 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c366: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1ow", DIS_EADDR16);


#line 41569 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c367: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 665 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1ow", DIS_EADDR16);


#line 41585 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c368: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLow", DIS_EADDR16);


#line 41601 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c369: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLow", DIS_EADDR16);


#line 41617 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c370: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLow", DIS_EADDR16);


#line 41633 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c371: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 731 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLow", DIS_EADDR16);


#line 41649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c372: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLow", DIS_EADDR16);


#line 41665 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c373: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLow", DIS_EADDR16);


#line 41681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c374: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLow", DIS_EADDR16);


#line 41697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c375: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 719 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLow", DIS_EADDR16);


#line 41713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c376: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLow", DIS_EADDR16);


#line 41729 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c377: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLow", DIS_EADDR16);


#line 41745 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c378: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLow", DIS_EADDR16);


#line 41761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c379: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 707 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLow", DIS_EADDR16);


#line 41777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c380: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLow", DIS_EADDR16);


#line 41793 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c381: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLow", DIS_EADDR16);


#line 41809 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c382: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLow", DIS_EADDR16);


#line 41825 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c383: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 695 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLow", DIS_EADDR16);


#line 41841 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c384: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLow", DIS_EADDR16);


#line 41857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c385: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLow", DIS_EADDR16);


#line 41873 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c386: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLow", DIS_EADDR16);


#line 41889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c387: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 683 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLow", DIS_EADDR16);


#line 41905 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c388: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLow", DIS_EADDR16);


#line 41921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c389: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLow", DIS_EADDR16);


#line 41937 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c390: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLow", DIS_EADDR16);


#line 41953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c391: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 671 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLow", DIS_EADDR16);


#line 41969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c392: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLow", DIS_EADDR16);


#line 41985 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c393: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLow", DIS_EADDR16);


#line 42001 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c394: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLow", DIS_EADDR16);


#line 42017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c395: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 659 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLow", DIS_EADDR16);


#line 42033 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c396: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_24 & 0xffff) /* i16 at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);


#line 42050 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c397: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_32 & 0xffff) /* i16 at 32 */;
      nextPC = 6 + MATCH_p; 
      
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);


#line 42067 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c398: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_64 & 0xffff) /* i16 at 64 */;
      nextPC = 10 + MATCH_p; 
      
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);


#line 42084 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c399: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_56 & 0xffff) /* i16 at 56 */;
      nextPC = 9 + MATCH_p; 
      
#line 390 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);


#line 42101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c400: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTow", DIS_EADDR16);


#line 42117 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c401: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTow", DIS_EADDR16);


#line 42133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c402: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTow", DIS_EADDR16);


#line 42149 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c403: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 907 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTow", DIS_EADDR16);


#line 42165 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c404: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGow", DIS_EADDR16);


#line 42181 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c405: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGow", DIS_EADDR16);


#line 42197 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c406: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGow", DIS_EADDR16);


#line 42213 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c407: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 916 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGow", DIS_EADDR16);


#line 42229 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c408: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXow", DIS_EADDR16);


#line 42245 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c409: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXow", DIS_EADDR16);


#line 42261 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c410: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXow", DIS_EADDR16);


#line 42277 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c411: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 925 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXow", DIS_EADDR16);


#line 42293 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c412: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULow", DIS_EADDR16);


#line 42309 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c413: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULow", DIS_EADDR16);


#line 42325 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c414: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULow", DIS_EADDR16);


#line 42341 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c415: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1169 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULow", DIS_EADDR16);


#line 42357 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c416: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAX", DIS_EADDR16);


#line 42373 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c417: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAX", DIS_EADDR16);


#line 42389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c418: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAX", DIS_EADDR16);


#line 42405 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c419: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1193 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAX", DIS_EADDR16);


#line 42421 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c420: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVAX", DIS_EADDR16);


#line 42437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c421: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVAX", DIS_EADDR16);


#line 42453 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c422: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVAX", DIS_EADDR16);


#line 42469 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c423: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1178 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVAX", DIS_EADDR16);


#line 42485 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c424: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evow", DIS_EADDR16);


#line 42501 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c425: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evow", DIS_EADDR16);


#line 42517 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c426: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evow", DIS_EADDR16);


#line 42533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c427: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1124 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evow", DIS_EADDR16);


#line 42549 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c428: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evow", DIS_EADDR16);


#line 42565 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c429: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evow", DIS_EADDR16);


#line 42581 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c430: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evow", DIS_EADDR16);


#line 42597 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c431: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1208 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evow", DIS_EADDR16);


#line 42613 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c432: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evow", DIS_EADDR16);

//	| POPFod() =>
//		result.rtl = instantiate(pc, "POPFod");

//	| POPFow() =>
//		result.rtl = instantiate(pc, "POPFow");

//	| POPAod() =>
//		result.rtl = instantiate(pc, "POPAod");

//	| POPAow() =>
//		result.rtl = instantiate(pc, "POPAow");


#line 42641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c433: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evow", DIS_EADDR16);

//	| POPFod() =>
//		result.rtl = instantiate(pc, "POPFod");

//	| POPFow() =>
//		result.rtl = instantiate(pc, "POPFow");

//	| POPAod() =>
//		result.rtl = instantiate(pc, "POPAod");

//	| POPAow() =>
//		result.rtl = instantiate(pc, "POPAow");


#line 42669 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c434: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evow", DIS_EADDR16);

//	| POPFod() =>
//		result.rtl = instantiate(pc, "POPFod");

//	| POPFow() =>
//		result.rtl = instantiate(pc, "POPFow");

//	| POPAod() =>
//		result.rtl = instantiate(pc, "POPAod");

//	| POPAow() =>
//		result.rtl = instantiate(pc, "POPAow");


#line 42697 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c435: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 835 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evow", DIS_EADDR16);

//	| POPFod() =>
//		result.rtl = instantiate(pc, "POPFod");

//	| POPFow() =>
//		result.rtl = instantiate(pc, "POPFow");

//	| POPAod() =>
//		result.rtl = instantiate(pc, "POPAod");

//	| POPAow() =>
//		result.rtl = instantiate(pc, "POPAow");


#line 42725 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c436: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDib", DIS_EADDR8, DIS_I8);


#line 42743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c437: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDib", DIS_EADDR8, DIS_I8);


#line 42761 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c438: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDib", DIS_EADDR8, DIS_I8);


#line 42779 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c439: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1649 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDib", DIS_EADDR8, DIS_I8);


#line 42797 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c440: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORib", DIS_EADDR8, DIS_I8);


#line 42815 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c441: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORib", DIS_EADDR8, DIS_I8);


#line 42833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c442: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORib", DIS_EADDR8, DIS_I8);


#line 42851 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c443: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1646 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORib", DIS_EADDR8, DIS_I8);


#line 42869 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c444: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCib", DIS_EADDR8, DIS_I8);


#line 42887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c445: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCib", DIS_EADDR8, DIS_I8);


#line 42905 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c446: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCib", DIS_EADDR8, DIS_I8);


#line 42923 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c447: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1643 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCib", DIS_EADDR8, DIS_I8);


#line 42941 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c448: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBib", DIS_EADDR8, DIS_I8);


#line 42959 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c449: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBib", DIS_EADDR8, DIS_I8);


#line 42977 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c450: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBib", DIS_EADDR8, DIS_I8);


#line 42995 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c451: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1640 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBib", DIS_EADDR8, DIS_I8);


#line 43013 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c452: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDib", DIS_EADDR8, DIS_I8);


#line 43031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c453: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDib", DIS_EADDR8, DIS_I8);


#line 43049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c454: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDib", DIS_EADDR8, DIS_I8);


#line 43067 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c455: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1637 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDib", DIS_EADDR8, DIS_I8);


#line 43085 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c456: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBib", DIS_EADDR8, DIS_I8);


#line 43103 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c457: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBib", DIS_EADDR8, DIS_I8);


#line 43121 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c458: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBib", DIS_EADDR8, DIS_I8);


#line 43139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c459: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1634 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBib", DIS_EADDR8, DIS_I8);


#line 43157 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c460: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORib", DIS_EADDR8, DIS_I8);


#line 43175 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c461: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORib", DIS_EADDR8, DIS_I8);


#line 43193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c462: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORib", DIS_EADDR8, DIS_I8);


#line 43211 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c463: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1631 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORib", DIS_EADDR8, DIS_I8);


#line 43229 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c464: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPib", DIS_EADDR8, DIS_I8);


#line 43247 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c465: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPib", DIS_EADDR8, DIS_I8);


#line 43265 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c466: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPib", DIS_EADDR8, DIS_I8);


#line 43283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c467: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1628 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPib", DIS_EADDR8, DIS_I8);


#line 43301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c468: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDid", DIS_EADDR32, DIS_I32);


#line 43318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c469: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDid", DIS_EADDR32, DIS_I32);


#line 43335 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c470: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDid", DIS_EADDR32, DIS_I32);


#line 43352 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c471: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1601 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDid", DIS_EADDR32, DIS_I32);


#line 43369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c472: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORid", DIS_EADDR32, DIS_I32);


#line 43386 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c473: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORid", DIS_EADDR32, DIS_I32);


#line 43403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c474: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORid", DIS_EADDR32, DIS_I32);


#line 43420 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c475: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1598 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORid", DIS_EADDR32, DIS_I32);


#line 43437 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c476: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCid", DIS_EADDR32, DIS_I32);


#line 43454 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c477: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCid", DIS_EADDR32, DIS_I32);


#line 43471 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c478: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCid", DIS_EADDR32, DIS_I32);


#line 43488 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c479: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1595 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCid", DIS_EADDR32, DIS_I32);


#line 43505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c480: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBid", DIS_EADDR32, DIS_I32);


#line 43522 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c481: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBid", DIS_EADDR32, DIS_I32);


#line 43539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c482: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBid", DIS_EADDR32, DIS_I32);


#line 43556 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c483: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1592 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBid", DIS_EADDR32, DIS_I32);


#line 43573 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c484: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDid", DIS_EADDR32, DIS_I32);


#line 43590 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c485: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDid", DIS_EADDR32, DIS_I32);


#line 43607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c486: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDid", DIS_EADDR32, DIS_I32);


#line 43624 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c487: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1589 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ANDid", DIS_EADDR32, DIS_I32);


#line 43641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c488: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBid", DIS_EADDR32, DIS_I32);


#line 43658 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c489: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBid", DIS_EADDR32, DIS_I32);


#line 43675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c490: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBid", DIS_EADDR32, DIS_I32);


#line 43692 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c491: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1586 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBid", DIS_EADDR32, DIS_I32);


#line 43709 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c492: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORid", DIS_EADDR32, DIS_I32);


#line 43726 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c493: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORid", DIS_EADDR32, DIS_I32);


#line 43743 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c494: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORid", DIS_EADDR32, DIS_I32);


#line 43760 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c495: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1583 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORid", DIS_EADDR32, DIS_I32);


#line 43777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c496: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPid", DIS_EADDR32, DIS_I32);


#line 43794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c497: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPid", DIS_EADDR32, DIS_I32);


#line 43811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c498: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPid", DIS_EADDR32, DIS_I32);


#line 43828 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c499: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1580 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPid", DIS_EADDR32, DIS_I32);


#line 43845 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c500: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiodb", DIS_EADDR32, DIS_I8);


#line 43863 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c501: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiodb", DIS_EADDR32, DIS_I8);


#line 43881 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c502: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiodb", DIS_EADDR32, DIS_I8);


#line 43899 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c503: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1574 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADDiodb", DIS_EADDR32, DIS_I8);


#line 43917 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c504: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiodb", DIS_EADDR32, DIS_I8);


#line 43935 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c505: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiodb", DIS_EADDR32, DIS_I8);


#line 43953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c506: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiodb", DIS_EADDR32, DIS_I8);


#line 43971 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c507: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1568 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORiodb", DIS_EADDR32, DIS_I8);


#line 43989 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c508: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiodb", DIS_EADDR32, DIS_I8);


#line 44007 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c509: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiodb", DIS_EADDR32, DIS_I8);


#line 44025 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c510: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiodb", DIS_EADDR32, DIS_I8);


#line 44043 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c511: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1562 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ADCiodb", DIS_EADDR32, DIS_I8);


#line 44061 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c512: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiodb", DIS_EADDR32, DIS_I8);


#line 44079 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c513: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiodb", DIS_EADDR32, DIS_I8);


#line 44097 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c514: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiodb", DIS_EADDR32, DIS_I8);


#line 44115 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c515: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1556 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBiodb", DIS_EADDR32, DIS_I8);


#line 44133 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c516: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		Exp *oper = DIS_EADDR32;
		if (i8 != -16 || !(*oper == *Location::regOf(28)))
			result.rtl = instantiate(pc, "ANDiodb", DIS_EADDR32, DIS_I8);


#line 44154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c517: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		Exp *oper = DIS_EADDR32;
		if (i8 != -16 || !(*oper == *Location::regOf(28)))
			result.rtl = instantiate(pc, "ANDiodb", DIS_EADDR32, DIS_I8);


#line 44175 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c518: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		Exp *oper = DIS_EADDR32;
		if (i8 != -16 || !(*oper == *Location::regOf(28)))
			result.rtl = instantiate(pc, "ANDiodb", DIS_EADDR32, DIS_I8);


#line 44196 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c519: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1547 "machine/pentium/decoder.m"

		// Special hack to ignore and $0xfffffff0, %esp
		Exp *oper = DIS_EADDR32;
		if (i8 != -16 || !(*oper == *Location::regOf(28)))
			result.rtl = instantiate(pc, "ANDiodb", DIS_EADDR32, DIS_I8);


#line 44217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c520: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiodb", DIS_EADDR32, DIS_I8);


#line 44235 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c521: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiodb", DIS_EADDR32, DIS_I8);


#line 44253 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c522: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiodb", DIS_EADDR32, DIS_I8);


#line 44271 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c523: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1541 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBiodb", DIS_EADDR32, DIS_I8);


#line 44289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c524: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiodb", DIS_EADDR32, DIS_I8);


#line 44307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c525: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiodb", DIS_EADDR32, DIS_I8);


#line 44325 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c526: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiodb", DIS_EADDR32, DIS_I8);


#line 44343 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c527: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1535 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XORiodb", DIS_EADDR32, DIS_I8);


#line 44361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c528: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiodb", DIS_EADDR32, DIS_I8);


#line 44379 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c529: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiodb", DIS_EADDR32, DIS_I8);


#line 44397 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c530: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiodb", DIS_EADDR32, DIS_I8);


#line 44415 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c531: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1529 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPiodb", DIS_EADDR32, DIS_I8);


#line 44433 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c532: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44450 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c533: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44467 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c534: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44484 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c535: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 384 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44501 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c536: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44518 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c537: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44535 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c538: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44552 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c539: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 378 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44569 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c540: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44586 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c541: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c542: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44620 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c543: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 324 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 44637 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c544: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44654 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c545: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44671 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c546: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44688 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c547: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 318 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 44705 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c548: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c549: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44741 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c550: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44759 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c551: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 653 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44777 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c552: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c553: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44813 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c554: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44831 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c555: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 650 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44849 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c556: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44867 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c557: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44885 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c558: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c559: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 647 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c560: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44939 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c561: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44957 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c562: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44975 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c563: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 644 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 44993 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c564: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45011 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c565: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45029 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c566: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45047 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c567: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 641 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c568: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c569: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45101 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c570: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c571: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 638 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45137 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c572: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45155 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c573: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45173 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c574: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45191 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c575: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 635 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45209 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c576: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c577: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45245 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c578: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45263 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c579: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 629 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c580: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45299 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c581: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45317 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c582: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45335 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c583: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 623 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45353 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c584: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45371 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c585: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45389 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c586: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45407 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c587: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 617 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c588: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c589: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45461 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c590: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c591: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 611 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c592: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45515 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c593: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45533 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c594: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45551 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c595: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 605 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45569 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c596: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c597: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45605 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c598: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45623 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c599: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 599 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c600: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45659 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c601: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45677 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c602: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45695 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c603: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 593 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);


#line 45713 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c604: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LES", DIS_REG32, DIS_MEM);


#line 45730 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c605: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LES", DIS_REG32, DIS_MEM);


#line 45747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c606: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1061 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LES", DIS_REG32, DIS_MEM);


#line 45764 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c607: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LDS", DIS_REG32, DIS_MEM);


#line 45781 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c608: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LDS", DIS_REG32, DIS_MEM);


#line 45798 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c609: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1073 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LDS", DIS_REG32, DIS_MEM);


#line 45815 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c610: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c611: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45851 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c612: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45869 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c613: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 980 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 45887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c614: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);


#line 45904 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c615: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);


#line 45921 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c616: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);


#line 45938 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c617: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 974 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);


#line 45955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c618: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.1", DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() =>
//		result.rtl = instantiate(pc, "PUSHFod");

//	| PUSHFow() =>
//		result.rtl = instantiate(pc, "PUSHFow");

//	| PUSHAod() =>
//		result.rtl = instantiate(pc, "PUSHAod");

//	| PUSHAow() =>
//		result.rtl = instantiate(pc, "PUSHAow");


#line 45985 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c619: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.1", DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() =>
//		result.rtl = instantiate(pc, "PUSHFod");

//	| PUSHFow() =>
//		result.rtl = instantiate(pc, "PUSHFow");

//	| PUSHAod() =>
//		result.rtl = instantiate(pc, "PUSHAod");

//	| PUSHAow() =>
//		result.rtl = instantiate(pc, "PUSHAow");


#line 46015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c620: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.1", DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() =>
//		result.rtl = instantiate(pc, "PUSHFod");

//	| PUSHFow() =>
//		result.rtl = instantiate(pc, "PUSHFow");

//	| PUSHAod() =>
//		result.rtl = instantiate(pc, "PUSHAod");

//	| PUSHAow() =>
//		result.rtl = instantiate(pc, "PUSHAow");


#line 46045 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c621: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.1", DIS_EADDR8);

	// There is no SSL for these, so don't call instantiate, it will only
	// cause an assert failure. Also, may as well treat these as invalid instr
//	| PUSHFod() =>
//		result.rtl = instantiate(pc, "PUSHFod");

//	| PUSHFow() =>
//		result.rtl = instantiate(pc, "PUSHFow");

//	| PUSHAod() =>
//		result.rtl = instantiate(pc, "PUSHAod");

//	| PUSHAow() =>
//		result.rtl = instantiate(pc, "PUSHAow");


#line 46075 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c622: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.1", DIS_EADDR8);


#line 46091 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c623: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.1", DIS_EADDR8);


#line 46107 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c624: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.1", DIS_EADDR8);


#line 46123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c625: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.1", DIS_EADDR8);


#line 46139 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c626: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.1", DIS_EADDR8);


#line 46155 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c627: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.1", DIS_EADDR8);


#line 46171 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c628: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.1", DIS_EADDR8);


#line 46187 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c629: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 767 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.1", DIS_EADDR8);


#line 46203 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c630: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.1", DIS_EADDR8);


#line 46219 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c631: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.1", DIS_EADDR8);


#line 46235 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c632: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.1", DIS_EADDR8);


#line 46251 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c633: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.1", DIS_EADDR8);


#line 46267 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c634: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.1", DIS_EADDR8);


#line 46283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c635: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.1", DIS_EADDR8);


#line 46299 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c636: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.1", DIS_EADDR8);


#line 46315 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c637: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.1", DIS_EADDR8);


#line 46331 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c638: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.1", DIS_EADDR8);


#line 46347 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c639: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.1", DIS_EADDR8);


#line 46363 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c640: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.1", DIS_EADDR8);


#line 46379 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c641: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 749 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.1", DIS_EADDR8);


#line 46395 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c642: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.1", DIS_EADDR16);


#line 46411 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c643: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.1", DIS_EADDR16);


#line 46427 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c644: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.1", DIS_EADDR16);


#line 46443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c645: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.1", DIS_EADDR16);


#line 46459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c646: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1od", DIS_EADDR32);


#line 46475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c647: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1od", DIS_EADDR32);


#line 46491 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c648: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1od", DIS_EADDR32);


#line 46507 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c649: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 734 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.1od", DIS_EADDR32);


#line 46523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c650: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.1od", DIS_EADDR32);


#line 46539 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c651: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.1od", DIS_EADDR32);


#line 46555 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c652: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.1od", DIS_EADDR32);


#line 46571 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c653: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 722 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.1od", DIS_EADDR32);


#line 46587 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c654: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1od", DIS_EADDR32);


#line 46603 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c655: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1od", DIS_EADDR32);


#line 46619 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c656: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1od", DIS_EADDR32);


#line 46635 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c657: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 710 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.1od", DIS_EADDR32);


#line 46651 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c658: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1od", DIS_EADDR32);


#line 46667 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c659: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1od", DIS_EADDR32);


#line 46683 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c660: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1od", DIS_EADDR32);


#line 46699 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c661: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 698 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.1od", DIS_EADDR32);


#line 46715 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c662: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1od", DIS_EADDR32);


#line 46731 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c663: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1od", DIS_EADDR32);


#line 46747 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c664: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1od", DIS_EADDR32);


#line 46763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c665: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 686 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.1od", DIS_EADDR32);


#line 46779 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c666: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1od", DIS_EADDR32);


#line 46795 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c667: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1od", DIS_EADDR32);


#line 46811 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c668: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1od", DIS_EADDR32);


#line 46827 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c669: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 674 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.1od", DIS_EADDR32);


#line 46843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c670: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1od", DIS_EADDR32);


#line 46859 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c671: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1od", DIS_EADDR32);


#line 46875 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c672: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1od", DIS_EADDR32);


#line 46891 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c673: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 662 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.1od", DIS_EADDR32);


#line 46907 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c674: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.CL", DIS_EADDR8);


#line 46923 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c675: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.CL", DIS_EADDR8);


#line 46939 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c676: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.CL", DIS_EADDR8);


#line 46955 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c677: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Eb.CL", DIS_EADDR8);


#line 46971 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c678: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.CL", DIS_EADDR8);


#line 46987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c679: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.CL", DIS_EADDR8);


#line 47003 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c680: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.CL", DIS_EADDR8);


#line 47019 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c681: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 770 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Eb.CL", DIS_EADDR8);


#line 47035 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c682: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.CL", DIS_EADDR8);


#line 47051 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c683: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.CL", DIS_EADDR8);


#line 47067 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c684: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.CL", DIS_EADDR8);


#line 47083 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c685: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Eb.CL", DIS_EADDR8);


#line 47099 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c686: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.CL", DIS_EADDR8);


#line 47115 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c687: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.CL", DIS_EADDR8);


#line 47131 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c688: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.CL", DIS_EADDR8);


#line 47147 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c689: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Eb.CL", DIS_EADDR8);


#line 47163 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c690: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.CL", DIS_EADDR8);


#line 47179 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c691: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.CL", DIS_EADDR8);


#line 47195 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c692: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.CL", DIS_EADDR8);


#line 47211 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c693: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 752 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Eb.CL", DIS_EADDR8);


#line 47227 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c694: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.CL", DIS_EADDR8);


#line 47243 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c695: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.CL", DIS_EADDR8);


#line 47259 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c696: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.CL", DIS_EADDR8);


#line 47275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c697: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 746 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Eb.CL", DIS_EADDR8);


#line 47291 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c698: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.CL", DIS_EADDR32);


#line 47307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c699: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.CL", DIS_EADDR32);


#line 47323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c700: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.CL", DIS_EADDR32);


#line 47339 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c701: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Eb.CL", DIS_EADDR32);


#line 47355 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c702: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLod", DIS_EADDR32);


#line 47371 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c703: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLod", DIS_EADDR32);


#line 47387 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c704: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLod", DIS_EADDR32);


#line 47403 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c705: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 728 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ROLB.Ev.CLod", DIS_EADDR32);


#line 47419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c706: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLod", DIS_EADDR32);


#line 47435 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c707: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLod", DIS_EADDR32);


#line 47451 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c708: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLod", DIS_EADDR32);


#line 47467 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c709: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 716 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RORB.Ev.CLod", DIS_EADDR32);


#line 47483 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c710: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLod", DIS_EADDR32);


#line 47499 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c711: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLod", DIS_EADDR32);


#line 47515 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c712: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLod", DIS_EADDR32);


#line 47531 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c713: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 704 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCLB.Ev.CLod", DIS_EADDR32);


#line 47547 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c714: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLod", DIS_EADDR32);


#line 47563 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c715: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLod", DIS_EADDR32);


#line 47579 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c716: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLod", DIS_EADDR32);


#line 47595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c717: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 692 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "RCRB.Ev.CLod", DIS_EADDR32);


#line 47611 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c718: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLod", DIS_EADDR32);


#line 47627 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c719: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLod", DIS_EADDR32);


#line 47643 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c720: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLod", DIS_EADDR32);


#line 47659 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c721: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 680 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLSALB.Ev.CLod", DIS_EADDR32);


#line 47675 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c722: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLod", DIS_EADDR32);


#line 47691 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c723: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLod", DIS_EADDR32);


#line 47707 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c724: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLod", DIS_EADDR32);


#line 47723 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c725: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 668 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRB.Ev.CLod", DIS_EADDR32);


#line 47739 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c726: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLod", DIS_EADDR32);


#line 47755 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c727: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLod", DIS_EADDR32);


#line 47771 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c728: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLod", DIS_EADDR32);


#line 47787 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c729: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 656 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SARB.Ev.CLod", DIS_EADDR32);


#line 47803 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c730: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 47820 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c731: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 47837 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c732: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      nextPC = 8 + MATCH_p; 
      
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 47854 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c733: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_48 & 0xff) /* i8 at 48 */;
      nextPC = 7 + MATCH_p; 
      
#line 393 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);


#line 47871 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c734: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTb", DIS_EADDR8);


#line 47887 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c735: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTb", DIS_EADDR8);


#line 47903 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c736: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTb", DIS_EADDR8);


#line 47919 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c737: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 910 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTb", DIS_EADDR8);


#line 47935 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c738: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGb", DIS_EADDR8);


#line 47951 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c739: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGb", DIS_EADDR8);


#line 47967 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c740: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGb", DIS_EADDR8);


#line 47983 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c741: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 919 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGb", DIS_EADDR8);


#line 47999 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c742: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AL", DIS_EADDR8);


#line 48015 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c743: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AL", DIS_EADDR8);


#line 48031 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c744: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AL", DIS_EADDR8);


#line 48047 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c745: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AL", DIS_EADDR8);


#line 48063 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c746: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULb", DIS_EADDR8);


#line 48079 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c747: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULb", DIS_EADDR8);


#line 48095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c748: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULb", DIS_EADDR8);


#line 48111 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c749: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1172 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULb", DIS_EADDR8);


#line 48127 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c750: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAL", DIS_EADDR8);


#line 48143 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c751: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAL", DIS_EADDR8);


#line 48159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c752: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAL", DIS_EADDR8);


#line 48175 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c753: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1196 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVAL", DIS_EADDR8);


#line 48191 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c754: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIV", DIS_EADDR8); /* ?? */

//	| HLT() =>
//		result.rtl = instantiate(pc, "HLT");


#line 48210 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c755: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIV", DIS_EADDR8); /* ?? */

//	| HLT() =>
//		result.rtl = instantiate(pc, "HLT");


#line 48229 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c756: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIV", DIS_EADDR8); /* ?? */

//	| HLT() =>
//		result.rtl = instantiate(pc, "HLT");


#line 48248 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c757: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1181 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIV", DIS_EADDR8); /* ?? */

//	| HLT() =>
//		result.rtl = instantiate(pc, "HLT");


#line 48267 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c758: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ed.Id", DIS_EADDR32, DIS_I32);


#line 48284 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c759: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ed.Id", DIS_EADDR32, DIS_I32);


#line 48301 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c760: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ed.Id", DIS_EADDR32, DIS_I32);


#line 48318 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c761: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 387 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "TEST.Ed.Id", DIS_EADDR32, DIS_I32);


#line 48335 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c762: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTod", DIS_EADDR32);


#line 48351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c763: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTod", DIS_EADDR32);


#line 48367 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c764: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTod", DIS_EADDR32);


#line 48383 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c765: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 904 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NOTod", DIS_EADDR32);


#line 48399 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c766: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGod", DIS_EADDR32);


#line 48415 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c767: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGod", DIS_EADDR32);


#line 48431 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c768: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGod", DIS_EADDR32);


#line 48447 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c769: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 913 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "NEGod", DIS_EADDR32);


#line 48463 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c770: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXod", DIS_EADDR32);


#line 48479 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c771: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXod", DIS_EADDR32);


#line 48495 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c772: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXod", DIS_EADDR32);


#line 48511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c773: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 922 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MUL.AXod", DIS_EADDR32);


#line 48527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c774: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULod", DIS_EADDR32);


#line 48543 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c775: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULod", DIS_EADDR32);


#line 48559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c776: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULod", DIS_EADDR32);


#line 48575 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c777: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1166 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULod", DIS_EADDR32);


#line 48591 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c778: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVeAX", DIS_EADDR32);


#line 48607 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c779: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVeAX", DIS_EADDR32);


#line 48623 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c780: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVeAX", DIS_EADDR32);


#line 48639 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c781: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1190 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DIVeAX", DIS_EADDR32);


#line 48655 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c782: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVeAX", DIS_EADDR32);


#line 48671 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c783: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVeAX", DIS_EADDR32);


#line 48687 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c784: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVeAX", DIS_EADDR32);


#line 48703 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c785: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1175 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IDIVeAX", DIS_EADDR32);


#line 48719 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c786: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrb", DIS_EADDR8, DIS_R8);


#line 48736 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c787: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrb", DIS_EADDR8, DIS_R8);


#line 48753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c788: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrb", DIS_EADDR8, DIS_R8);


#line 48770 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c789: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1523 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrb", DIS_EADDR8, DIS_R8);


#line 48787 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c790: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrod", DIS_EADDR32, DIS_REG32);


#line 48804 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c791: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrod", DIS_EADDR32, DIS_REG32);


#line 48821 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c792: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrod", DIS_EADDR32, DIS_REG32);


#line 48838 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c793: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1493 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORmrod", DIS_EADDR32, DIS_REG32);


#line 48855 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c794: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmb", DIS_R8, DIS_EADDR8);


#line 48872 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c795: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmb", DIS_R8, DIS_EADDR8);


#line 48889 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c796: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmb", DIS_R8, DIS_EADDR8);


#line 48906 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c797: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1451 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmb", DIS_R8, DIS_EADDR8);


#line 48923 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c798: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmod", DIS_REG32, DIS_EADDR32);


#line 48940 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c799: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmod", DIS_REG32, DIS_EADDR32);


#line 48957 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c800: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmod", DIS_REG32, DIS_EADDR32);


#line 48974 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c801: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1421 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "ORrmod", DIS_REG32, DIS_EADDR32);


#line 48991 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c802: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SLDT", DIS_EADDR32);


#line 49007 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c803: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SLDT", DIS_EADDR32);


#line 49023 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c804: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SLDT", DIS_EADDR32);


#line 49039 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c805: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 429 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SLDT", DIS_EADDR32);


#line 49055 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c806: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STR", DIS_MEM);


#line 49071 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c807: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STR", DIS_MEM);


#line 49087 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c808: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 405 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "STR", DIS_MEM);


#line 49103 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c809: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LTR", DIS_EADDR32);


#line 49119 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c810: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LTR", DIS_EADDR32);


#line 49135 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c811: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LTR", DIS_EADDR32);


#line 49151 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c812: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1034 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LTR", DIS_EADDR32);


#line 49167 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c813: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERR", DIS_EADDR32);


#line 49183 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c814: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERR", DIS_EADDR32);


#line 49199 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c815: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERR", DIS_EADDR32);


#line 49215 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c816: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 375 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERR", DIS_EADDR32);


#line 49231 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c817: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERW", DIS_EADDR32);


#line 49247 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c818: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERW", DIS_EADDR32);


#line 49263 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c819: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERW", DIS_EADDR32);


#line 49279 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c820: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 372 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "VERW", DIS_EADDR32);


#line 49295 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c821: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SGDT", DIS_MEM);

	// Sets are now in the high level instructions

#line 49312 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c822: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SGDT", DIS_MEM);

	// Sets are now in the high level instructions

#line 49329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c823: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 459 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SGDT", DIS_MEM);

	// Sets are now in the high level instructions

#line 49346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c824: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 456 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SIDT", DIS_MEM);


#line 49362 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c825: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 456 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SIDT", DIS_MEM);


#line 49378 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c826: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 456 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SIDT", DIS_MEM);


#line 49394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c827: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SMSW", DIS_EADDR32);


#line 49410 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c828: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SMSW", DIS_EADDR32);


#line 49426 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c829: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SMSW", DIS_EADDR32);


#line 49442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c830: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 426 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SMSW", DIS_EADDR32);


#line 49458 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c831: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1089 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVLPG", DIS_MEM);


#line 49474 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c832: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1089 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVLPG", DIS_MEM);


#line 49490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c833: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1089 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INVLPG", DIS_MEM);


#line 49506 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c834: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.od", DIS_REG32, DIS_EADDR32);


#line 49523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c835: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.od", DIS_REG32, DIS_EADDR32);


#line 49540 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c836: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.od", DIS_REG32, DIS_EADDR32);


#line 49557 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c837: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1076 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LAR.od", DIS_REG32, DIS_EADDR32);


#line 49574 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c838: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLod", DIS_REG32, DIS_EADDR32);


#line 49591 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c839: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLod", DIS_REG32, DIS_EADDR32);


#line 49608 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c840: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLod", DIS_REG32, DIS_EADDR32);


#line 49625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c841: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1040 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSLod", DIS_REG32, DIS_EADDR32);


#line 49642 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c842: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);


#line 49666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c843: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);


#line 49690 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c844: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);


#line 49714 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c845: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 305 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUL);
//	| SETb.NO(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.O(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);


#line 49738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c846: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUGE);

#line 49755 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c847: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUGE);

#line 49772 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c848: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUGE);

#line 49789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c849: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 302 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUGE);

#line 49806 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c850: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JE);

#line 49823 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c851: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JE);

#line 49840 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c852: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JE);

#line 49857 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c853: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 299 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JE);

#line 49874 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c854: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JNE);

#line 49891 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c855: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JNE);

#line 49908 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c856: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JNE);

#line 49925 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c857: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 296 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JNE);

#line 49942 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c858: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JULE);

#line 49959 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c859: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JULE);

#line 49976 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c860: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JULE);

#line 49993 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c861: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 293 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JULE);

#line 50010 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c862: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUG);

#line 50027 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c863: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUG);

#line 50044 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c864: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUG);

#line 50061 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c865: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 290 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JUG);

#line 50078 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c866: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JMI);

#line 50095 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c867: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JMI);

#line 50112 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c868: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JMI);

#line 50129 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c869: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 287 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JMI);

#line 50146 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c870: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JPOS);

#line 50163 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c871: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JPOS);

#line 50180 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c872: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JPOS);

#line 50197 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c873: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 284 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JPOS);

#line 50214 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c874: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50237 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c875: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50260 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c876: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c877: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 275 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSL);
//	| SETb.NP(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);
//	| SETb.P(Eaddr) [name] =>
//		result.rtl = instantiate(pc, name, DIS_EADDR8);
//		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50306 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c878: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSGE);

#line 50323 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c879: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSGE);

#line 50340 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c880: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSGE);

#line 50357 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c881: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 272 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSGE);

#line 50374 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c882: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSLE);

#line 50391 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c883: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSLE);

#line 50408 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c884: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSLE);

#line 50425 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c885: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 269 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSLE);

#line 50442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c886: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50459 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c887: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50476 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c888: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50493 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c889: (void)0; /*placeholder for label*/ 
    { 
      const char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 266 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, name, DIS_EADDR8);
		SETS(name, DIS_EADDR8, BRANCH_JSG);

#line 50510 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c890: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTod", DIS_EADDR32, DIS_REG32);


#line 50527 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c891: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTod", DIS_EADDR32, DIS_REG32);


#line 50544 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c892: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTod", DIS_EADDR32, DIS_REG32);


#line 50561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c893: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1337 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTod", DIS_EADDR32, DIS_REG32);


#line 50578 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c894: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSod", DIS_EADDR32, DIS_REG32);


#line 50595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c895: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSod", DIS_EADDR32, DIS_REG32);


#line 50612 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c896: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSod", DIS_EADDR32, DIS_REG32);


#line 50629 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c897: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1301 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSod", DIS_EADDR32, DIS_REG32);


#line 50646 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c898: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 444 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50664 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c899: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 444 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50682 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c900: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 444 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50700 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c901: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 444 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50718 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c902: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 450 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50736 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c903: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 450 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50754 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c904: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 450 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50772 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c905: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 450 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);


#line 50790 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c906: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLod", DIS_EADDR32, DIS_REG32);


#line 50807 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c907: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLod", DIS_EADDR32, DIS_REG32);


#line 50824 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c908: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLod", DIS_EADDR32, DIS_REG32);


#line 50841 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c909: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 432 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHLD.CLod", DIS_EADDR32, DIS_REG32);


#line 50858 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c910: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 438 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLod", DIS_EADDR32, DIS_REG32);


#line 50875 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c911: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 438 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLod", DIS_EADDR32, DIS_REG32);


#line 50892 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c912: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 438 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLod", DIS_EADDR32, DIS_REG32);


#line 50909 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c913: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 438 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SHRD.CLod", DIS_EADDR32, DIS_REG32);


#line 50926 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c914: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1160 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmod", DIS_REG32, DIS_EADDR32);


#line 50943 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c915: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1160 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmod", DIS_REG32, DIS_EADDR32);


#line 50960 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c916: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1160 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmod", DIS_REG32, DIS_EADDR32);


#line 50977 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c917: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1160 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMULrmod", DIS_REG32, DIS_EADDR32);


#line 50994 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c918: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 51011 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c919: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 51028 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c920: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 51045 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c921: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1238 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 51062 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c922: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 51079 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c923: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 51096 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c924: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 51113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c925: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1232 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 51130 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c926: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSS", DIS_REG32, DIS_MEM);


#line 51147 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c927: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSS", DIS_REG32, DIS_MEM);


#line 51164 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c928: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1037 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LSS", DIS_REG32, DIS_MEM);


#line 51181 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c929: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRod", DIS_EADDR32, DIS_REG32);


#line 51198 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c930: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRod", DIS_EADDR32, DIS_REG32);


#line 51215 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c931: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRod", DIS_EADDR32, DIS_REG32);


#line 51232 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c932: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1313 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRod", DIS_EADDR32, DIS_REG32);


#line 51249 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c933: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LFS", DIS_REG32, DIS_MEM);


#line 51266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c934: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LFS", DIS_REG32, DIS_MEM);


#line 51283 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c935: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1058 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LFS", DIS_REG32, DIS_MEM);


#line 51300 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c936: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LGS", DIS_REG32, DIS_MEM);


#line 51317 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c937: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LGS", DIS_REG32, DIS_MEM);


#line 51334 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c938: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1055 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LGS", DIS_REG32, DIS_MEM);


#line 51351 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c939: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 51368 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c940: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 51385 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c941: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 51402 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c942: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 51419 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c943: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 51436 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c944: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 51453 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c945: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 51470 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c946: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 51487 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c947: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiod", DIS_EADDR32, DIS_I8);


#line 51505 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c948: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiod", DIS_EADDR32, DIS_I8);


#line 51523 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c949: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiod", DIS_EADDR32, DIS_I8);


#line 51541 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c950: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1331 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTiod", DIS_EADDR32, DIS_I8);


#line 51559 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c951: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiod", DIS_I8, DIS_EADDR32);


#line 51577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c952: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiod", DIS_I8, DIS_EADDR32);


#line 51595 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c953: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiod", DIS_I8, DIS_EADDR32);


#line 51613 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c954: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1295 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTSiod", DIS_I8, DIS_EADDR32);


#line 51631 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c955: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiod", DIS_EADDR32, DIS_I8);


#line 51649 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c956: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiod", DIS_EADDR32, DIS_I8);


#line 51667 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c957: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiod", DIS_EADDR32, DIS_I8);


#line 51685 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c958: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1307 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTRiod", DIS_EADDR32, DIS_I8);


#line 51703 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c959: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiod", DIS_EADDR32, DIS_I8);


#line 51721 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c960: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiod", DIS_EADDR32, DIS_I8);


#line 51739 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c961: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiod", DIS_EADDR32, DIS_I8);


#line 51757 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c962: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1319 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCiod", DIS_EADDR32, DIS_I8);


#line 51775 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c963: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCod", DIS_EADDR32, DIS_REG32);


#line 51792 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c964: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCod", DIS_EADDR32, DIS_REG32);


#line 51809 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c965: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCod", DIS_EADDR32, DIS_REG32);


#line 51826 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c966: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1325 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "BTCod", DIS_EADDR32, DIS_REG32);


#line 51843 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c967: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1354 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 51861 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c968: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1354 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 51879 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c969: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1354 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 51897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c970: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1354 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSFod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC - pc);


#line 51915 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c971: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1346 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 51933 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c972: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1346 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 51951 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c973: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1346 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 51969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c974: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1346 "machine/pentium/decoder.m"

		//result.rtl = instantiate(pc, "BSRod", DIS_REG32, DIS_EADDR32);
		return genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC - pc);


#line 51987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c975: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 52004 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c976: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 52021 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c977: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 52038 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c978: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 943 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);


#line 52055 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c979: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 52072 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c980: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 52089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c981: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 52106 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c982: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 940 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);


#line 52123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c983: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 52140 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c984: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 52157 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c985: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 52174 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c986: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 360 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);


#line 52191 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c987: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 52208 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c988: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 52225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c989: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 52242 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c990: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 354 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);


#line 52259 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c991: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG8B", DIS_MEM);


#line 52275 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c992: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG8B", DIS_MEM);


#line 52291 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c993: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1229 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPXCHG8B", DIS_MEM);


#line 52307 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c994: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrb", DIS_EADDR8, DIS_R8);


#line 52324 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c995: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrb", DIS_EADDR8, DIS_R8);


#line 52341 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c996: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrb", DIS_EADDR8, DIS_R8);


#line 52358 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c997: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1517 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrb", DIS_EADDR8, DIS_R8);


#line 52375 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c998: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrod", DIS_EADDR32, DIS_REG32);


#line 52392 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c999: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrod", DIS_EADDR32, DIS_REG32);


#line 52409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1000: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrod", DIS_EADDR32, DIS_REG32);


#line 52426 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1001: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1481 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBmrod", DIS_EADDR32, DIS_REG32);


#line 52443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1002: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmb", DIS_R8, DIS_EADDR8);


#line 52460 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1003: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmb", DIS_R8, DIS_EADDR8);


#line 52477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1004: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmb", DIS_R8, DIS_EADDR8);


#line 52494 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1005: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1445 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmb", DIS_R8, DIS_EADDR8);


#line 52511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1006: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmod", DIS_REG32, DIS_EADDR32);


#line 52528 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1007: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmod", DIS_REG32, DIS_EADDR32);


#line 52545 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1008: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmod", DIS_REG32, DIS_EADDR32);


#line 52562 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1009: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1409 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SBBrmod", DIS_REG32, DIS_EADDR32);


#line 52579 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1010: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrb", DIS_EADDR8, DIS_R8);


#line 52596 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1011: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrb", DIS_EADDR8, DIS_R8);


#line 52613 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1012: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrb", DIS_EADDR8, DIS_R8);


#line 52630 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1013: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1511 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrb", DIS_EADDR8, DIS_R8);


#line 52647 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1014: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrod", DIS_EADDR32, DIS_REG32);


#line 52664 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1015: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrod", DIS_EADDR32, DIS_REG32);


#line 52681 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1016: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrod", DIS_EADDR32, DIS_REG32);


#line 52698 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1017: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1469 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBmrod", DIS_EADDR32, DIS_REG32);


#line 52715 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1018: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmb", DIS_R8, DIS_EADDR8);


#line 52732 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1019: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmb", DIS_R8, DIS_EADDR8);


#line 52749 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1020: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmb", DIS_R8, DIS_EADDR8);


#line 52766 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1021: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1439 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmb", DIS_R8, DIS_EADDR8);


#line 52783 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1022: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmod", DIS_REG32, DIS_EADDR32);


#line 52800 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1023: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmod", DIS_REG32, DIS_EADDR32);


#line 52817 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1024: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmod", DIS_REG32, DIS_EADDR32);


#line 52834 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1025: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1397 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "SUBrmod", DIS_REG32, DIS_EADDR32);


#line 52851 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1026: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrb", DIS_EADDR8, DIS_R8);


#line 52868 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1027: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrb", DIS_EADDR8, DIS_R8);


#line 52885 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1028: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrb", DIS_EADDR8, DIS_R8);


#line 52902 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1029: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1505 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrb", DIS_EADDR8, DIS_R8);


#line 52919 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1030: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrod", DIS_EADDR32, DIS_REG32);


#line 52936 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1031: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrod", DIS_EADDR32, DIS_REG32);


#line 52953 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1032: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrod", DIS_EADDR32, DIS_REG32);


#line 52970 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1033: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1457 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPmrod", DIS_EADDR32, DIS_REG32);


#line 52987 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1034: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmb", DIS_R8, DIS_EADDR8);


#line 53004 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1035: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmb", DIS_R8, DIS_EADDR8);


#line 53021 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1036: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmb", DIS_R8, DIS_EADDR8);


#line 53038 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1037: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1433 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmb", DIS_R8, DIS_EADDR8);


#line 53055 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1038: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmod", DIS_REG32, DIS_EADDR32);


#line 53072 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1039: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmod", DIS_REG32, DIS_EADDR32);


#line 53089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1040: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmod", DIS_REG32, DIS_EADDR32);


#line 53106 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1041: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1385 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "CMPrmod", DIS_REG32, DIS_EADDR32);


#line 53123 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1042: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);


#line 53141 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1043: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);


#line 53159 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1044: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 11 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);


#line 53177 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1045: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 10 + MATCH_p; 
      
#line 1148 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);


#line 53195 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1046: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);


#line 53214 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1047: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 4 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);


#line 53233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1048: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 8 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);


#line 53252 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1049: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1154 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);


#line 53271 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1050: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrb", DIS_EADDR8, DIS_REG8);


#line 53288 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1051: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrb", DIS_EADDR8, DIS_REG8);


#line 53305 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1052: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrb", DIS_EADDR8, DIS_REG8);


#line 53322 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1053: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1031 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrb", DIS_EADDR8, DIS_REG8);


#line 53339 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1054: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrod", DIS_EADDR32, DIS_REG32);


#line 53356 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1055: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrod", DIS_EADDR32, DIS_REG32);


#line 53373 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1056: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrod", DIS_EADDR32, DIS_REG32);


#line 53390 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1057: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1025 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVmrod", DIS_EADDR32, DIS_REG32);


#line 53407 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1058: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmb", DIS_REG8, DIS_EADDR8);


#line 53424 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1059: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmb", DIS_REG8, DIS_EADDR8);


#line 53441 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1060: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmb", DIS_REG8, DIS_EADDR8);


#line 53458 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1061: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1022 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmb", DIS_REG8, DIS_EADDR8);


#line 53475 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1062: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmod", DIS_REG32, DIS_EADDR32);


#line 53492 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1063: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmod", DIS_REG32, DIS_EADDR32);


#line 53509 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1064: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmod", DIS_REG32, DIS_EADDR32);


#line 53526 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1065: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1016 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "MOVrmod", DIS_REG32, DIS_EADDR32);


#line 53543 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1066: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.od", DIS_REG32, DIS_MEM);


#line 53560 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1067: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.od", DIS_REG32, DIS_MEM);


#line 53577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1068: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1067 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "LEA.od", DIS_REG32, DIS_MEM);


#line 53594 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1069: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 871 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evod", DIS_EADDR32);


#line 53610 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1070: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 871 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evod", DIS_EADDR32);


#line 53626 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1071: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 871 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evod", DIS_EADDR32);


#line 53642 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1072: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 871 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "POP.Evod", DIS_EADDR32);


#line 53658 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1073: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R32", DIS_MEM32);


#line 53674 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1074: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R32", DIS_MEM32);


#line 53690 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1075: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1740 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R32", DIS_MEM32);


#line 53706 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1076: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R32", DIS_MEM32);


#line 53722 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1077: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R32", DIS_MEM32);


#line 53738 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1078: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1934 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R32", DIS_MEM32);


#line 53754 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1079: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R32", DIS_MEM32);


#line 53770 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1080: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R32", DIS_MEM32);


#line 53786 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1081: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1773 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R32", DIS_MEM32);


#line 53802 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1082: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R32", DIS_MEM32);


#line 53818 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1083: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R32", DIS_MEM32);


#line 53834 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1084: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1785 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R32", DIS_MEM32);


#line 53850 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1085: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R32", DIS_MEM32);


#line 53866 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1086: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R32", DIS_MEM32);


#line 53882 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1087: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2024 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R32", DIS_MEM32);


#line 53898 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1088: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R32", DIS_MEM32);


#line 53914 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1089: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R32", DIS_MEM32);


#line 53930 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1090: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2045 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R32", DIS_MEM32);


#line 53946 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1091: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R32", DIS_MEM32);


#line 53962 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1092: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R32", DIS_MEM32);


#line 53978 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1093: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1818 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R32", DIS_MEM32);


#line 53994 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1094: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R32", DIS_MEM32);


#line 54010 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1095: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R32", DIS_MEM32);


#line 54026 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1096: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1839 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R32", DIS_MEM32);


#line 54042 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1097: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1890 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR32", DIS_MEM32);


#line 54058 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1098: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1890 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR32", DIS_MEM32);


#line 54074 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1099: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1890 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR32", DIS_MEM32);


#line 54090 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1100: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR32", DIS_MEM32);


#line 54106 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1101: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR32", DIS_MEM32);


#line 54122 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1102: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1991 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR32", DIS_MEM32);


#line 54138 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1103: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR32", DIS_MEM32);


#line 54154 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1104: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR32", DIS_MEM32);


#line 54170 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1105: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1997 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR32", DIS_MEM32);


#line 54186 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1106: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDENV", DIS_MEM);


#line 54202 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1107: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDENV", DIS_MEM);


#line 54218 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1108: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1931 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDENV", DIS_MEM);


#line 54234 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1109: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDCW", DIS_MEM16);


#line 54250 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1110: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDCW", DIS_MEM16);


#line 54266 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1111: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1928 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLDCW", DIS_MEM16);


#line 54282 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1112: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTENV", DIS_MEM);


#line 54298 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1113: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTENV", DIS_MEM);


#line 54314 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1114: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2015 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTENV", DIS_MEM);


#line 54330 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1115: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTCW", DIS_MEM16);


#line 54346 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1116: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTCW", DIS_MEM16);


#line 54362 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1117: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2012 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTCW", DIS_MEM16);


#line 54378 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1118: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I32", DIS_MEM32);


#line 54394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1119: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I32", DIS_MEM32);


#line 54410 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1120: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1755 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I32", DIS_MEM32);


#line 54426 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1121: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I32", DIS_MEM32);


#line 54442 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1122: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I32", DIS_MEM32);


#line 54458 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1123: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1949 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I32", DIS_MEM32);


#line 54474 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1124: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I32", DIS_MEM32);


#line 54490 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1125: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I32", DIS_MEM32);


#line 54506 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1126: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1779 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I32", DIS_MEM32);


#line 54522 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1127: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I32", DIS_MEM32);


#line 54538 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1128: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I32", DIS_MEM32);


#line 54554 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1129: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1797 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I32", DIS_MEM32);


#line 54570 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1130: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I32", DIS_MEM32);


#line 54586 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1131: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I32", DIS_MEM32);


#line 54602 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1132: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2036 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I32", DIS_MEM32);


#line 54618 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1133: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I32", DIS_MEM32);


#line 54634 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1134: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I32", DIS_MEM32);


#line 54650 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1135: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2057 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I32", DIS_MEM32);


#line 54666 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1136: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I32", DIS_MEM32);


#line 54682 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1137: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I32", DIS_MEM32);


#line 54698 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1138: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1833 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I32", DIS_MEM32);


#line 54714 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1139: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I32", DIS_MEM32);


#line 54730 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1140: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I32", DIS_MEM32);


#line 54746 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1141: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1851 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I32", DIS_MEM32);


#line 54762 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1142: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI32", DIS_MEM32);


#line 54778 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1143: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI32", DIS_MEM32);


#line 54794 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1144: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1866 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI32", DIS_MEM32);


#line 54810 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1878 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI32", DIS_MEM32);


#line 54826 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1878 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI32", DIS_MEM32);


#line 54842 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1878 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI32", DIS_MEM32);


#line 54858 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1884 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI32", DIS_MEM32);


#line 54874 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1884 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI32", DIS_MEM32);


#line 54890 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1884 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI32", DIS_MEM32);


#line 54906 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1896 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD80", DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 54927 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1896 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD80", DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 54948 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1153: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1896 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD80", DIS_MEM80);

/* This is a bit tricky. The FPUSH logically comes between the read of STi and
 * the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.
 * This problem only happens with this load instruction, so there is a work
 * around here that gives us the SSL a value of i that is one more than in
 * the instruction */

#line 54969 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1154: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP80", DIS_MEM80);


#line 54985 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1155: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP80", DIS_MEM80);


#line 55001 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1156: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2003 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP80", DIS_MEM80);


#line 55017 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1157: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R64", DIS_MEM64);


#line 55033 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1158: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R64", DIS_MEM64);


#line 55049 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1159: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1743 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FADD.R64", DIS_MEM64);


#line 55065 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1160: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R64", DIS_MEM64);


#line 55081 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1161: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R64", DIS_MEM64);


#line 55097 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1162: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1937 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FMUL.R64", DIS_MEM64);


#line 55113 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1163: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R64", DIS_MEM64);


#line 55129 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1164: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R64", DIS_MEM64);


#line 55145 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1165: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1776 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOM.R64", DIS_MEM64);


#line 55161 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1166: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R64", DIS_MEM64);


#line 55177 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1167: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R64", DIS_MEM64);


#line 55193 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1168: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1788 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FCOMP.R64", DIS_MEM64);


#line 55209 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1169: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R64", DIS_MEM64);


#line 55225 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1170: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R64", DIS_MEM64);


#line 55241 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1171: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2027 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUB.R64", DIS_MEM64);


#line 55257 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1172: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R64", DIS_MEM64);


#line 55273 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1173: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R64", DIS_MEM64);


#line 55289 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1174: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2048 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSUBR.R64", DIS_MEM64);


#line 55305 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1175: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R64", DIS_MEM64);


#line 55321 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1176: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R64", DIS_MEM64);


#line 55337 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1177: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1821 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIV.R64", DIS_MEM64);


#line 55353 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1178: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R64", DIS_MEM64);


#line 55369 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1179: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R64", DIS_MEM64);


#line 55385 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1180: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1842 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FDIVR.R64", DIS_MEM64);


#line 55401 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1181: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1893 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR64", DIS_MEM64);


#line 55417 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1182: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1893 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR64", DIS_MEM64);


#line 55433 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1183: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1893 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FLD.lsR64", DIS_MEM64);


#line 55449 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1184: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR64", DIS_MEM64);


#line 55465 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1185: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR64", DIS_MEM64);


#line 55481 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1186: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1994 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FST.lsR64", DIS_MEM64);


#line 55497 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1187: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR64", DIS_MEM64);


#line 55513 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1188: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR64", DIS_MEM64);


#line 55529 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1189: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2000 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTP.lsR64", DIS_MEM64);


#line 55545 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1190: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRSTOR", DIS_MEM);


#line 55561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1191: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRSTOR", DIS_MEM);


#line 55577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1192: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1973 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FRSTOR", DIS_MEM);


#line 55593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1193: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNSAVE", DIS_MEM);


#line 55609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1194: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNSAVE", DIS_MEM);


#line 55625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1195: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1976 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FNSAVE", DIS_MEM);


#line 55641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1196: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW", DIS_MEM16);


#line 55657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1197: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW", DIS_MEM16);


#line 55673 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1198: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2018 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FSTSW", DIS_MEM16);


#line 55689 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1199: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I16", DIS_MEM16);


#line 55705 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1200: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I16", DIS_MEM16);


#line 55721 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1201: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1758 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIADD.I16", DIS_MEM16);


#line 55737 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1202: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I16", DIS_MEM16);


#line 55753 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1203: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I16", DIS_MEM16);


#line 55769 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1204: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1952 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIMUL.I16", DIS_MEM16);


#line 55785 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1205: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I16", DIS_MEM16);


#line 55801 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1206: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I16", DIS_MEM16);


#line 55817 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1207: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1782 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOM.I16", DIS_MEM16);


#line 55833 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1208: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I16", DIS_MEM16);


#line 55849 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1209: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I16", DIS_MEM16);


#line 55865 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1210: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1800 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FICOMP.I16", DIS_MEM16);


#line 55881 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1211: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I16", DIS_MEM16);


#line 55897 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1212: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I16", DIS_MEM16);


#line 55913 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1213: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2039 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUB.I16", DIS_MEM16);


#line 55929 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1214: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I16", DIS_MEM16);


#line 55945 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1215: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I16", DIS_MEM16);


#line 55961 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1216: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2060 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISUBR.I16", DIS_MEM16);


#line 55977 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1217: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I16", DIS_MEM16);


#line 55993 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1218: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I16", DIS_MEM16);


#line 56009 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1219: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1836 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIV.I16", DIS_MEM16);


#line 56025 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1220: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I16", DIS_MEM16);


#line 56041 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1221: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I16", DIS_MEM16);


#line 56057 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1222: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1854 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIDIVR.I16", DIS_MEM16);


#line 56073 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1223: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI16", DIS_MEM16);


#line 56089 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1224: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI16", DIS_MEM16);


#line 56105 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1225: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1863 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI16", DIS_MEM16);


#line 56121 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1226: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI16", DIS_MEM16);


#line 56137 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1227: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI16", DIS_MEM16);


#line 56153 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1228: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1875 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FIST.lsI16", DIS_MEM16);


#line 56169 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1229: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1881 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI16", DIS_MEM16);


#line 56185 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1230: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1881 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI16", DIS_MEM16);


#line 56201 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1231: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1881 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP.lsI16", DIS_MEM16);


#line 56217 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1232: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBLD", DIS_MEM80);


#line 56233 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1233: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBLD", DIS_MEM80);


#line 56249 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1234: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1761 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBLD", DIS_MEM80);


#line 56265 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1235: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI64", DIS_MEM64);


#line 56281 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1236: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI64", DIS_MEM64);


#line 56297 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1237: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1869 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FILD.lsI64", DIS_MEM64);


#line 56313 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1238: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBSTP", DIS_MEM80);


#line 56329 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1239: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBSTP", DIS_MEM80);


#line 56345 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1240: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1764 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FBSTP", DIS_MEM80);


#line 56361 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1241: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1887 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP64", DIS_MEM64);


#line 56377 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1242: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1887 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP64", DIS_MEM64);


#line 56393 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1243: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1887 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "FISTP64", DIS_MEM64);


#line 56409 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1244: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Eb", DIS_EADDR8);

//	| IN.eAX.DXod() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXod");

//	| IN.eAX.DXow() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXow");

//	| IN.AL.DX() =>
//		result.rtl = instantiate(pc, "IN.AL.DX");

//	| IN.eAX.Ibod(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibod", DIS_I8);

//	| IN.eAX.Ibow(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibow", DIS_I8);

//	| IN.AL.Ib(i8) =>
//		result.rtl = instantiate(pc, "IN.AL.Ib", DIS_I8);


#line 56443 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1245: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Eb", DIS_EADDR8);

//	| IN.eAX.DXod() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXod");

//	| IN.eAX.DXow() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXow");

//	| IN.AL.DX() =>
//		result.rtl = instantiate(pc, "IN.AL.DX");

//	| IN.eAX.Ibod(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibod", DIS_I8);

//	| IN.eAX.Ibow(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibow", DIS_I8);

//	| IN.AL.Ib(i8) =>
//		result.rtl = instantiate(pc, "IN.AL.Ib", DIS_I8);


#line 56477 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1246: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Eb", DIS_EADDR8);

//	| IN.eAX.DXod() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXod");

//	| IN.eAX.DXow() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXow");

//	| IN.AL.DX() =>
//		result.rtl = instantiate(pc, "IN.AL.DX");

//	| IN.eAX.Ibod(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibod", DIS_I8);

//	| IN.eAX.Ibow(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibow", DIS_I8);

//	| IN.AL.Ib(i8) =>
//		result.rtl = instantiate(pc, "IN.AL.Ib", DIS_I8);


#line 56511 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1247: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1127 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Eb", DIS_EADDR8);

//	| IN.eAX.DXod() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXod");

//	| IN.eAX.DXow() =>
//		result.rtl = instantiate(pc, "IN.eAX.DXow");

//	| IN.AL.DX() =>
//		result.rtl = instantiate(pc, "IN.AL.DX");

//	| IN.eAX.Ibod(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibod", DIS_I8);

//	| IN.eAX.Ibow(i8) =>
//		result.rtl = instantiate(pc, "IN.eAX.Ibow", DIS_I8);

//	| IN.AL.Ib(i8) =>
//		result.rtl = instantiate(pc, "IN.AL.Ib", DIS_I8);


#line 56545 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1248: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Eb", DIS_EADDR8);


#line 56561 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1249: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Eb", DIS_EADDR8);


#line 56577 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1250: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Eb", DIS_EADDR8);


#line 56593 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1251: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1211 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Eb", DIS_EADDR8);


#line 56609 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1252: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1121 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evod", DIS_EADDR32);


#line 56625 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1253: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1121 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evod", DIS_EADDR32);


#line 56641 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1254: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1121 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evod", DIS_EADDR32);


#line 56657 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1255: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1121 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "INC.Evod", DIS_EADDR32);


#line 56673 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1256: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evod", DIS_EADDR32);


#line 56689 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1257: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evod", DIS_EADDR32);


#line 56705 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1258: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evod", DIS_EADDR32);


#line 56721 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1259: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1205 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "DEC.Evod", DIS_EADDR32);


#line 56737 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1260: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, "CALL.Evod", DIS_EADDR32);
		auto newCall = new CallStatement;
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		// Set the destination expression
		newCall->setDest(DIS_EADDR32);
		result.rtl->appendStmt(newCall);


#line 56763 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1261: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, "CALL.Evod", DIS_EADDR32);
		auto newCall = new CallStatement;
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		// Set the destination expression
		newCall->setDest(DIS_EADDR32);
		result.rtl->appendStmt(newCall);


#line 56789 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1262: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, "CALL.Evod", DIS_EADDR32);
		auto newCall = new CallStatement;
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		// Set the destination expression
		newCall->setDest(DIS_EADDR32);
		result.rtl->appendStmt(newCall);


#line 56815 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1263: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 124 "machine/pentium/decoder.m"

		/*
		 * Register call
		 */
		// Mike: there should probably be a HLNwayCall class for this!
		result.rtl = instantiate(pc, "CALL.Evod", DIS_EADDR32);
		auto newCall = new CallStatement;
		// Record the fact that this is a computed call
		newCall->setIsComputed();
		// Set the destination expression
		newCall->setDest(DIS_EADDR32);
		result.rtl->appendStmt(newCall);


#line 56841 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1264: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 137 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement;
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		// Set the destination expression
		newJump->setDest(DIS_EADDR32);
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 56868 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1265: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 137 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement;
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		// Set the destination expression
		newJump->setDest(DIS_EADDR32);
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 56895 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1266: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 137 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement;
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		// Set the destination expression
		newJump->setDest(DIS_EADDR32);
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 56922 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1267: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 137 "machine/pentium/decoder.m"

		/*
		 * Register jump
		 */
		auto newJump = new CaseStatement;
		// Record the fact that this is a computed call
		newJump->setIsComputed();
		// Set the destination expression
		newJump->setDest(DIS_EADDR32);
		result.rtl = new RTL(pc, newJump);

	/*
	 * Unconditional branches
	 */

#line 56949 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1268: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evod", DIS_EADDR32);


#line 56965 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1269: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evod", DIS_EADDR32);


#line 56981 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1270: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evod", DIS_EADDR32);


#line 56997 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1271: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 832 "machine/pentium/decoder.m"

		result.rtl = instantiate(pc, "PUSH.Evod", DIS_EADDR32);


#line 57013 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_c; 
    
  MATCH_finished_c: (void)0; /*placeholder for label*/
  
}
#line 57022 "pentiumdecoder.cpp"

#line 2102 "machine/pentium/decoder.m"

	if (result.valid && !result.rtl)
		result.rtl = new RTL(pc);  // FIXME:  Why return an empty RTL?
	result.numBytes = nextPC - pc;
	return result;
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. [1000] --> m[, 1000
 *
 * \param pc    The address of the Eaddr part of the instr.
 * \param expr  The expression that will be built.
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Mem(ADDRESS pc, const BinaryFile *bf)
{
	Exp *expr = nullptr;
	lastDwordLc = (unsigned)-1;


#line 57048 "pentiumdecoder.cpp"

#line 2124 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2124 "machine/pentium/decoder.m"
pc
#line 57056 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned MATCH_w_32_16;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    
      switch((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */) {
        case 0: 
          
            switch((MATCH_w_8_0 & 0x7) /* r_m at 0 */) {
              case 0: case 1: case 2: case 3: case 6: case 7: 
                { 
                  unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
                  
#line 2178 "machine/pentium/decoder.m"

		// m[ r[base] ]
		expr = Location::memOf(dis_Reg(24 + base));

#line 57079 "pentiumdecoder.cpp"

                  
                }
                
                break;
              case 4: 
                MATCH_w_8_8 = fetch8(1 + MATCH_p); 
                if ((MATCH_w_8_8 & 0x7) /* base at 8 */ == 5) 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      
#line 2188 "machine/pentium/decoder.m"

		// [d] (Same as Abs32 using SIB)
		expr = Location::memOf(addReloc(new Const(d)));

#line 57098 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/
                  else { 
                    MATCH_w_32_16 = fetch32(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      unsigned index = 
                        (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                      unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                      
#line 2181 "machine/pentium/decoder.m"

		// m[ r[index] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  new Binary(opMult,
		                                             dis_Reg(24 + index),
		                                             new Const(1 << ss)),
		                                  addReloc(new Const(d))));

#line 57121 "pentiumdecoder.cpp"

                      
                    }
                    
                  } /*opt-block*/ /*opt-block+*/
                else 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    
#line 2145 "machine/pentium/decoder.m"

		// m[ r[base] ]
		expr = Location::memOf(dis_Reg(24 + base));

#line 57136 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/
                  else { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    unsigned index = 
                      (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                    unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                    
#line 2138 "machine/pentium/decoder.m"

		// m[ r[base] + r[index] * ss]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opMult,
		                                             dis_Reg(24 + index),
		                                             new Const(1 << ss))));

#line 57155 "pentiumdecoder.cpp"

                    
                  } /*opt-block*//*opt-block+*/ /*opt-block+*/
                
                break;
              case 5: 
                MATCH_w_32_8 = fetch32(1 + MATCH_p); 
                { 
                  unsigned a = MATCH_w_32_8 /* i32 at 8 */;
                  
#line 2125 "machine/pentium/decoder.m"

		// [a]
		expr = Location::memOf(addReloc(new Const(a)));

#line 57171 "pentiumdecoder.cpp"

                  
                }
                
                break;
              default: assert(0);
            } /* (MATCH_w_8_0 & 0x7) -- r_m at 0 --*/ 
          break;
        case 1: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
                
#line 2171 "machine/pentium/decoder.m"

		// m[ r[ base] + d ]
		// Note: d should be sign extended; we do it here manually
		signed char ds8 = d;
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Const(ds8)));

#line 57198 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_8_16 = fetch8(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                int /* [~128..127] */ d = 
                  sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2162 "machine/pentium/decoder.m"

		// m[ r[ base ] + r[ index ] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opPlus,
		                                             new Binary(opMult,
		                                                        dis_Reg(24 + index),
		                                                        new Const(1 << ss)),
		                                             addReloc(new Const(d)))));

#line 57224 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            { 
              int /* [~128..127] */ d = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              
#line 2133 "machine/pentium/decoder.m"

		// m[ r[ r32] + d]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + r32),
		                                  addReloc(new Const(d))));

#line 57246 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 2: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = fetch8(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                
#line 2157 "machine/pentium/decoder.m"

		// m[ r[ base] + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  addReloc(new Const(d))));

#line 57269 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_32_16 = fetch32(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2148 "machine/pentium/decoder.m"

		// m[ r[ base ] + r[ index ] * ss + d ]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  new Binary(opPlus,
		                                             new Binary(opMult,
		                                                        dis_Reg(24 + index),
		                                                        new Const(1 << ss)),
		                                             addReloc(new Const(d)))));

#line 57294 "pentiumdecoder.cpp"

                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_32_8 = fetch32(1 + MATCH_p); 
            { 
              unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              unsigned d = MATCH_w_32_8 /* i32 at 8 */;
              
#line 2128 "machine/pentium/decoder.m"

		// m[ r[ base] + d]
		expr = Location::memOf(new Binary(opPlus,
		                                  dis_Reg(24 + base),
		                                  addReloc(new Const(d))));

#line 57315 "pentiumdecoder.cpp"

              
            }
            
          } /*opt-block*/
          break;
        case 3: 
          assert(0);  /* no match */break;
        default: assert(0);
      } /* (MATCH_w_8_0 >> 6 & 0x3) -- mod at 0 --*/ 
    
  }goto MATCH_finished_b; 
  
  MATCH_finished_b: (void)0; /*placeholder for label*/
  
}
#line 57332 "pentiumdecoder.cpp"

#line 2192 "machine/pentium/decoder.m"
	return expr;
}

/**
 * Converts a dynamic address to a Exp* expression.
 * E.g. %ecx --> r[ 25 ]
 *
 * \param pc    The instruction stream address of the dynamic address.
 * \param size  Size of the operand (important if a register).
 *
 * \returns  The Exp* representation of the given Eaddr.
 */
Exp *
PentiumDecoder::dis_Eaddr(ADDRESS pc, const BinaryFile *bf, int size)
{

#line 57351 "pentiumdecoder.cpp"

#line 2207 "machine/pentium/decoder.m"
{ 
  ADDRESS MATCH_p = 
    
#line 2207 "machine/pentium/decoder.m"
pc
#line 57359 "pentiumdecoder.cpp"
;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  { 
    MATCH_w_8_0 = fetch8(MATCH_p); 
    if ((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */ == 3) { 
      unsigned reg = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
      
#line 2210 "machine/pentium/decoder.m"

		switch (size) {
		case  8: return DIS_REG8;
		case 16: return DIS_REG16;
		default:
		case 32: return DIS_REG32;
		}

#line 57377 "pentiumdecoder.cpp"

      
    } /*opt-block*//*opt-block+*/
    else 
      goto MATCH_label_a0;  /*opt-block+*/
    
  }goto MATCH_finished_a; 
  
  MATCH_label_a0: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = addressToPC(MATCH_p);
      
#line 2208 "machine/pentium/decoder.m"

		return DIS_MEM;

#line 57394 "pentiumdecoder.cpp"

      
    } 
    goto MATCH_finished_a; 
    
  MATCH_finished_a: (void)0; /*placeholder for label*/
  
}
#line 57403 "pentiumdecoder.cpp"

#line 2218 "machine/pentium/decoder.m"
}

#if 0 // Cruft?
/**
 * Check to see if the instructions at the given offset match any callee
 * prologue, i.e. does it look like this offset is a pointer to a function?
 *
 * \param hostPC  Pointer to the code in question (native address).
 * \returns       True if a match found.
 */
bool
PentiumDecoder::isFuncPrologue(ADDRESS hostPC)
{
#if 0
	int locals, regs;
	if (InstructionPatterns::frameless_pro(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::struct_ptr(prog.csrSrc, hostPC, locals, regs))
		return true;
	if (InstructionPatterns::std_entry(prog.csrSrc, hostPC, locals, regs))
		return true;
#endif
	return false;
}
#endif

static int BSFRstate = 0;  // State number for this state machine

/**
 * Generates statements for the BSF and BSR series (Bit Scan Forward/Reverse).
 *
 * \param pc        Native PC address (start of the BSF/BSR instruction).
 * \param reg       An expression for the destination register.
 * \param modrm     An expression for the operand being scanned.
 * \param init      Initial value for the dest register.
 * \param size      sizeof(modrm) (in bits).
 * \param incdec    Either opPlus for Forward scans,
 *                  or opMinus for Reverse scans.
 * \param numBytes  Number of bytes this instruction.
 *
 * \returns  true if have to exit early (not in last state).
 */
static DecodeResult &
genBSFR(ADDRESS pc, Exp *dest, Exp *modrm, int init, int size, OPER incdec, int numBytes)
{
	// Note the horrible hack needed here. We need initialisation code, and an extra branch, so the %SKIP/%RPT won't
	// work. We need to emit 6 statements, but these need to be in 3 RTLs, since the destination of a branch has to be
	// to the start of an RTL.  So we use a state machine, and set numBytes to 0 for the first two times. That way, this
	// instruction ends up emitting three RTLs, each with the semantics we need.
	// Note: we don't use pentium.SSL for these.
	// BSFR1:
	//  pc+0:   zf := 1
	//  pc+0:   branch exit condition modrm = 0
	// BSFR2:
	//  pc+1:   zf := 0
	//  pc+1:   dest := init
	// BSFR3:
	//  pc+2: dest := dest op 1
	//  pc+2: branch pc+2 condition modrm@[dest:dest]=0
	// exit:

	auto stmts = std::list<Statement *>();
	Statement *s;
	BranchStatement *b;
	switch (BSFRstate) {
	case 0:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(1));
		stmts.push_back(s);
		b = new BranchStatement;
		b->setDest(pc + numBytes);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEquals,
		                          modrm->clone(),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	case 1:
		s = new Assign(new IntegerType(1),
		               new Terminal(opZF),
		               new Const(0));
		stmts.push_back(s);
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Const(init));
		stmts.push_back(s);
		break;
	case 2:
		s = new Assign(new IntegerType(size),
		               dest->clone(),
		               new Binary(incdec,
		                          dest->clone(),
		                          new Const(1)));
		stmts.push_back(s);
		b = new BranchStatement;
		b->setDest(pc + 2);
		b->setCondType(BRANCH_JE);
		b->setCondExpr(new Binary(opEquals,
		                          new Ternary(opAt,
		                                      modrm->clone(),
		                                      dest->clone(),
		                                      dest->clone()),
		                          new Const(0)));
		stmts.push_back(b);
		break;
	default:
		// Should never happen
		assert(BSFRstate - BSFRstate);
	}
	result.rtl = new RTL(pc + BSFRstate);
	result.rtl->append(stmts);
	// Keep numBytes == 0 until the last state, so we re-decode this instruction 3 times
	if (BSFRstate != 3 - 1) {
		// Let the number of bytes be 1. This is important at least for setting the fallthrough address for the branch
		// (in the first RTL), which should point to the next RTL
		result.numBytes = 1;
		result.reDecode = true;  // Decode this instruction again
	} else {
		result.numBytes = numBytes;
		result.reDecode = false;
	}
	if (DEBUG_DECODER)
		std::cout << std::hex << pc+BSFRstate << std::dec << ": "
		          << "BS" << (init == -1 ? "F" : "R") << (size == 32 ? ".od" : ".ow")
		          << BSFRstate + 1 << "\n";
	if (++BSFRstate == 3)
		BSFRstate = 0;  // Ready for next time
	return result;
}

Exp *
PentiumDecoder::addReloc(Exp *e)
{
	if (lastDwordLc != (unsigned)-1)
		e = prog->addReloc(e, lastDwordLc);
	return e;
}

#line 57545 "pentiumdecoder.cpp"

