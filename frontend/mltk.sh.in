#!/bin/sh
#
# This script is a wrapper to simplify generating decoders from .spec files
# and a .m file.
#
# Copyright (C) 2000-2001, The University of Queensland
# Copyright (C) 2000, Sun Microsystems, Inc
# Copyright (C) 2017, Kyle Guinn
#
# See the file "LICENSE.TERMS" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.


# These 2 tools are configured (see configure.ac)
SML_TOOLKIT=@SML_TOOLKIT@
UNGENERATE=@UNGENERATE@

usage () {
	echo "usage: $0 matcher-file [-o output.cpp] [spec-files]"
	exit 2
}

# Determine matcher filename.
if [ $# -lt 1 ]; then
	usage
fi
MATCHER="$1"
shift

# Determine output filename.
if [ $# -eq 1 -a "$1" = "-o" ]; then
	usage
elif [ $# -ge 2 -a "$1" = "-o" ]; then
	OUTPUT="$2"
	shift 2
else
	# Derive the output filename from the matcher.
	OUTPUT="$(dirname "${MATCHER}")/$(basename "${MATCHER}" .m).cpp"
fi

# Remove old output files, in case generating a new one fails.
if [ -f "${MATCHER}.d" ]; then
	rm "${MATCHER}.d"
fi
if [ -f "${OUTPUT}" ]; then
	rm "${OUTPUT}"
fi

# Build the list of spec files.
SPECS=
if [ $# -gt 0 ]; then
	SPECS="\"$1\""
	shift
fi
while [ $# -gt 0 ]; do
	SPECS="${SPECS}, \"$1\""
	shift
done

# Run the toolkit.
# See usercode.nw in the toolkit sources for more example templates.
#
# Norman wrote some 32 bit code for us, at great time expense to him, but
# unfortunately, this seems to cause a memory explosion. The versions from
# 4th Aug onwards have this problem. So for now, we use the 1st Aug version,
# which doesn't have the 32 bit fixes, and we turn off the field fusion
# optimisations (so it doesn't need the 32 bit code to match single sparc
# return instructions, for example).
eval "${SML_TOOLKIT}" <<EOF
	structure Frontend = struct
		structure Exp = Main.Exp
		structure Code = Main.Code
		fun call(f, args) = Code.EVAL (Exp.call (Exp.var f :: args))
		val templates =
			{ addressAdd = fn {address, pcUnits} => Exp.add(address, Exp.const pcUnits)
			, addressToPC = fn x => Exp.call [Exp.var "addressToPC", x]
			, addressType = Type.VAR {interface=NONE, name="dword"}
			, fetch = fn {address, width} =>
				let val rtn = case width
					of 8 => "getByte"
					| 16 => "getWord"
					| 32 => "getDword"
					| _  => Impossible.impossible ("width = " ^ Int.toString width)
				in  Exp.call [Exp.var rtn, address]
				end
			, noMatch = Code.COMMENTED_STMT (call ("assert", [Exp.false']), "no match")
			}
		fun matcher x = Main.matcher' templates true x
	end

	val _ = GlobalState.Match.fuse := false;
	val d = Frontend.matcher[${SPECS}];
	d "${MATCHER}";
EOF
if [ ! -f "${MATCHER}.d" ]; then
	exit 1;
fi

mv "${MATCHER}.d" "${OUTPUT}"
${UNGENERATE} "${OUTPUT}"
