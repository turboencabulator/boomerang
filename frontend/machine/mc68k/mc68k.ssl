#
# Copyright (C) 2000, Sun Microsystems, Inc
# Copyright (C) 2000, The University of Queensland
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.

ENDIANNESS BIG;

SP := 15;

INTEGER
	%d0[32] -> 0,
	%d1[32] -> 1,
	%d2[32] -> 2,
	%d3[32] -> 3,
	%d4[32] -> 4,
	%d5[32] -> 5,
	%d6[32] -> 6,
	%d7[32] -> 7,
	%a0[32] -> 8,
	%a1[32] -> 9,
	%a2[32] -> 10,
	%a3[32] -> 11,
	%a4[32] -> 12,
	%a5[32] -> 13,
	%a6[32] -> 14,
	%a7[32] -> 15,
	%pc[32] -> -1,
	%CF [1] -> -1,
	%ZF [1] -> -1,
	%NF [1] -> -1,
	%OF [1] -> -1;

ADDFLAGS8(op1, op2, result) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[7] &  op2@[7] & ~result@[7])
	         | (~op1@[7] & ~op2@[7] &  result@[7])
	*1* %CF :=  (op1@[7] & op2@[7])
	         | ((op1@[7] | op2@[7]) & ~result@[7])
};

SUBFLAGS8(op1, op2, result) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[7] & ~op2@[7] & ~result@[7])
	         | (~op1@[7] &  op2@[7] &  result@[7])
	*1* %CF :=  (~op1@[7] & op2@[7])
	         | ((~op1@[7] | op2@[7]) & result@[7])
};

ADDFLAGS16(op1, op2, result) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[15] &  op2@[15] & ~result@[15])
	         | (~op1@[15] & ~op2@[15] &  result@[15])
	*1* %CF :=  (op1@[15] & op2@[15])
	         | ((op1@[15] | op2@[15]) & ~result@[15])
};

SUBFLAGS16(op1, op2, result) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[15] & ~op2@[15] & ~result@[15])
	         | (~op1@[15] &  op2@[15] &  result@[15])
	*1* %CF :=  (~op1@[15] & op2@[15])
	         | ((~op1@[15] | op2@[15]) & result@[15])
};

ADDFLAGS32(op1, op2, result) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[31] &  op2@[31] & ~result@[31])
	         | (~op1@[31] & ~op2@[31] &  result@[31])
	*1* %CF :=  (op1@[31] & op2@[31])
	         | ((op1@[31] | op2@[31]) & ~result@[31])
};

SUBFLAGS32(op1, op2, result) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[31] & ~op2@[31] & ~result@[31])
	         | (~op1@[31] &  op2@[31] &  result@[31])
	*1* %CF :=  (~op1@[31] & op2@[31])
	         | ((~op1@[31] | op2@[31]) & result@[31])
};

SUBXFLAGS32(result, op1, op2) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? %ZF : 0]
	*1* %OF := ( op1@[31] & ~op2@[31] & ~result@[31])
	         | (~op1@[31] &  op2@[31] &  result@[31])
	*1* %CF :=  (~op1@[31] & op2@[31])
	         | ((~op1@[31] | op2@[31]) & result@[31])
};

COMPLEXARITHFLAGS32(op1, op2, result) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := ( op1@[31] & ~op2@[31] & ~result@[31])
	         | (~op1@[31] &  op2@[31] &  result@[31])
	*1* %CF := 0
};

LOGICALFLAGS8(result) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

LOGICALFLAGS16(result) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

LOGICALFLAGS32(result) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

ARITHSHIFTFLAGS8(result, src, count) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[7 - count]]
};

ARITHSHIFTFLAGS16(result, src, count) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[15 - count]]
};

ARITHSHIFTFLAGS32(result, src, count) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[31 - count]]
};

LOGSHIFTFLAGS8(result, src, count) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[7 - count]]
};

LOGSHIFTFLAGS16(result, src, count) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[15 - count]]
};

LOGSHIFTFLAGS32(result, src, count) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := [count = 0 ? 0 : src@[31 - count]]
};

CLEARFLAGS() {
	*1* %NF := 0
	*1* %ZF := 1
	*1* %OF := 0
	*1* %CF := 0
};

NEGFLAGS8(result, op2) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := op2@[7] & result@[7]
	*1* %CF := [result = 0 ? 0 : 1]
};

NEGFLAGS16(result, op2) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := op2@[15] & result@[15]
	*1* %CF := [result = 0 ? 0 : 1]
};

NEGFLAGS32(result, op2) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := op2@[31] & result@[31]
	*1* %CF := [result = 0 ? 0 : 1]
};

NEGXFLAGS8(result, op2) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? %ZF : 0]
	*1* %OF := op2@[7] & result@[7]
	*1* %CF := op2@[7] | (result@[7] & op2@[7])
};

NEGXFLAGS16(result, op2) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? %ZF : 0]
	*1* %OF := op2@[15] & result@[15]
	*1* %CF := op2@[15] | (result@[15] & op2@[15])
};

NEGXFLAGS32(result, op2) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? %ZF : 0]
	*1* %OF := op2@[31] & result@[31]
	*1* %CF := op2@[31] | (result@[31] & op2@[31])
};

COMMONFLAGS8(result) {
	*1* %NF := result@[7]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

COMMONFLAGS16(result) {
	*1* %NF := result@[15]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

COMMONFLAGS32(result) {
	*1* %NF := result@[31]
	*1* %ZF := [result = 0 ? 1 : 0]
	*1* %OF := 0
	*1* %CF := 0
};

ADDXB src, dst
	*8* tmpb := dst + src + %CF
	ADDFLAGS8(dst{8}, src, tmpb)
	*8* dst := tmpb;

ADDXW src, dst
	*16* tmph := dst + src + %CF
	ADDFLAGS16(dst{16}, src, tmph)
	*16* dst := tmph;

ADDXL src, dst
	*32* tmpi := dst + src + %CF
	ADDFLAGS32(dst{32}, src, tmpi)
	*32* dst := tmpi;

ARITH := { "ADD", "SUB" };
LOGIC := { "AND", "OR", "EOR" };
ALU   := { $ARITH, $LOGIC };
OP1   := { +, -, &, |, ^ };

ALU[IDX]"b" src, dst
	*8* tmpb := dst{8} OP1[IDX] src{8};
ARITH[0]"b" src, dst
	ADDFLAGS8(dst{8}, src, tmpb);
ARITH[1]"b" src, dst
	SUBFLAGS8(dst{8}, src, tmpb);
LOGIC[IDX]"b" src, dst
	LOGICALFLAGS8(tmpb);
ALU[IDX]"b" src, dst
	*8* dst := tmpb;

ALU[IDX]"w" src, dst
	*16* tmph := dst{16} OP1[IDX] src{16};
ARITH[0]"w" src, dst
	ADDFLAGS16(dst{16}, src, tmph);
ARITH[1]"w" src, dst
	SUBFLAGS16(dst{16}, src, tmph);
LOGIC[IDX]"w" src, dst
	LOGICALFLAGS16(tmph);
ALU[IDX]"w" src, dst
	*16* dst := tmph;

ALU[IDX]"l" src, dst
	*32* tmpi := dst{32} OP1[IDX] src{32};
ARITH[0]"l" src, dst
	ADDFLAGS32(dst{32}, src, tmpi);
ARITH[1]"l" src, dst
	SUBFLAGS32(dst{32}, src, tmpi);
LOGIC[IDX]"l" src, dst
	LOGICALFLAGS32(tmpi);
ALU[IDX]"l" src, dst
	*32* dst := tmpi;

ARITH[IDX]"QA" src, dst
	*32* dst := dst OP1[IDX] src;

OP2 := { *!,     *      };
MUL := { "MULS", "MULU" };

MUL[IDX]"w" src, dst
	*32* tmpi := dst{16} OP2[IDX] src{16}
	COMPLEXARITHFLAGS32(dst{16}, src, tmpi)
	*32* dst := tmpi;

DIVSw src, dst
	*16* tmph1 := dst{32} /! src{16}
	*16* tmph2 := dst{32} %! src{16}
	*32* tmpi := tmph1 + (tmph2 << 16)
	COMPLEXARITHFLAGS32(dst{32}, src, tmpi)
	*32* dst := tmpi;

DIVUw src, dst
	*16* tmph1 := dst{32} / src{16}
	*16* tmph2 := dst{32} % src{16}
	*32* tmpi := tmph1 + (tmph2 << 16)
	COMPLEXARITHFLAGS32(dst{32}, src, tmpi)
	*32* dst := tmpi;

CMPb src, dst
	*8* tmpb := dst - src
	SUBFLAGS8(dst, src, tmpb);

CMPw src, dst
	*16* tmph := dst - src
	SUBFLAGS16(dst, src, tmph);

CMPl src, dst
	*32* tmpi := dst - src
	SUBFLAGS32(dst, src, tmpi);

ASHIFTS := { "ASR" };
LSHIFTS := { "LSL", "LSR", "ROL", "ROR", "ROXL", "ROXR" };
SHIFTS  := { $ASHIFTS, $LSHIFTS };
OP3     := { >>A, <<, >>, rl, rr, rlc, rrc };

SHIFTS[IDX]"b" cnt, dst
	*8* tmpb := dst{8} OP3[IDX] cnt{8};
ASHIFTS[IDX]"b" cnt, dst
	ARITHSHIFTFLAGS8(tmpb, dst{8}, cnt);
LSHIFTS[IDX]"b" cnt, dst
	LOGSHIFTFLAGS8(tmpb, dst{8}, cnt);
SHIFTS[IDX]"b" cnt, dst
	*8* dst := tmpb;

SHIFTS[IDX]"w" cnt, dst
	*16* tmph := dst{16} OP3[IDX] cnt{16};
ASHIFTS[IDX]"w" cnt, dst
	ARITHSHIFTFLAGS16(tmph, dst{16}, cnt);
LSHIFTS[IDX]"w"   cnt, dst
	LOGSHIFTFLAGS16(tmph, dst{16}, cnt);
SHIFTS[IDX]"w" cnt, dst
	*16* dst := tmph;

SHIFTS[IDX]"l" cnt, dst
	*32* tmpi := dst{32} OP3[IDX] cnt{32};
ASHIFTS[IDX]"l" cnt, dst
	ARITHSHIFTFLAGS32(tmpi, dst{32}, cnt);
LSHIFTS[IDX]"l" cnt, dst
	LOGSHIFTFLAGS32(tmpi, dst{32}, cnt);
SHIFTS[IDX]"l" cnt, dst
	*32* dst := tmpi;

COND := {
	~(%CF | %ZF),         %CF | %ZF,
	~(%CF),               %CF,
	~(%ZF),               %ZF,
	~(%OF),               %OF,
	~(%NF),               %NF,
	~(%NF ^ %OF),         %NF ^ %OF,
	~((%NF ^ %OF) | %ZF), (%NF ^ %OF) | %ZF,
	1,                    0
};
CC := {
	"HI", "LS",
	"CC", "CS",
	"NE", "EQ",
	"VC", "VS",
	"PL", "MI",
	"GE", "LT",
	"GT", "LE",
	"T",  "F"
};
BRANCHES := {
	"BHI", "BLS",
	"BCC", "BCS",
	"BNE", "BEQ",
	"BVC", "BVS",
	"BPL", "BMI",
	"BGE", "BLT",
	"BGT", "BLE",
	"BRA"
};

BRANCHES[IDX] dst
	*32* %pc := [COND[IDX] = 1 ? dst : %pc];

"DB"CC[IDX]   dn, dst
	*32* dn := [COND[IDX] ? dn : dn - 1]
	*32* %pc := [COND[IDX] = 1 ? %pc : [dn = -1 ? %pc : dst]];

"S"CC[IDX] dst
	*8* dst := [COND[IDX] = 1 ? 1 : 0];

JSR size, dst
	*32* r[SP] := r[SP] - 4
	*32* m[r[SP]] := %pc + size
	*32* %pc := dst;

BCHGb bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := ~dst@[bit];

BCHGl bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := ~dst@[bit];

BCLRb bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := 0;

BCLRl bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := 0;

BSETb bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := 1;

BSETl bit, dst
	*1* %ZF := ~dst@[bit]
	*1* dst@[bit] := 1;

BTST bit, dst
	*1* %ZF := ~dst@[bit];

CLRb dst
	*8* dst := 0
	CLEARFLAGS();

CLRw dst
	*16* dst := 0
	CLEARFLAGS();

CLRl dst
	*32* dst := 0
	CLEARFLAGS();

NEGb dst
	*8* tmpb := 0 - dst{8}
	NEGFLAGS8(tmpb, dst)
	*8* dst := tmpb;

NEGw dst
	*16* tmph := 0 - dst{16}
	NEGFLAGS16(tmph, dst)
	*16* dst := tmph;

NEGl dst
	*32* tmpi := 0 - dst{32}
	NEGFLAGS32(tmpi, dst)
	*32* dst := tmpi;

NEGXb dst
	*8* tmpb := 0 - dst{8} - %CF
	NEGXFLAGS8(tmpb, dst)
	*8* dst := tmpb;

NEGXw dst
	*16* tmph := 0 - dst{16} - %CF
	NEGXFLAGS16(tmph, dst)
	*16* dst := tmph;

NEGXl dst
	*32* tmpi := 0 - dst{32} - %CF
	NEGXFLAGS32(tmpi, dst)
	*32* dst := tmpi;

NOTb dst
	*8* dst := ~dst{8}
	COMMONFLAGS8(dst);

NOTw dst
	*16* dst := ~dst{16}
	COMMONFLAGS16(dst);

NOTl dst
	*32* dst := ~dst{32}
	COMMONFLAGS32(dst);

TSTb dst
	*8* tmpb := dst{8}
	LOGICALFLAGS8(tmpb);

TSTw dst
	*16* tmph := dst{16}
	LOGICALFLAGS16(tmph);

TSTl dst
	*32* tmpi := dst{32}
	LOGICALFLAGS32(tmpi);

TAS dst
	COMMONFLAGS8(dst{8})
	*1* dst@[7] := 1;

EXG rx, ry
	*32* tmpi := rx
	*32* rx := ry
	*32* ry := tmpi;

EXTw dst
	*16* dst := dst{8}!
	COMMONFLAGS16(dst);

EXTl dst
	*32* dst := dst{16}!
	COMMONFLAGS32(dst);

EXTBl dst
	*32* dst := dst{8}!
	COMMONFLAGS32(dst);

SWAP dst
	*32* dst := (dst@[0:15] << 16) + dst@[15:31]
	COMMONFLAGS32(dst);

NOP
	_;

RESET
	_;

RTR
	_;

RTS
	*32* tmpi := m[r[SP]]
	*32* r[SP] := r[SP] + 4
	*32* %pc := tmpi;

JMP dst
	*32* %pc := dst;

PEA dst
	*32* tmpi := addr(dst)
	*32* r[SP] := r[SP] - 4
	*32* m[r[SP]] := tmpi;

LEA src, an
	*32* an := addr(src);

LINK an, size
	*32* r[SP] := r[SP] - 4
	*32* m[r[SP]] := an
	*32* an := r[SP]
	*32* r[SP] := r[SP] + size;

MOVEfromCCR dst
	*16* dst := 0
	*1* dst@[0] := %CF
	*1* dst@[1] := %OF
	*1* dst@[2] := %ZF
	*1* dst@[3] := %NF
	*1* dst@[4] := %CF;

MOVEtoCCR src
	*1* %CF := src@[4]
	*1* %OF := src@[1]
	*1* %ZF := src@[2]
	*1* %NF := src@[3];

MOVEb src, dst
	*8* dst := src
	COMMONFLAGS8(dst);

MOVEw src, dst
	*16* dst := src
	COMMONFLAGS16(dst);

MOVEl src, dst
	*32* dst := src
	COMMONFLAGS32(dst);

MOVEAb src, dst
	*8* dst := src;

MOVEAw src, dst
	*16* dst := src;

MOVEAl src, dst
	*32* dst := src;

LOADMw mask, an
	*16* r[0]  := [mask@[0]  ? m[an]{16} : r[0]]
	*32* an    := [mask@[0]  ? an + 2 : an]
	*16* r[1]  := [mask@[1]  ? m[an]{16} : r[1]]
	*32* an    := [mask@[1]  ? an + 2 : an]
	*16* r[2]  := [mask@[2]  ? m[an]{16} : r[2]]
	*32* an    := [mask@[2]  ? an + 2 : an]
	*16* r[3]  := [mask@[3]  ? m[an]{16} : r[3]]
	*32* an    := [mask@[3]  ? an + 2 : an]
	*16* r[4]  := [mask@[4]  ? m[an]{16} : r[4]]
	*32* an    := [mask@[4]  ? an + 2 : an]
	*16* r[5]  := [mask@[5]  ? m[an]{16} : r[5]]
	*32* an    := [mask@[5]  ? an + 2 : an]
	*16* r[6]  := [mask@[6]  ? m[an]{16} : r[6]]
	*32* an    := [mask@[6]  ? an + 2 : an]
	*16* r[7]  := [mask@[7]  ? m[an]{16} : r[7]]
	*32* an    := [mask@[7]  ? an + 2 : an]
	*16* r[8]  := [mask@[8]  ? m[an]{16} : r[8]]
	*32* an    := [mask@[8]  ? an + 2 : an]
	*16* r[9]  := [mask@[9]  ? m[an]{16} : r[9]]
	*32* an    := [mask@[9]  ? an + 2 : an]
	*16* r[10] := [mask@[10] ? m[an]{16} : r[10]]
	*32* an    := [mask@[10] ? an + 2 : an]
	*16* r[11] := [mask@[11] ? m[an]{16} : r[11]]
	*32* an    := [mask@[11] ? an + 2 : an]
	*16* r[12] := [mask@[12] ? m[an]{16} : r[12]]
	*32* an    := [mask@[12] ? an + 2 : an]
	*16* r[13] := [mask@[13] ? m[an]{16} : r[13]]
	*32* an    := [mask@[13] ? an + 2 : an]
	*16* r[14] := [mask@[14] ? m[an]{16} : r[14]]
	*32* an    := [mask@[14] ? an + 2 : an]
	*16* r[15] := [mask@[15] ? m[an]{16} : r[15]]
	*32* an    := [mask@[15] ? an + 2 : an];

STOREMw an, mask
	*32* an   := [mask@[15] ? an - 2 : an]
	*16* r[0] := [mask@[15] ? m[an]{16} : r[0]]
	*32* an   := [mask@[14] ? an - 2 : an]
	*16* r[0] := [mask@[14] ? m[an]{16} : r[1]]
	*32* an   := [mask@[13] ? an - 2 : an]
	*16* r[0] := [mask@[13] ? m[an]{16} : r[2]]
	*32* an   := [mask@[12] ? an - 2 : an]
	*16* r[0] := [mask@[12] ? m[an]{16} : r[3]]
	*32* an   := [mask@[11] ? an - 2 : an]
	*16* r[0] := [mask@[11] ? m[an]{16} : r[4]]
	*32* an   := [mask@[10] ? an - 2 : an]
	*16* r[0] := [mask@[10] ? m[an]{16} : r[5]]
	*32* an   := [mask@[9]  ? an - 2 : an]
	*16* r[0] := [mask@[9]  ? m[an]{16} : r[6]]
	*32* an   := [mask@[8]  ? an - 2 : an]
	*16* r[0] := [mask@[8]  ? m[an]{16} : r[7]]
	*32* an   := [mask@[7]  ? an - 2 : an]
	*16* r[0] := [mask@[7]  ? m[an]{16} : r[8]]
	*32* an   := [mask@[6]  ? an - 2 : an]
	*16* r[0] := [mask@[6]  ? m[an]{16} : r[9]]
	*32* an   := [mask@[5]  ? an - 2 : an]
	*16* r[0] := [mask@[5]  ? m[an]{16} : r[10]]
	*32* an   := [mask@[4]  ? an - 2 : an]
	*16* r[0] := [mask@[4]  ? m[an]{16} : r[11]]
	*32* an   := [mask@[3]  ? an - 2 : an]
	*16* r[0] := [mask@[3]  ? m[an]{16} : r[12]]
	*32* an   := [mask@[2]  ? an - 2 : an]
	*16* r[0] := [mask@[2]  ? m[an]{16} : r[13]]
	*32* an   := [mask@[1]  ? an - 2 : an]
	*16* r[0] := [mask@[1]  ? m[an]{16} : r[14]]
	*32* an   := [mask@[0]  ? an - 2 : an]
	*16* r[0] := [mask@[0]  ? m[an]{16} : r[15]];

LOADMl mask, an
	*32* r[0]  := [mask@[0]  ? m[an]{32} : r[0]]
	*32* an    := [mask@[0]  ? an + 4 : an]
	*32* r[1]  := [mask@[1]  ? m[an]{32} : r[1]]
	*32* an    := [mask@[1]  ? an + 4 : an]
	*32* r[2]  := [mask@[2]  ? m[an]{32} : r[2]]
	*32* an    := [mask@[2]  ? an + 4 : an]
	*32* r[3]  := [mask@[3]  ? m[an]{32} : r[3]]
	*32* an    := [mask@[3]  ? an + 4 : an]
	*32* r[4]  := [mask@[4]  ? m[an]{32} : r[4]]
	*32* an    := [mask@[4]  ? an + 4 : an]
	*32* r[5]  := [mask@[5]  ? m[an]{32} : r[5]]
	*32* an    := [mask@[5]  ? an + 4 : an]
	*32* r[6]  := [mask@[6]  ? m[an]{32} : r[6]]
	*32* an    := [mask@[6]  ? an + 4 : an]
	*32* r[7]  := [mask@[7]  ? m[an]{32} : r[7]]
	*32* an    := [mask@[7]  ? an + 4 : an]
	*32* r[8]  := [mask@[8]  ? m[an]{32} : r[8]]
	*32* an    := [mask@[8]  ? an + 4 : an]
	*32* r[9]  := [mask@[9]  ? m[an]{32} : r[9]]
	*32* an    := [mask@[9]  ? an + 4 : an]
	*32* r[10] := [mask@[10] ? m[an]{32} : r[10]]
	*32* an    := [mask@[10] ? an + 4 : an]
	*32* r[11] := [mask@[11] ? m[an]{32} : r[11]]
	*32* an    := [mask@[11] ? an + 4 : an]
	*32* r[12] := [mask@[12] ? m[an]{32} : r[12]]
	*32* an    := [mask@[12] ? an + 4 : an]
	*32* r[13] := [mask@[13] ? m[an]{32} : r[13]]
	*32* an    := [mask@[13] ? an + 4 : an]
	*32* r[14] := [mask@[14] ? m[an]{32} : r[14]]
	*32* an    := [mask@[14] ? an + 4 : an]
	*32* r[15] := [mask@[15] ? m[an]{32} : r[15]]
	*32* an    := [mask@[15] ? an + 4 : an];

STOREMl an, mask
	*32* an   := [mask@[15] ? an - 4 : an]
	*32* r[0] := [mask@[15] ? m[an]{32} : r[0]]
	*32* an   := [mask@[14] ? an - 4 : an]
	*32* r[0] := [mask@[14] ? m[an]{32} : r[1]]
	*32* an   := [mask@[13] ? an - 4 : an]
	*32* r[0] := [mask@[13] ? m[an]{32} : r[2]]
	*32* an   := [mask@[12] ? an - 4 : an]
	*32* r[0] := [mask@[12] ? m[an]{32} : r[3]]
	*32* an   := [mask@[11] ? an - 4 : an]
	*32* r[0] := [mask@[11] ? m[an]{32} : r[4]]
	*32* an   := [mask@[10] ? an - 4 : an]
	*32* r[0] := [mask@[10] ? m[an]{32} : r[5]]
	*32* an   := [mask@[9]  ? an - 4 : an]
	*32* r[0] := [mask@[9]  ? m[an]{32} : r[6]]
	*32* an   := [mask@[8]  ? an - 4 : an]
	*32* r[0] := [mask@[8]  ? m[an]{32} : r[7]]
	*32* an   := [mask@[7]  ? an - 4 : an]
	*32* r[0] := [mask@[7]  ? m[an]{32} : r[8]]
	*32* an   := [mask@[6]  ? an - 4 : an]
	*32* r[0] := [mask@[6]  ? m[an]{32} : r[9]]
	*32* an   := [mask@[5]  ? an - 4 : an]
	*32* r[0] := [mask@[5]  ? m[an]{32} : r[10]]
	*32* an   := [mask@[4]  ? an - 4 : an]
	*32* r[0] := [mask@[4]  ? m[an]{32} : r[11]]
	*32* an   := [mask@[3]  ? an - 4 : an]
	*32* r[0] := [mask@[3]  ? m[an]{32} : r[12]]
	*32* an   := [mask@[2]  ? an - 4 : an]
	*32* r[0] := [mask@[2]  ? m[an]{32} : r[13]]
	*32* an   := [mask@[1]  ? an - 4 : an]
	*32* r[0] := [mask@[1]  ? m[an]{32} : r[14]]
	*32* an   := [mask@[0]  ? an - 4 : an]
	*32* r[0] := [mask@[0]  ? m[an]{32} : r[15]];

SUBX src, dst
	*32* tmpi := dst - src - %CF
	SUBXFLAGS32(tmpi, dst, src)
	*32* dst := tmpi;

UNLK an
	*32* r[SP] := an
	*32* an := m[r[SP]]{32}
	*32* r[SP] := r[SP] + 4;

CLEAR_STACK n
	*32* r[SP] := r[SP] + n;
