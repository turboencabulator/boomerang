#
# Copyright (C) 2004, The University of Queensland
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#

# --------------------------------------------------------------------------
# PPC RTL
# --------------------------------------------------------------------------


MAX_BYTE    := 2**8  - 1;    # a byte of all 1's
MAX32BIT    := 2**32 - 1;    # a word of all 1's
MAXSIGN32   := 2**31 - 1;    # all bits except sign bit are set
SIGN_32_NEG := -2**31;
WORD        := 4;            # size of word in bytes (for now)

ENDIANNESS BIG;

# register mapping
# normal registers have a mapping to a Cardinal
# special register maps to -1

INTEGER
	[ %g0,  %g1,  %g2,  %g3,  %g4,  %g5,  %g6,  %g7,
	  %g8,  %g9,  %g10, %g11, %g12, %g13, %g14, %g15,
	  %g16, %g17, %g18, %g19, %g20, %g21, %g22, %g23,
	  %g24, %g25, %g26, %g27, %g28, %g29, %g30, %g31 ][32] -> 0..31,
	[ %CR0, %CR1, %CR2, %CR3, %CR4, %CR5, %CR6, %CR7 ][32] -> 64..71; #condition registers (contains %CR0 to %CR7)

FLOAT
	[ %f0,  %f1,  %f2,  %f3,  %f4,  %f5,  %f6,  %f7,
	  %f8,  %f9,  %f10, %f11, %f12, %f13, %f14, %f15,
	  %f16, %f17, %f18, %f19, %f20, %f21, %f22, %f23,
	  %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31 ][64] -> 32..63;

INTEGER
	[ %pc ][32] -> -1, # control regs
	[ %XERSO, %XEROV, %XERCA ][1] -> -1,   #XER flags mapped out, most likely wrong but leave till figure out right way
	[ %LR, %CTR, %XER ][32] -> -1;   #link register, counter register


SETXER(value) {
	*32* %XER := value
	*1*  %XERCA := %XER@[29]
	*1*  %XEROV := %XER@[30]
	*1*  %XERSO := %XER@[31]
};

ADDFLAGSX(op1, op2, result) {
	*1*  %XERCA :=                 (op1@[31] & op2@[31])
	             | (~result@[31] & (op1@[31] | op2@[31]))
	*1*  %XER@[29] := %XERCA
};

ADDFLAGSX0(op1, op2, result) {
	*1*  %XERCA :=                 (op1@[31] & op2@[31])
	             | (~result@[31] & (op1@[31] | op2@[31]))
	*1*  %XER@[29] := %XERCA
	*1*  %CR0@[0] := %XERSO
	*1*  %CR0@[1] := [result = 0 ? 1 : 0]
	*1*  %CR0@[2] := [result > 0 ? 1 : 0]
	*1*  %CR0@[3] := [result < 0 ? 1 : 0]
};

SUBFLAGSX(op1, op2, result) {
	*1*  %XERCA :=                (~op1@[31] & op2@[31])
	             | (result@[31] & (~op1@[31] | op2@[31]))
	*1*  %XER@[29] := %XERCA
};

SUBFLAGS0(result) {
	*1*  %CR0@[0] := %XERSO
	*1*  %CR0@[1] := [result = 0 ? 1 : 0]
	*1*  %CR0@[2] := [result > 0 ? 1 : 0]
	*1*  %CR0@[3] := [result < 0 ? 1 : 0]
};

SUBFLAGSX0(op1, op2, result) {
	*1*  %XERCA :=                (~op1@[31] & op2@[31])
	             | (result@[31] & (~op1@[31] | op2@[31]))
	*1*  %XER@[29] := %XERCA
	*1*  %CR0@[0] := %XERSO
	*1*  %CR0@[1] := [result = 0 ? 1 : 0]
	*1*  %CR0@[2] := [result > 0 ? 1 : 0]
	*1*  %CR0@[3] := [result < 0 ? 1 : 0]
};

SETFLAGS0(rd) {
	*1*  %CR0@[0] := %XERSO  # Note: these are non IBM bit numbers; LT is most significant bit (PPC bit 0)
	*1*  %CR0@[1] := [rd = 0 ? 1 : 0]
	*1*  %CR0@[2] := [rd > 0 ? 1 : 0]
	*1*  %CR0@[3] := [rd < 0 ? 1 : 0]
};



SUBFLAGSNL(op1, op2, crfd) {
	# Set flags in Logical (unsigned) fashion
	*32* crfd = 0 => %CR0@[3] := op1 <u op2
	*32* crfd = 0 => %CR0@[2] := op1 >u op2
	*32* crfd = 0 => %CR0@[1] := op1 =  op2
	*32* crfd = 1 => %CR1@[3] := op1 <u op2
	*32* crfd = 1 => %CR1@[2] := op1 >u op2
	*32* crfd = 1 => %CR1@[1] := op1 =  op2
	*32* crfd = 2 => %CR2@[3] := op1 <u op2
	*32* crfd = 2 => %CR2@[2] := op1 >u op2
	*32* crfd = 2 => %CR2@[1] := op1 =  op2
	*32* crfd = 3 => %CR3@[3] := op1 <u op2
	*32* crfd = 3 => %CR3@[2] := op1 >u op2
	*32* crfd = 3 => %CR3@[1] := op1 =  op2
	*32* crfd = 4 => %CR4@[3] := op1 <u op2
	*32* crfd = 4 => %CR4@[2] := op1 >u op2
	*32* crfd = 4 => %CR4@[1] := op1 =  op2
	*32* crfd = 5 => %CR5@[3] := op1 <u op2
	*32* crfd = 5 => %CR5@[2] := op1 >u op2
	*32* crfd = 5 => %CR5@[1] := op1 =  op2
	*32* crfd = 6 => %CR6@[3] := op1 <u op2
	*32* crfd = 6 => %CR6@[2] := op1 >u op2
	*32* crfd = 6 => %CR6@[1] := op1 =  op2
	*32* crfd = 7 => %CR7@[3] := op1 <u op2
	*32* crfd = 7 => %CR7@[2] := op1 >u op2
	*32* crfd = 7 => %CR7@[1] := op1 =  op2
};

SUBFLAGSNS(op1, op2, crfd) {
	# Set flags in signed fashion
	*32* crfd = 0 => %CR0@[3] := op1 < op2
	*32* crfd = 0 => %CR0@[2] := op1 > op2
	*32* crfd = 0 => %CR0@[1] := op1 = op2
	*32* crfd = 1 => %CR1@[3] := op1 < op2
	*32* crfd = 1 => %CR1@[2] := op1 > op2
	*32* crfd = 1 => %CR1@[1] := op1 = op2
	*32* crfd = 2 => %CR2@[3] := op1 < op2
	*32* crfd = 2 => %CR2@[2] := op1 > op2
	*32* crfd = 2 => %CR2@[1] := op1 = op2
	*32* crfd = 3 => %CR3@[3] := op1 < op2
	*32* crfd = 3 => %CR3@[2] := op1 > op2
	*32* crfd = 3 => %CR3@[1] := op1 = op2
	*32* crfd = 4 => %CR4@[3] := op1 < op2
	*32* crfd = 4 => %CR4@[2] := op1 > op2
	*32* crfd = 4 => %CR4@[1] := op1 = op2
	*32* crfd = 5 => %CR5@[3] := op1 < op2
	*32* crfd = 5 => %CR5@[2] := op1 > op2
	*32* crfd = 5 => %CR5@[1] := op1 = op2
	*32* crfd = 6 => %CR6@[3] := op1 < op2
	*32* crfd = 6 => %CR6@[2] := op1 > op2
	*32* crfd = 6 => %CR6@[1] := op1 = op2
	*32* crfd = 7 => %CR7@[3] := op1 < op2
	*32* crfd = 7 => %CR7@[2] := op1 > op2
	*32* crfd = 7 => %CR7@[1] := op1 = op2
};

SETFFLAGSN(op1, op2, crfd) {
	# Set flags according to floating point compare
	*32* crfd = 0 => %CR0@[3] := op1 < op2
	*32* crfd = 0 => %CR0@[2] := op1 > op2
	*32* crfd = 0 => %CR0@[1] := op1 = op2
	*32* crfd = 1 => %CR1@[3] := op1 < op2
	*32* crfd = 1 => %CR1@[2] := op1 > op2
	*32* crfd = 1 => %CR1@[1] := op1 = op2
	*32* crfd = 2 => %CR2@[3] := op1 < op2
	*32* crfd = 2 => %CR2@[2] := op1 > op2
	*32* crfd = 2 => %CR2@[1] := op1 = op2
	*32* crfd = 3 => %CR3@[3] := op1 < op2
	*32* crfd = 3 => %CR3@[2] := op1 > op2
	*32* crfd = 3 => %CR3@[1] := op1 = op2
	*32* crfd = 4 => %CR4@[3] := op1 < op2
	*32* crfd = 4 => %CR4@[2] := op1 > op2
	*32* crfd = 4 => %CR4@[1] := op1 = op2
	*32* crfd = 5 => %CR5@[3] := op1 < op2
	*32* crfd = 5 => %CR5@[2] := op1 > op2
	*32* crfd = 5 => %CR5@[1] := op1 = op2
	*32* crfd = 6 => %CR6@[3] := op1 < op2
	*32* crfd = 6 => %CR6@[2] := op1 > op2
	*32* crfd = 6 => %CR6@[1] := op1 = op2
	*32* crfd = 7 => %CR7@[3] := op1 < op2
	*32* crfd = 7 => %CR7@[2] := op1 > op2
	*32* crfd = 7 => %CR7@[1] := op1 = op2
};


#Arithmetic operations

ADD'q'  rd, ra, rb
	*32* rd := ra + rb;
ADDq    rd, ra, rb
	SETFLAGS0(rd);

ADDE'q' rd, ra, rb
	*32* rd := ra + rb + %XERCA;
ADDEq   rd, ra, rb
	SETFLAGS0(rd);

ADDI    rd, rs, simm
	*32* rd := rs + simm;

ADDIC   rd, rs, simm
	*32* tmp := rs + simm
	ADDFLAGSX(rs, simm, tmp)    # Set carry
	*32* rd := tmp;

ADDICq  rd, rs, simm
	*32* tmp := rs + simm
	ADDFLAGSX0(rs, simm, tmp)   # Set carry and CR0
	*32* rd := tmp;

ADDIS   rd, rs, simm
	*32* rd := rs + (simm << 16);

ADDME'q'  rd, ra
	*32* rd := ra + %XERCA - 1;
ADDMEq  rd, ra
	SETFLAGS0(rd);

ADDZE'q'  rd, ra
	*32* rd := ra + %XERCA;
ADDZEq  rd, ra
	SETFLAGS0(rd);

DIVW'U''q'  rd, ra, rb
	*32* rd := ra / rb;
DIVWq   rd, ra, rb
	SETFLAGS0(rd);
DIVWUq  rd, ra, rb
	SETFLAGS0(rd);

EXTSB'q'  rd, ra
	*32* rd := sgnex(8, 32, ra);
EXTSBq  rd, ra
	SETFLAGS0(rd);

MULLI   rd, ra, simm
	*32* rd := rs * sgnex(16, 32, simm);

MULLW'q'  rd, ra, rb
	*32* rd := ra * rb;
MULLWq  rd, ra, rb
	SETFLAGS0(rd);

SUBF    rd, ra, rb
	*32* rd := rb - ra;

SUBFE   rd, ra, rb
	*32* rd := rb + %XERCA - ra;

SUBFIC  rd, ra, simm
	*32* tmp := simm - ra
	SUBFLAGSX(simm, ra, tmp)
	*32* rd := tmp;

SUBFC'O''Q'  rd, ra, rb
	*32* tmp := rb - ra;
SUBFC   rd, ra, rb
	SUBFLAGSX(rb, ra, tmp);
SUBFCQ  rd, ra, rb
	SUBFLAGSX0(rb, ra, tmp);
SUBFCO  rd, ra, rb
	SUBFLAGSX(rb, ra, tmp);      # Also supposed to set overflow bits
SUBFCOQ rd, ra, rb
	SUBFLAGSX0(rb, ra, tmp);     # Also supposed to set overflow bits
SUBFC'O''Q'  rd, ra, rb
	*32* rd := tmp;

NOP
	_;


#Logical ops

NEG'q'  rd, ra
	*32* rd := 0 - ra;
NEGq rd, ra
	SETFLAGS0(rd);

LOGOP := { &,        |,      ^       };
LOG   := { "AND",    "OR",   "XOR"   };  # All logicals with uncomplemented operands
NLOG  := { "NAND",   "NOR",  "EQV"   };  # All negated logicals
                                         # Note: NXOR is called EQV

LOGI  := { "ANDIq",  "ORI",  "XORI"  };  # Immediate, NO dot (Note: ANDIq, but ORI, XORI)
LOGIS := { "ANDISq", "ORIS", "XORIS" };  # Immediate with operand B shifted left 16 bits, NO dot

LOGC  := { "ANDC",   "ORC"           };  # Note: no XORC


LOG[IDX]'q'  rd, ra, rb
	*32* rd := ra LOGOP[IDX] rb;
LOG[IDX]"q"  rd, ra, rb
	SETFLAGS0(rd);

NLOG[IDX]'q'  rd, ra, rb
	*32* rd := ~(ra LOGOP[IDX] rb);
NLOG[IDX]"q"  rd, ra, rb
	SETFLAGS0(rd);

LOGI[IDX]    rd, rs, uimm
	*32* rd := rs LOGOP[IDX] uimm;
ANDIq        rd, rs, uimm
	SETFLAGS0(rd);              # Only ANDIq sets flags

LOGIS[IDX]   rd, rs, uimm
	*32* rd := rs LOGOP[IDX] (uimm << 16);
ANDISq       rd, rs, uimm
	SETFLAGS0(rd);              # Only ANDISq sets flags

LOGC[IDX]'q'  rd, ra, rb
	*32* rd := ra LOGOP[IDX] ~rb;
LOGC[IDX]"q"  rd, ra, rb
	SETFLAGS0(rd);


# Shifts
SHIFTS   := { "SLW", "SRW", "SRAW", "SRAWI" };
SHIFT_OP := { <<,    >>,    >>A,    >>A     };

SHIFTS[IDX]'q'  Rd, Rs, op2
	*32* Rd := Rs SHIFT_OP[IDX] op2;
	# Note: SRAW/SRAWI also set the carry flag (%XERCA) in some weird way
SHIFTS[IDX]"q"  Rd, Rs, op2
	SETFLAGS0(Rd);



#Memory access. rA is passed twice; as part of eaddr, and by itself for the U versions (update rA)

LWZ'U''X'  rd, eaddr, ra
	*32* rd := m[eaddr];
LHZ'U''X'  rd, eaddr, ra
	*32* rd := zfill(16, 32, m[eaddr]);
LBZ'U''X'  rd, eaddr, ra
	*32* rd := zfill(8, 32, m[eaddr]);

LWZU'X'  rd, eaddr, ra
	*32* ra := eaddr;
LHZU'X'  rd, eaddr, ra
	*32* ra := eaddr;
LBZU'X'  rd, eaddr, ra
	*32* ra := eaddr;

STW'U''X'  rs, eaddr, ra
	*32* m[eaddr] := rs;
STH'U''X'  rs, eaddr, ra
	*16* m[eaddr] := truncs(32, 16, rs);
STB'U''X'  rs, eaddr, ra
	*8* m[eaddr] := truncs(32, 8, rs);

STWU'X'  rs, eaddr, ra
	*32* ra := eaddr;
STHU'X'  rs, eaddr, ra
	*32* ra := eaddr;
STBU'X'  rs, eaddr, ra
	*32* ra := eaddr;


# Multi word load and store

LMW rd, eaddr, d
	*32* tmp := eaddr
	*32* d <=  0 => %g0  := m[tmp]
	*32* d <=  0 => tmp := tmp + 4
	*32* d <=  1 => %g1  := m[tmp]
	*32* d <=  1 => tmp := tmp + 4
	*32* d <=  2 => %g2  := m[tmp]
	*32* d <=  2 => tmp := tmp + 4
	*32* d <=  3 => %g3  := m[tmp]
	*32* d <=  3 => tmp := tmp + 4
	*32* d <=  4 => %g4  := m[tmp]
	*32* d <=  4 => tmp := tmp + 4
	*32* d <=  5 => %g5  := m[tmp]
	*32* d <=  5 => tmp := tmp + 4
	*32* d <=  6 => %g6  := m[tmp]
	*32* d <=  6 => tmp := tmp + 4
	*32* d <=  7 => %g7  := m[tmp]
	*32* d <=  7 => tmp := tmp + 4
	*32* d <=  8 => %g8  := m[tmp]
	*32* d <=  8 => tmp := tmp + 4
	*32* d <=  9 => %g9  := m[tmp]
	*32* d <=  9 => tmp := tmp + 4
	*32* d <= 10 => %g10 := m[tmp]
	*32* d <= 10 => tmp := tmp + 4
	*32* d <= 11 => %g11 := m[tmp]
	*32* d <= 11 => tmp := tmp + 4
	*32* d <= 12 => %g12 := m[tmp]
	*32* d <= 12 => tmp := tmp + 4
	*32* d <= 13 => %g13 := m[tmp]
	*32* d <= 13 => tmp := tmp + 4
	*32* d <= 14 => %g14 := m[tmp]
	*32* d <= 14 => tmp := tmp + 4
	*32* d <= 15 => %g15 := m[tmp]
	*32* d <= 15 => tmp := tmp + 4
	*32* d <= 16 => %g16 := m[tmp]
	*32* d <= 16 => tmp := tmp + 4
	*32* d <= 17 => %g17 := m[tmp]
	*32* d <= 17 => tmp := tmp + 4
	*32* d <= 18 => %g18 := m[tmp]
	*32* d <= 18 => tmp := tmp + 4
	*32* d <= 19 => %g19 := m[tmp]
	*32* d <= 19 => tmp := tmp + 4
	*32* d <= 20 => %g20 := m[tmp]
	*32* d <= 20 => tmp := tmp + 4
	*32* d <= 21 => %g21 := m[tmp]
	*32* d <= 21 => tmp := tmp + 4
	*32* d <= 22 => %g22 := m[tmp]
	*32* d <= 22 => tmp := tmp + 4
	*32* d <= 23 => %g23 := m[tmp]
	*32* d <= 23 => tmp := tmp + 4
	*32* d <= 24 => %g24 := m[tmp]
	*32* d <= 24 => tmp := tmp + 4
	*32* d <= 25 => %g25 := m[tmp]
	*32* d <= 25 => tmp := tmp + 4
	*32* d <= 26 => %g26 := m[tmp]
	*32* d <= 26 => tmp := tmp + 4
	*32* d <= 27 => %g27 := m[tmp]
	*32* d <= 27 => tmp := tmp + 4
	*32* d <= 28 => %g28 := m[tmp]
	*32* d <= 28 => tmp := tmp + 4
	*32* d <= 29 => %g29 := m[tmp]
	*32* d <= 29 => tmp := tmp + 4
	*32* d <= 30 => %g30 := m[tmp]
	*32* d <= 30 => tmp := tmp + 4
	*32* d <= 31 => %g31 := m[tmp];

STMW rs, eaddr, s
	*32* tmp := eaddr
	*32* s <=  0 => m[tmp] := %g0
	*32* s <=  0 => tmp := tmp + 4
	*32* s <=  1 => m[tmp] := %g1
	*32* s <=  1 => tmp := tmp + 4
	*32* s <=  2 => m[tmp] := %g2
	*32* s <=  2 => tmp := tmp + 4
	*32* s <=  3 => m[tmp] := %g3
	*32* s <=  3 => tmp := tmp + 4
	*32* s <=  4 => m[tmp] := %g4
	*32* s <=  4 => tmp := tmp + 4
	*32* s <=  5 => m[tmp] := %g5
	*32* s <=  5 => tmp := tmp + 4
	*32* s <=  6 => m[tmp] := %g6
	*32* s <=  6 => tmp := tmp + 4
	*32* s <=  7 => m[tmp] := %g7
	*32* s <=  7 => tmp := tmp + 4
	*32* s <=  8 => m[tmp] := %g8
	*32* s <=  8 => tmp := tmp + 4
	*32* s <=  9 => m[tmp] := %g9
	*32* s <=  9 => tmp := tmp + 4
	*32* s <= 10 => m[tmp] := %g10
	*32* s <= 10 => tmp := tmp + 4
	*32* s <= 11 => m[tmp] := %g11
	*32* s <= 11 => tmp := tmp + 4
	*32* s <= 12 => m[tmp] := %g12
	*32* s <= 12 => tmp := tmp + 4
	*32* s <= 13 => m[tmp] := %g13
	*32* s <= 13 => tmp := tmp + 4
	*32* s <= 14 => m[tmp] := %g14
	*32* s <= 14 => tmp := tmp + 4
	*32* s <= 15 => m[tmp] := %g15
	*32* s <= 15 => tmp := tmp + 4
	*32* s <= 16 => m[tmp] := %g16
	*32* s <= 16 => tmp := tmp + 4
	*32* s <= 17 => m[tmp] := %g17
	*32* s <= 17 => tmp := tmp + 4
	*32* s <= 18 => m[tmp] := %g18
	*32* s <= 18 => tmp := tmp + 4
	*32* s <= 19 => m[tmp] := %g19
	*32* s <= 19 => tmp := tmp + 4
	*32* s <= 20 => m[tmp] := %g20
	*32* s <= 20 => tmp := tmp + 4
	*32* s <= 21 => m[tmp] := %g21
	*32* s <= 21 => tmp := tmp + 4
	*32* s <= 22 => m[tmp] := %g22
	*32* s <= 22 => tmp := tmp + 4
	*32* s <= 23 => m[tmp] := %g23
	*32* s <= 23 => tmp := tmp + 4
	*32* s <= 24 => m[tmp] := %g24
	*32* s <= 24 => tmp := tmp + 4
	*32* s <= 25 => m[tmp] := %g25
	*32* s <= 25 => tmp := tmp + 4
	*32* s <= 26 => m[tmp] := %g26
	*32* s <= 26 => tmp := tmp + 4
	*32* s <= 27 => m[tmp] := %g27
	*32* s <= 27 => tmp := tmp + 4
	*32* s <= 28 => m[tmp] := %g28
	*32* s <= 28 => tmp := tmp + 4
	*32* s <= 29 => m[tmp] := %g29
	*32* s <= 29 => tmp := tmp + 4
	*32* s <= 30 => m[tmp] := %g30
	*32* s <= 30 => tmp := tmp + 4
	*32* s <= 31 => m[tmp] := %g31;

# Floating point loads
LFD'U''X'  fd, eaddr, ra
	*64* fd := m[eaddr];
LFDU'X'  fd, eaddr, ra
	*32* ra := eaddr;

LFS'U''X'  fd, eaddr, ra
	*64* fd := fsize(32, 64, m[eaddr]);
LFSU'X'  fd, eaddr, ra
	*32* ra := eaddr;

# Floating point stores
STFD'U''X'  fd, eaddr, ra
	*64* m[eaddr] := fd;
STFDU'X'  fd, eaddr, ra
	*32* ra := eaddr;

STFS'U''X'  fd, eaddr, ra
	*32* m[eaddr] := fsize(64, 32, fd);
STFSU'X'  fd, eaddr, ra
	*32* ra := eaddr;


BALLR
	*32* %pc := %LR;

MFCR rd
	*32* rd := (%CR0 << 28) + (%CR1 << 24) + (%CR2 << 20) + (%CR3 << 16)
	         + (%CR4 << 12) + (%CR5 <<  8) + (%CR6 <<  4) + (%CR7);

MFSPR rd, spr
	*32* spr = 1 => rd := %XER
	*32* spr = 8 => rd := %LR
	*32* spr = 9 => rd := %CTR;
# MFSPR extended mnemonics:
#MFXER rd
#	*32* rd := %XER;
#MFLR rd
#	*32* rd := %LR;
#MFCTR rd
#	*32* rd := %CTR;

MTSPR spr, rs
	*32* spr = 1 => %XER := rs  # Hack:  Can't do SETXER(rs) conditionally
	*1*  spr = 1 => %XERCA := %XER@[29]
	*1*  spr = 1 => %XEROV := %XER@[30]
	*1*  spr = 1 => %XERSO := %XER@[31]
	*32* spr = 8 => %LR  := rs
	*32* spr = 9 => %CTR := rs;
# MTSPR extended mnemonics:
#MTXER rs
#	SETXER(rs);
#MTLR rs
#	*32* %LR := rs;
#MTCTR rs
#	*32* %CTR := rs;

ROT_AND := { "RLWINM", "RLWIMI" };

ROT_AND[IDX]'q'  ra, rs, uimm, beg, end
	*32* tmp_mask := (1 << (32 - beg)) - (1 << (31 - end))
	*32* tmp_r := (rs rl uimm) & tmp_mask;  # TODO: Try using bit extraction to do this
RLWINM'q'  ra, rs, uimm, beg, end
	*32* ra := tmp_r;
RLWIMI'q'  ra, rs, uimm, beg, end
	*32* ra := tmp_r | (ra & ~tmp_mask);
ROT_AND[IDX]"q"  ra, rs, uimm, beg, end
	SETFLAGS0(ra);

BL reloc
	*32* %LR := %pc + 4
	*32* %pc := reloc;

# Comparisons. Ignore XER[SO] for now.
CMPI  crfd, ra, simm
	SUBFLAGSNS(ra, simm, crfd);

CMPLI crfd, ra, uimm
	SUBFLAGSNL(ra, uimm, crfd);

CMP   crfd, ra, rb
	SUBFLAGSNS(ra, rb, crfd);

CMPL  crfd, ra, rb
	SUBFLAGSNL(ra, rb, crfd);

FCMPO crfd, fa, fb
	SETFFLAGSN(fa, fb, crfd);   # Difference between O and U forms is
FCMPU crfd, fa, fb
	SETFFLAGSN(fa, fb, crfd);   # in exception handling

#condition register manipulation

"CR"LOG[IDX]  d, a, b
	*1* d :=   a LOGOP[IDX]  b;
"CR"NLOG[IDX] d, a, b
	*1* d := ~(a LOGOP[IDX]  b);
"CR"LOGC[IDX] d, a, b
	*1* d :=   a LOGOP[IDX] ~b;

# Floating point operations

FMR'q'  fd, fb
	*64* fd := fb;

FNEG'q'  fd, fb
	*64* fd := 0.0 -f fb;

FRSP'q'  fd, fb
	*32* tmpf := fsize(64, 32, fb)
	*64* fd := fsize(32, 64, tmpf);

FCTIW'Z''q'  fd, fb
	*64* fd := zfill(32, 64, ftoi(64, 32, fb));  # Note: Variants differ in rounding modes

FADD'S''q'  fd, fa, fb
	*64* fd := fa +f fb;    # Note: floating point flags not implemented yet
	                        # Note: may only operate on 32 bits of precision

FSUB'S''q'  fd, fa, fb
	*64* fd := fa -f fb;    # Note as above

FDIV'S''q'  fd, fa, fb
	*64* fd := fa /f fb;    # Note: only operates on 64/32 bits of precision
	                        # Yet result is in 64-bit format

# conditional branch
# MVE: Not sure if I have the bit numbers round the right way (is LT 3 or 0?)
CONDBR  := {
	%CR0@[3], ~%CR0@[2],  %CR0@[1], ~%CR0@[3],
	%CR0@[2], ~%CR0@[3], ~%CR0@[1], ~%CR0@[2],
	%CR0@[0], ~%CR0@[0],  %CR0@[0], ~%CR0@[0]
};
BRCONDS := {
	"lt", "le", "eq", "ge",
	"gt", "nl", "ne", "ng",
	"so", "ns", "un", "nu"
};

"b"BRCONDS[IDX]  BIcr, reloc
	*32* %pc := [CONDBR[IDX] = 1 ? %pc+reloc : %pc];
"b"BRCONDS[IDX]"ctr"  BIcr
	*32* %pc := [CONDBR[IDX] = 1 ? %CTR : %pc];
"b"BRCONDS[IDX]"lr"  BIcr
	*32* %pc := [CONDBR[IDX] = 1 ? %LR : %pc];
