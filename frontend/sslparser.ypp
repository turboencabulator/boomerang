/**
 * \file
 * \brief Defines a parser class that reads an SSL specification and returns
 *        the list of SSL instruction and table definitions.
 *
 * \authors
 * Copyright (C) 1997, Shane Sendall
 * \authors
 * Copyright (C) 1998-2001, The University of Queensland
 * \authors
 * Copyright (C) 1998, David Ung
 * \authors
 * Copyright (C) 2001, Sun Microsystems, Inc
 * \authors
 * Copyright (C) 2014-2016, Kyle Guinn
 *
 * \copyright
 * See the file "LICENSE.TERMS" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

%name SSLParser

%{
	#ifdef HAVE_CONFIG_H
	#include <config.h>
	#endif
%}

%header{
	#include "exp.h"
	#include "insnameelem.h"
	#include "operator.h"
	#include "rtl.h"
	#include "sslinst.h"
	#include "statement.h"
	#include "type.h"
	#include "types.h"

	class SSLScanner;
%}

%union {
	Exp            *exp;
	OPER            op;
	std::string    *str;
	int             num;
	double          dbl;
	Statement      *regtransfer;
	Type           *typ;

	InsNameElem    *insel;
	std::list<std::string>   *strlist;
	std::list<Exp *>         *explist;
	std::deque<OPER>         *opdeque;
	std::deque<Exp *>        *expdeque;
	std::deque<std::string>  *namedeque;
	RTL            *rtlist;
}

%{
	#include "sslscanner.h"
	#include "visitor.h"

	#ifdef GARBAGE_COLLECTOR
	#include <gc/gc.h>
	#endif

	#include <algorithm>
	#include <sstream>
	#include <string>

	#include <cassert>

	static OPER strToTerm(const char *s);                       // Convert string to a Terminal (if possible)
	static Exp *listExpToExp(const std::list<Exp *> &le);       // Convert a STL list of Exp* to opList
	static Exp *listStrToExp(const std::list<std::string> &ls); // Convert a STL list of strings to opList
%}

%define DEBUG 1

// %define INHERIT : public gc  // This is how to force the parser class to be declared as derived from class gc

%define MEMBERS \
	public: \
		virtual ~SSLParser(); \
		/* The code for expanding tables and saving to the dictionary */ \
		void expandTables(InsNameElem &iname, const std::list<std::string> &params, const RTL &o_rtlist, RTLInstDict &Dict); \
		Exp *makeSuccessor(Exp *e); /* Get successor (of register expression) */ \
	\
		/* \
		 * The scanner. \
		 */ \
		SSLScanner *theScanner; \
	\
	protected: \
		/* \
		 * Maps SSL constants to their values. \
		 */ \
		std::map<std::string, int>                       ConstTable; \
		std::map<std::string, std::deque<std::string> *> NameTable; \
		std::map<std::string, std::deque<OPER> *>        OpTable; \
		std::map<std::string, std::deque<Exp *> *>       ExpTable; \
	\
		/* \
		 * maps index names to instruction name-elements \
		 */ \
		std::map<std::string, const InsNameElem *> indexrefmap; \
	\
		/* \
		 * True when FLOAT keyword seen; false when INTEGER keyword seen \
		 * (in @REGISTER section) \
		 */ \
		bool bFloat = false;

%define CONSTRUCTOR_PARAM \
	std::istream &in, bool trace
%define CONSTRUCTOR_INIT \
	: theScanner(new SSLScanner(in, trace))
%define CONSTRUCTOR_CODE \
	if (trace) yydebug = 1; else yydebug = 0;

%define PARSE_PARAM RTLInstDict &Dict

/*==============================================================================
 * Declaration of token types, associativity and precedence
 *============================================================================*/

%token       ENDIANNESS BIG LITTLE
%token       TOK_INTEGER TOK_FLOAT COVERS SHARES
%token       FETCHEXEC FAST OPERAND
%token       THEN INDEX EQUATE ASSIGN TO

%token <op>  UNARY_FUNC CONV_FUNC
%token <op>  FPUSH FPOP
%token       FLAGMACRO SUCCESSOR
%token <str> ASSIGNTYPE
%token <str> NAME_CALL NAME_LOOKUP NAME DECOR
%token <str> REG_ID TEMP
%token       REG_IDX MEM_IDX
%token <num> REG_NUM
%token <num> NUM
%token <dbl> FLOATNUM       // I'd prefer type double here!

%left  <op>  LOG_OP
%right <op>  COND_OP
%left  <op>  BIT_OP
%left  <op>  ARITH_OP
%left  <op>  FARITH_OP
%left        TABLE_OP NAME_LOOKUP
%right <op>  NEG_OP
%left        POSTFIX_OP '!' '@' '{'

%type <exp> exp location
%type <op> bin_oper
%type <str> param
%type <regtransfer> rt assign_rt
%type <typ> assigntype
%type <insel> name_contract instr_elem instr_name
%type <strlist> reg_table
%type <strlist> list_parameter func_parameter
%type <namedeque> name_expand str_term str_expr str_array
%type <explist> flag_list
%type <opdeque> opstr_array opstr_expr
%type <expdeque> expstr_array expstr_expr
%type <explist> list_actualparameter
%type <rtlist> rt_list

%%

specification
	: specification parts ';'
	| parts ';'
	;

parts
	: instr
	| FETCHEXEC rt_list { Dict.fetchExecCycle = $2; }

	/* Name := value */
	| constants

	/* Optional one-line section declaring endianness */
	| ENDIANNESS BIG    { Dict.bigEndian = true;  }
	| ENDIANNESS LITTLE { Dict.bigEndian = false; }

	/* Optional section describing faster versions of instructions (e.g. that don't implement the full
	 * specifications, but if they work, will be much faster) */
	| FAST fastentries

	/* Definitions of registers (with overlaps, etc) */
	| TOK_INTEGER { bFloat = false; } reglists
	| TOK_FLOAT   { bFloat = true;  } reglists

	/* Declaration of "flag functions". These describe the detailed flag setting semantics for instructions */
	| flag_fnc

	/* Addressing modes (or instruction operands) (optional) */
	| OPERAND operandlist { Dict.fixupParams(); }
	;

operandlist
	: operandlist ',' operand
	| operand
	;

operand
	/* In the .tex documentation, this is the first, or variant kind
	 * Example: reg_or_imm := { imode, rmode }; */
	: param EQUATE '{' list_parameter '}' {
		// Note: the below copies the list of strings!
		Dict.DetParamMap[*$1].params = *$4;
		Dict.DetParamMap[*$1].kind = ParamEntry::VARIANT;
		delete $1;
		//delete $4;
	  }

	/* In the documentation, these are the second and third kinds
	 * The third kind is described as the functional, or lambda, form
	 * In terms of DetParamMap[].kind, they are ParamEntry::ASGN unless there
	 * actually are parameters in square brackets, in which case it is
	 * ParamEntry::LAMBDA
	 * Example: indexA  rs1, rs2 *i32* r[rs1] + r[rs2] */
	| param list_parameter func_parameter assigntype exp {
		ParamEntry &param = Dict.DetParamMap[*$1];
		Statement *asgn = new Assign($4, new Terminal(opNil), $5);
		// Note: The below 2 copy lists of strings (to be deleted below!)
		param.params = *$2;
		param.funcParams = *$3;
		param.asgn = asgn;
		param.kind = param.funcParams.empty() ? ParamEntry::ASGN : ParamEntry::LAMBDA;
		delete $1;
		//delete $2;
		//delete $3;
	  }
	;

func_parameter
	: '[' list_parameter ']' { $$ = $2; }
	| /* empty */            { $$ = new std::list<std::string>; }
	;

reglists
	: reglists ',' reglist
	| reglist
	;

reglist
	: REG_ID INDEX NUM {
		if (Dict.RegMap.count(*$1))
			yyerror("Name reglist declared twice");
		Dict.RegMap[*$1] = $3;
		delete $1;
	  }

	| REG_ID '[' NUM ']' INDEX NUM {
		if (Dict.RegMap.count(*$1))
			yyerror("Name reglist declared twice");
		Dict.addRegister(*$1, $6, $3, bFloat);
		delete $1;
	  }

	| REG_ID '[' NUM ']' INDEX NUM COVERS REG_ID TO REG_ID {
		if (Dict.RegMap.count(*$1))
			yyerror("Name reglist declared twice");
		if (Dict.DetRegMap.count($6))
			yyerror("Index used for more than one register");

		// check range is legitimate for size. 8,10
		auto i1 = Dict.RegMap.find(*$8);
		auto i2 = Dict.RegMap.find(*$10);
		if (i1 != Dict.RegMap.end()
		 && i2 != Dict.RegMap.end()) {
			int bitsize = 0;
			for (auto i = i1->second; i <= i2->second; ++i) {
				auto it = Dict.DetRegMap.find(i);
				if (it == Dict.DetRegMap.end()) {
					yyerror("Not all registers in range defined");
					break;
				}
				bitsize += it->second.g_size();
			}
			if ($3 != bitsize) {
				yyerror("Size does not equal range");
			}
		} else {
			yyerror("Undefined range");
		}

		Dict.RegMap[*$1] = $6;
		Dict.DetRegMap[$6].s_name(*$1);
		Dict.DetRegMap[$6].s_size($3);
		Dict.DetRegMap[$6].s_float(bFloat);
		Dict.DetRegMap[$6].s_mappedIndex(i1->second);
		Dict.DetRegMap[$6].s_mappedOffset(0);
		delete $1;
		delete $8;
		delete $10;
	  }

	| REG_ID '[' NUM ']' INDEX NUM SHARES REG_ID '@' '[' NUM ':' NUM ']' {
		if (Dict.RegMap.count(*$1))
			yyerror("Name reglist declared twice");
		if (Dict.DetRegMap.count($6))
			yyerror("Index used for more than one register");

		// Do checks
		if ($3 != ($13 - $11) + 1)
			yyerror("Size does not equal range");
		auto i1 = Dict.RegMap.find(*$8);
		if (i1 != Dict.RegMap.end()) {
			auto it = Dict.DetRegMap.find(i1->second);
			if (it == Dict.DetRegMap.end()) {
				yyerror("Not all registers in range defined");
			} else if ($13 >= it->second.g_size()) {
				yyerror("Range extends over target register");
			}
		} else {
			yyerror("Undefined range");
		}

		Dict.RegMap[*$1] = $6;
		Dict.DetRegMap[$6].s_name(*$1);
		Dict.DetRegMap[$6].s_size($3);
		Dict.DetRegMap[$6].s_float(bFloat);
		Dict.DetRegMap[$6].s_mappedIndex(i1->second);
		Dict.DetRegMap[$6].s_mappedOffset($11);
		delete $1;
		delete $8;
	  }

	| '[' reg_table ']' '[' NUM ']' INDEX NUM TO NUM {
		if ((int)$2->size() != ($10 - $8 + 1))
			yyerror("Size of register array does not match index range");
		int x = $8;
		for (const auto &loc : *$2) {
			if (Dict.RegMap.count(loc))
				yyerror("Name reglist declared twice");
			Dict.addRegister(loc, x++, $5, bFloat);
		}
		delete $2;
	  }

	| '[' reg_table ']' '[' NUM ']' INDEX NUM {
		for (const auto &loc : *$2) {
			if (Dict.RegMap.count(loc))
				yyerror("Name reglist declared twice");
			Dict.addRegister(loc, $8, $5, bFloat);
		}
		delete $2;
	  }
	;

reg_table
	: reg_table ',' REG_ID { $$ = $1; $$->push_back(*$3); delete $3; }
	| REG_ID   { $$ = new std::list<std::string>(1, *$1); delete $1; }
	;

/* Flag definitions */
flag_fnc
	: NAME_CALL list_parameter ')' '{' rt_list '}' {
		Dict.FlagFuncs[*$1] = new FlagDef(listStrToExp(*$2), $5);
		delete $1;
		delete $2;
	  }
	;

constants
	: NAME EQUATE NUM {
		if (ConstTable.count(*$1))
			yyerror("Constant declared twice");
		ConstTable[*$1] = $3;
		delete $1;
	  }

	| NAME EQUATE NUM ARITH_OP NUM {
		if (ConstTable.count(*$1))
			yyerror("Constant declared twice");
		else if ($4 == opMinus)
			ConstTable[*$1] = $3 - $5;
		else if ($4 == opPlus)
			ConstTable[*$1] = $3 + $5;
		else
			yyerror("Constant expression must be NUM + NUM or NUM - NUM");
		delete $1;
	  }

	| NAME EQUATE str_expr    { NameTable[*$1] = $3; }
	| NAME EQUATE opstr_expr  { OpTable[*$1]   = $3; }
	| NAME EQUATE expstr_expr { ExpTable[*$1]  = $3; }
	;

str_expr
	: str_expr str_term {
		// cross-product of two str_expr's
		$$ = new std::deque<std::string>;
		for (const auto &i : *$1)
			for (const auto &j : *$2)
				$$->push_back(i + j);
		delete $1;
		delete $2;
	  }
	| str_term { $$ = $1; }
	;

str_term
	: '{' str_array '}' { $$ = $2; }
	| name_expand       { $$ = $1; }
	;

str_array
	: str_array ',' str_expr {
		$$ = $1;
		$$->insert($$->end(), $3->begin(), $3->end());  // append $3
		delete $3;
	  }
	| str_array ',' '"' '"' { $1->push_back(""); }
	| str_expr              { $$ = $1; }
	;

name_expand
	: '\'' NAME '\'' {
		$$ = new std::deque<std::string>;
		$$->push_back("");
		$$->push_back(*$2);
		delete $2;
	  }

	| '"' NAME '"' {
		$$ = new std::deque<std::string>(1, *$2);
		delete $2;
	  }

	| '$' NAME {
		// expand $2 from table of names
		auto it = NameTable.find(*$2);
		if (it == NameTable.end()) {
			std::ostringstream o;
			o << "Could not dereference name " << *$2;
			yyerror(o.str().c_str());
		} else {
			$$ = new std::deque<std::string>(*it->second);
		}
		delete $2;
	  }
	;

/* Example: OP2 := { "<<",  ">>",  ">>A" }; */
opstr_expr
	: '{' opstr_array '}' { $$ = $2; }
	;

opstr_array
	: opstr_array ',' '"' bin_oper '"' { $$ = $1; $$->push_back($4); }
	| '"' bin_oper '"'           { $$ = new std::deque<OPER>(1, $2); }
	;

bin_oper
	: BIT_OP    { $$ = $1; }
	| ARITH_OP  { $$ = $1; }
	| FARITH_OP { $$ = $1; }
	;

/* Example: COND1_C := { "~%ZF", "%ZF", "~(%ZF | (%NF ^ %OF))", ... }; */
expstr_expr
	: '{' expstr_array '}' { $$ = $2; }
	;

expstr_array
	: expstr_array ',' '"' exp '"' { $$ = $1; $$->push_back($4); }
	| '"' exp '"'           { $$ = new std::deque<Exp *>(1, $2); }
	;

instr
	: instr_name { $1->getrefmap(indexrefmap); } list_parameter rt_list {
		// This function expands the tables and saves the expanded RTLs to the dictionary
		expandTables(*$1, *$3, *$4, Dict);
		indexrefmap.clear();
		delete $1;
		delete $3;
		delete $4;
	  }
	;

instr_name
	: instr_elem { $$ = $1; }
	| instr_name DECOR {
		// remove all . from the decoration
		$2->erase(std::remove($2->begin(), $2->end(), '.'), $2->end());

		$$ = $1;
		$$->append(new InsNameElem(*$2));
		delete $2;
	  }
	;

instr_elem
	: NAME                     { $$ = new InsNameElem(*$1); delete $1; }
	| name_contract            { $$ = $1; }
	| instr_elem name_contract { $$ = $1; $$->append($2); }
	;

name_contract
	: '\'' NAME '\'' { $$ = new InsOptionElem(*$2); delete $2; }

	| '"' NAME '"' { $$ = new InsNameElem(*$2); delete $2; }

	| NAME_LOOKUP NUM ']' {
		auto it = NameTable.find(*$1);
		if (it == NameTable.end()) {
			std::ostringstream o;
			o << "Table " << *$1 << " has not been declared";
			yyerror(o.str().c_str());
		} else if (($2 < 0) || ($2 >= (int)it->second->size())) {
			std::ostringstream o;
			o << "Can't get element " << $2 << " of table " << *$1;
			yyerror(o.str().c_str());
		} else {
			$$ = new InsNameElem((*it->second)[$2]);
		}
		delete $1;
	  }

	| '$' NAME_LOOKUP NUM ']' {
		auto it = NameTable.find(*$2);
		if (it == NameTable.end()) {
			std::ostringstream o;
			o << "Table " << *$2 << " has not been declared";
			yyerror(o.str().c_str());
		} else if (($3 < 0) || ($3 >= (int)it->second->size())) {
			std::ostringstream o;
			o << "Can't get element " << $3 << " of table " << *$2;
			yyerror(o.str().c_str());
		} else {
			$$ = new InsNameElem((*it->second)[$3]);
		}
		delete $2;
	  }

	/* Example: ARITH[IDX]  where ARITH := { "ADD", "SUB", ... }; */
	| NAME_LOOKUP NAME ']' {
		auto it = NameTable.find(*$1);
		if (it == NameTable.end()) {
			std::ostringstream o;
			o << "Table " << *$1 << " has not been declared";
			yyerror(o.str().c_str());
		} else {
			$$ = new InsListElem(*$1, it->second, *$2);
		}
		delete $1;
		delete $2;
	  }

	| '$' NAME_LOOKUP NAME ']' {
		auto it = NameTable.find(*$2);
		if (it == NameTable.end()) {
			std::ostringstream o;
			o << "Table " << *$2 << " has not been declared";
			yyerror(o.str().c_str());
		} else {
			$$ = new InsListElem(*$2, it->second, *$3);
		}
		delete $2;
		delete $3;
	  }
	;

rt_list
	: rt_list rt {
		// append any automatically generated register transfers and clear the list they were stored in.
		// Do nothing for a NOP (i.e. $2 == nullptr)
		$$ = $1;
		if ($2)
			$$->appendStmt($2);
	  }
	| rt {
		$$ = new RTL();
		if ($1)
			$$->appendStmt($1);
	  }
	;

rt
	: assign_rt { $$ = $1; }

	/* Example: ADDFLAGS(r[tmp], reg_or_imm, r[rd]) */
	| NAME_CALL list_actualparameter ')' {
		if (Dict.FlagFuncs.count(*$1)) {
			// Note: SETFFLAGS assigns to the floating point flags. All others to the integer flags
			bool bFloat = *$1 == "SETFFLAGS";
			OPER op = bFloat ? opFflags : opFlags;
			$$ = new Assign(new Terminal(op), new Binary(opFlagCall,
			                                             new Const(*$1),
			                                             listExpToExp(*$2)));
		} else {
			std::ostringstream o;
			o << *$1 << " is not declared as a flag function";
			yyerror(o.str().c_str());
		}
		delete $1;
		delete $2;
	  }

	| FLAGMACRO flag_list ')' { $$ = nullptr; }

	/* E.g. undefineflags() (but we don't handle this yet... flags are changed, but not in a way we support) */
	| FLAGMACRO ')' { $$ = nullptr; }
	| '_'           { $$ = nullptr; }
	;

flag_list
	: flag_list ',' REG_ID {
		// Not sure why the below is commented out (MVE)
		/*Location *pFlag = Location::regOf(Dict.RegMap[*$3]);
		$1->push_back(pFlag);
		$$ = $1;*/
		$$ = nullptr;
		delete $3;
	  }
	| REG_ID {
		/*auto tmp = new std::list<Exp *>;
		auto pFlag = new Unary(opIdRegOf, Dict.RegMap[*$1]);
		tmp->push_back(pFlag);
		$$ = tmp;*/
		$$ = nullptr;
		delete $1;
	  }
	;

/* Note: this list is a list of strings (other code needs this) */
list_parameter
	: list_parameter ',' param { $$ = $1; $$->push_back(*$3); delete $3; }
	| param        { $$ = new std::list<std::string>(1, *$1); delete $1; }
	| /* empty */  { $$ = new std::list<std::string>; }
	;

param
	: NAME {
		Dict.ParamSet.insert(*$1);  // MVE: Likely wrong. Likely supposed to be OPERAND params only
		$$ = $1;
	  }
	;

list_actualparameter
	: list_actualparameter ',' exp { $$ = $1; $$->push_back($3); }
	| exp                    { $$ = new std::list<Exp *>(1, $1); }
	| /* empty */            { $$ = new std::list<Exp *>; }
	;

assign_rt
	/*   Size   guard =>    lhs      :=   rhs */
	: assigntype exp THEN location EQUATE exp {
		$$ = new Assign($1, $4, $6, $2);
	  }
	/*   Size      lhs      :=   rhs */
	| assigntype location EQUATE exp {
		// update the size of any generated RT's
		$$ = new Assign($1, $2, $4);
	  }

	/* FPUSH and FPOP are special "transfers" with just a Terminal */
	| FPUSH { $$ = new Assign(new Terminal(opNil), new Terminal($1)); }
	| FPOP  { $$ = new Assign(new Terminal(opNil), new Terminal($1)); }

	/* Just a RHS? Is this used? Note: flag calls are handled at the rt: level */
	| assigntype exp { $$ = new Assign($1, nullptr, $2); }
	;

exp
	: NUM                         { $$ = new Const($1); }
	| FLOATNUM                    { $$ = new Const($1); }
	| '(' exp ')'                 { $$ = $2; }
	| location                    { $$ = $1; }
	| '[' exp '?' exp ':' exp ']' { $$ = new Ternary(opTern, $2, $4, $6); }

	| UNARY_FUNC exp ')' { $$ = new Unary($1, $2); }

	/* Conversion functions, e.g. fsize(32, 80, modrm). Args are FROMsize, TOsize, EXPression */
	| CONV_FUNC NUM ',' NUM ',' exp ')' { $$ = new Ternary($1, new Const($2), new Const($4), $6); }

	/* FPUSH and FPOP */
	| FPUSH { $$ = new Terminal($1); }
	| FPOP  { $$ = new Terminal($1); }

	/* Example: *Use* of COND[idx] */
	| NAME_LOOKUP NAME ']' {
		auto ir = indexrefmap.find(*$2);
		auto it = ExpTable.find(*$1);
		if (ir == indexrefmap.end()) {
			std::ostringstream o;
			o << "Index " << *$2 << " not declared for use";
			yyerror(o.str().c_str());
		} else if (it == ExpTable.end()) {
			std::ostringstream o;
			o << "Table " << *$1 << " not declared for use";
			yyerror(o.str().c_str());
		} else if ((int)it->second->size() < ir->second->ntokens()) {
			std::ostringstream o;
			o << "Table " << *$1 << " (" << it->second->size()
			  << ") is too small to use " << *$2 << " (" << ir->second->ntokens() << ") as an index";
			yyerror(o.str().c_str());
		}
		// $1 is a map from string to Table*; $2 is a map from string to InsNameElem*
		$$ = new Binary(opExpTable, new Const(*$1), new Const(*$2));
		delete $1;
		delete $2;
	  }

	/* This is a "lambda" function-like parameter
	 * $1 is the "function" name, and $2 is a list of Exp* for the actual params.
	 * I believe only PA/RISC uses these so far. */
	| NAME_CALL list_actualparameter ')' {
		if (Dict.ParamSet.count(*$1)) {
			auto it = Dict.DetParamMap.find(*$1);
			if (it != Dict.DetParamMap.end()) {
				ParamEntry &param = it->second;
				if ($2->size() == param.funcParams.size()) {
					// Everything checks out. *phew*
					// Note: the below may not be right! (MVE)
					$$ = new Binary(opFlagCall, new Const(*$1), listExpToExp(*$2));
				} else {
					std::ostringstream o;
					o << *$1 << " requires " << param.funcParams.size() << " parameters, but received " << $2->size();
					yyerror(o.str().c_str());
				}
			} else {
				std::ostringstream o;
				o << *$1 << " is not defined as a OPERAND function";
				yyerror(o.str().c_str());
			}
		} else {
			std::ostringstream o;
			o << "Unrecognized name " << *$1 << " in lambda call";
			yyerror(o.str().c_str());
		}
		delete $1;
		delete $2;
	  }

	/* FIXME:  Does the following comment still apply?  '!' is highest precedence. */
	/* Sign extend. Note it effectively has low precedence, because being a post operator,
	 * the whole expression is already parsed, and hence is sign extended.
	 * Another reason why ! is deprecated! */
	| exp '!' { $$ = new Unary(opSignExt, $1); }

	/* "%prec POSTFIX_OP" just says that this operator has the precedence of the dummy terminal POSTFIX_OP
	 * It's a "precedence modifier" (see "Context-Dependent Precedence" in the Bison documantation) */
	| exp '{' NUM '}' %prec POSTFIX_OP {
		// size casts and the opSize operator were generally deprecated, but now opSize is used to transmit
		// the size of operands that could be memOfs from the decoder to type analysis
		if ($3 == STD_SIZE)
			$$ = $1;
		else
			$$ = new Binary(opSize, new Const($3), $1);
	  }

	| NEG_OP exp { $$ = new Unary($1, $2); }

	| exp FARITH_OP exp { $$ = new Binary($2, $1, $3); }
	| exp ARITH_OP  exp { $$ = new Binary($2, $1, $3); }
	| exp BIT_OP    exp { $$ = new Binary($2, $1, $3); }
	| exp COND_OP   exp { $$ = new Binary($2, $1, $3); }
	| exp LOG_OP    exp { $$ = new Binary($2, $1, $3); }

	/* See comment above re "%prec TABLE_OP"
	 * Example: OP1[IDX] where OP1 := {  "&",  "|", "^", ... }; */
	| exp NAME_LOOKUP NAME ']' exp %prec TABLE_OP {
		auto ir = indexrefmap.find(*$3);
		auto it = OpTable.find(*$2);
		if (ir == indexrefmap.end()) {
			std::ostringstream o;
			o << "Index " << *$3 << " not declared for use";
			yyerror(o.str().c_str());
		} else if (it == OpTable.end()) {
			std::ostringstream o;
			o << "Table " << *$2 << " not declared for use";
			yyerror(o.str().c_str());
		} else if ((int)it->second->size() < ir->second->ntokens()) {
			std::ostringstream o;
			o << "Table " << *$2 << " is too small to use with " << *$3 << " as an index";
			yyerror(o.str().c_str());
		}
		$$ = new Ternary(opOpTable,
		                 new Const(*$2),
		                 new Const(*$3),
		                 new Binary(opList,
		                            $1,
		                            new Binary(opList,
		                                       $5,
		                                       new Terminal(opNil))));
		delete $2;
		delete $3;
	  }
	;

location
	/* This is for constant register numbers. Often, these are special, in the sense that the register mapping
	 * is -1. If so, the equivalent of a special register is generated, i.e. a Terminal or opMachFtr
	 * (machine specific feature) representing that register. */
	: REG_ID {
		bool isFlag = $1->find("flags") != $1->npos;
		auto it = Dict.RegMap.find(*$1);
		if (it == Dict.RegMap.cend() && !isFlag) {
			std::ostringstream o;
			o << "Register `" << *$1 << "' is undefined";
			yyerror(o.str().c_str());
		} else if (isFlag || it->second == -1) {
			// A special register, e.g. %npc or %CF. Return a Terminal for it
			OPER op = strToTerm($1->c_str());
			if (op) {
				$$ = new Terminal(op);
			} else {
				$$ = new Unary(opMachFtr,  // Machine specific feature
				               new Const(*$1));
			}
		} else {
			// A register with a constant reg nmber, e.g. %g2.  In this case, we want to return r[const 2]
			$$ = Location::regOf(it->second);
		}
		delete $1;
	  }

	| REG_IDX exp ']' { $$ = Location::regOf($2); }
	| REG_NUM         { $$ = Location::regOf($1); }
	| MEM_IDX exp ']' { $$ = Location::memOf($2); }

	| NAME {
		// This is a mixture of the param: PARM {} match and the value_op: NAME {} match
		if (Dict.ParamSet.count(*$1)) {
			$$ = Location::param(*$1);
		} else if (ConstTable.count(*$1)) {
			$$ = new Const(ConstTable[*$1]);
		} else {
			std::ostringstream o;
			o << "`" << *$1 << "' is not a constant, definition or a parameter of this instruction";
			yyerror(o.str().c_str());
			$$ = new Const(0);
		}
		delete $1;
	  }

	| exp '@' '[' exp ':' exp ']' { $$ = new Ternary(opAt, $1, $4, $6); }

	| TEMP { $$ = Location::tempOf(new Const(*$1)); delete $1; }

	/* This indicates a post-instruction marker (var tick) */
	| location '\'' { $$ = new Unary(opPostVar, $1); }
	| SUCCESSOR exp ')' { $$ = makeSuccessor($2); }
	;

assigntype
	: ASSIGNTYPE {
		const char *s = $1->c_str();
		char c = s[0];
		int size = 0;
		if (!c) {
			$$ = new SizeType(size); // MVE: should remove these
		} else if (isdigit(c)) {
			sscanf(s, "%d", &size);
			$$ = new SizeType(size);
		} else {
			// Skip letter
			sscanf(s + 1, "%d", &size);
			if (size == 0) size = STD_SIZE;
			switch (c) {
			case 'i': $$ = new IntegerType(size,  1); break;
			case 'j': $$ = new IntegerType(size,  0); break;
			case 'u': $$ = new IntegerType(size, -1); break;
			case 'f': $$ = new FloatType(size); break;
			case 'c': $$ = new CharType; break;
			default:
				std::cerr << "Unexpected char " << c << " in assign type\n";
				$$ = new IntegerType;
			}
		}
		delete $1;
	  }
	;

/* Section for indicating which instructions to substitute when using -f (fast but not quite as exact instruction mapping) */
fastentries
	: fastentries ',' fastentry
	| fastentry
	;

fastentry
	: NAME INDEX NAME { Dict.fastMap[*$1] = *$3; delete $1; delete $3; }
	;

%%

/*==============================================================================
 * FUNCTION:        SSLParser::~SSLParser
 * OVERVIEW:        Destructor.
 *============================================================================*/
SSLParser::~SSLParser()
{
	delete theScanner;
	for (const auto &loc : NameTable)
		delete loc.second;
	for (const auto &loc : OpTable)
		delete loc.second;
	for (const auto &loc : ExpTable) {
		for (const auto &e : *loc.second)
			delete e;
		delete loc.second;
	}
}

/*==============================================================================
 * FUNCTION:        SSLParser::yyerror
 * OVERVIEW:        Display an error message and exit.
 * PARAMETERS:      msg - an error message
 *============================================================================*/
void
SSLParser::yyerror(const char* msg)
{
	// TODO:  Replace "ssl" with the filename.
	std::cerr << "ssl:" << theScanner->theLine << ": " << msg << "\n";
}

/*==============================================================================
 * FUNCTION:        SSLParser::yylex
 * OVERVIEW:        The scanner driver than returns the next token.
 * RETURNS:         the next token
 *============================================================================*/
int
SSLParser::yylex()
{
	int token = theScanner->yylex(yylval);
	return token;
}

static OPER
strToTerm(const char *s)
{
	// s could be %pc, %afp, %agp, %CF, %ZF, %OF, %NF, %DF, %flags, %fflags
	if (s[2] == 'F') {
		if (s[1] <= 'N') {
			if (s[1] == 'C') return opCF;
			if (s[1] == 'N') return opNF;
			return opDF;
		} else {
			if (s[1] == 'O') return opOF;
			return opZF;
		}
	}
	if (s[1] == 'p') return opPC;
	if (s[1] == 'a') {
		if (s[2] == 'f') return opAFP;
		if (s[2] == 'g') return opAGP;
	} else if (s[1] == 'f') {
		if (s[2] == 'l') return opFlags;
		if (s[2] == 'f') return opFflags;
	}
	return (OPER)0;
}

/*==============================================================================
 * FUNCTION:        listExpToExp
 * OVERVIEW:        Convert a list of actual parameters in the form of a STL list of Exps into one expression
 *                    (using opList)
 * NOTE:            The expressions in the list are not cloned; they are simply copied to the new opList
 * PARAMETERS:      le: the list of expressions
 * RETURNS:         The opList Expression
 *============================================================================*/
static Exp *
listExpToExp(const std::list<Exp *> &le)
{
	Exp *e = new Terminal(opNil);  // Terminate the chain
	for (auto it = le.crbegin(); it != le.crend(); ++it)
		e = new Binary(opList, *it, e);
	return e;
}

/*==============================================================================
 * FUNCTION:        listStrToExp
 * OVERVIEW:        Convert a list of formal parameters in the form of a STL list of strings into one expression
 *                    (using opList)
 * PARAMETERS:      ls - the list of strings
 * RETURNS:         The opList expression
 *============================================================================*/
static Exp *
listStrToExp(const std::list<std::string> &ls)
{
	Exp *e = new Terminal(opNil);  // Terminate the chain
	for (auto it = ls.crbegin(); it != ls.crend(); ++it)
		e = new Binary(opList, Location::param(*it), e);
	return e;
}


class ExpTableExpander : public ExpModifier {
	typedef std::map<std::string, std::deque<Exp *> *> TABLES;
	typedef std::map<std::string, const InsNameElem *> INSELEMS;
	const TABLES &tables;
	const INSELEMS &inselems;
public:
	ExpTableExpander(const TABLES &tables, const INSELEMS &inselems) : tables(tables), inselems(inselems) { }
	Exp *postVisit(Binary *) override;
};

Exp *
ExpTableExpander::postVisit(Binary *e)
{
	Exp *ret = e;
	if (e->getOper() == opExpTable) {
		const auto &tbl = tables.at(((Const *)e->getSubExp1())->getStr());
		const auto &idx = inselems.at(((Const *)e->getSubExp2())->getStr());
		ret = (*tbl)[idx->getvalue()];
		ret = ret->clone();
	}
	return ret;
}


class OpTableExpander : public ExpModifier {
	typedef std::map<std::string, std::deque<OPER> *> TABLES;
	typedef std::map<std::string, const InsNameElem *> INSELEMS;
	const TABLES &tables;
	const INSELEMS &inselems;
public:
	OpTableExpander(const TABLES &tables, const INSELEMS &inselems) : tables(tables), inselems(inselems) { }
	Exp *postVisit(Ternary *) override;
};

Exp *
OpTableExpander::postVisit(Ternary *e)
{
	Exp *ret = e;
	if (e->getOper() == opOpTable) {
		// The ternary opOpTable has a table and index name as strings, then a list of 2 expressions
		// (and we want to replace it with e1 OP e2)
		const auto &tbl = tables.at(((Const *)e->getSubExp1())->getStr());
		const auto &idx = inselems.at(((Const *)e->getSubExp2())->getStr());
		auto op = (*tbl)[idx->getvalue()];

		// The expressions to operate on are in the list
		auto b = (Binary *)e->getSubExp3();
		assert(b->getOper() == opList);
		auto e1 = b->getSubExp1();
		b = (Binary *)b->getSubExp2();  // This should be an opList too
		assert(b->getOper() == opList);
		auto e2 = b->getSubExp1();
		ret = new Binary(op, e1->clone(), e2->clone());  // FIXME!
	}
	return ret;
}

/*==============================================================================
 * FUNCTION:        SSLParser::expandTables
 * OVERVIEW:        Expand tables in an RTL and save to dictionary
 * NOTE:            This may generate many entries
 * PARAMETERS:      iname: Parser object representing the instruction name
 *                  params: Parser object representing the instruction params
 *                  o_rtlist: Original rtlist object (before expanding)
 *                  Dict: Ref to the dictionary that will contain the results of the parse
 *============================================================================*/
void
SSLParser::expandTables(InsNameElem &iname, const std::list<std::string> &params, const RTL &o_rtlist, RTLInstDict &Dict)
{
	assert(iname.ninstructions());
	iname.reset();
	// Expand the tables (if any) in this instruction
	auto ete = ExpTableExpander(ExpTable, indexrefmap);
	auto ote = OpTableExpander(OpTable, indexrefmap);
	auto etm = StmtModifier(ete);
	auto otm = StmtModifier(ote);
	do {
		// Need to make substitutions to a copy of the RTL
		auto rtl = o_rtlist.clone();
		for (const auto &s : rtl->getList()) {
			s->accept(etm);
			s->accept(otm);
		}

		auto nam = iname.getinstruction();
		if (!Dict.appendToDict(nam, params, *rtl)) {
			std::ostringstream o;
			o << "Pattern " << iname.getinspattern() << " conflicts with an earlier declaration of " << nam;
			yyerror(o.str().c_str());
		}
	} while (iname.increment());
}

/*==============================================================================
 * FUNCTION:        SSLParser::makeSuccessor
 * OVERVIEW:        Make the successor of the given expression, e.g. given r[2], return succ(r[2])
 *                    (using opSuccessor)
 *                  We can't do the successor operation here, because the parameters are not yet instantiated
 *                    (still of the form param(rd)). Actual successor done in Exp::fixSuccessor()
 * NOTE:            The given expression should be of the form  r[const]
 * NOTE:            The parameter expresion is copied (not cloned) in the result
 * PARAMETERS:      The expression to find the successor of
 * RETURNS:         The modified expression
 *============================================================================*/
Exp *
SSLParser::makeSuccessor(Exp *e)
{
	return new Unary(opSuccessor, e);
}
